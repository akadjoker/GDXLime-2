// Generated by Haxe 3.4.7
(function ($hx_exports, $global) { "use strict";
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = true;
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = true;
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	__class__: lime_app_Module
};
var lime__$internal_backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
	this.accelerometer = lime_system_Sensor.registerSensor(lime_system_SensorType.ACCELEROMETER,0);
};
$hxClasses["lime._internal.backend.html5.HTML5Application"] = lime__$internal_backend_html5_HTML5Application;
lime__$internal_backend_html5_HTML5Application.__name__ = true;
lime__$internal_backend_html5_HTML5Application.prototype = {
	convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 12:
			return 1073741980;
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 19:
			return 1073741896;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 41:
			return 1073741943;
		case 43:
			return 1073741940;
		case 44:
			return 1073741894;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 91:
			return 1073742051;
		case 92:
			return 1073742055;
		case 93:
			return 1073742055;
		case 95:
			return 1073742106;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 108:
			return 1073741923;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 127:
			return 1073741931;
		case 128:
			return 1073741932;
		case 129:
			return 1073741933;
		case 130:
			return 1073741934;
		case 131:
			return 1073741935;
		case 132:
			return 1073741936;
		case 133:
			return 1073741937;
		case 134:
			return 1073741938;
		case 135:
			return 1073741939;
		case 144:
			return 1073741907;
		case 145:
			return 1073741895;
		case 160:
			return 94;
		case 161:
			return 33;
		case 163:
			return 35;
		case 164:
			return 36;
		case 166:
			return 1073742094;
		case 167:
			return 1073742095;
		case 168:
			return 1073742097;
		case 169:
			return 41;
		case 170:
			return 42;
		case 171:
			return 96;
		case 172:
			return 1073741898;
		case 173:
			return 45;
		case 174:
			return 1073741953;
		case 175:
			return 1073741952;
		case 176:
			return 1073742082;
		case 177:
			return 1073742083;
		case 178:
			return 1073742084;
		case 179:
			return 1073742085;
		case 180:
			return 1073742089;
		case 181:
			return 1073742086;
		case 182:
			return 1073741953;
		case 183:
			return 1073741952;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 193:
			return 63;
		case 194:
			return 1073741923;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		case 223:
			return 96;
		case 224:
			return 1073742051;
		case 226:
			return 92;
		}
		return keyCode;
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("devicemotion",$bind(this,this.handleSensorEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}

			if ('performance' in window == false) {
				window.performance = {};
			}

			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); },
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,handleApplicationEvent: function(__) {
		var _g = 0;
		var _g1 = this.parent.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.__backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var _g2 = 0;
			var _g11 = this.parent.__windows;
			while(_g2 < _g11.length) {
				var window1 = _g11[_g2];
				++_g2;
				this.parent.onUpdate.dispatch(this.deltaTime | 0);
				if(window1.context != null) {
					window1.onRender.dispatch(window1.context);
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate - this.currentUpdate % this.framePeriod + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__window != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__window.onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyDown.canceled && event.cancelable) {
					event.preventDefault();
				}
			} else {
				this.parent.__window.onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyUp.canceled && event.cancelable) {
					event.preventDefault();
				}
			}
		}
	}
	,handleSensorEvent: function(event) {
		this.accelerometer.onUpdate.dispatch(event.accelerationIncludingGravity.x,event.accelerationIncludingGravity.y,event.accelerationIncludingGravity.z);
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__window != null) {
			var _g = event.type;
			switch(_g) {
			case "beforeunload":
				if(!event.defaultPrevented) {
					this.parent.__window.onClose.dispatch();
					if(this.parent.__window != null && this.parent.__window.onClose.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "blur":
				this.parent.__window.onFocusOut.dispatch();
				this.parent.__window.onDeactivate.dispatch();
				break;
			case "focus":
				this.parent.__window.onFocusIn.dispatch();
				this.parent.__window.onActivate.dispatch();
				break;
			case "resize":
				this.parent.__window.__backend.handleResizeEvent(event);
				break;
			}
		}
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$internal_backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) {
					var i1 = _g3++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) {
					var i2 = _g31++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(id);
					}
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i3 = _g32++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i4 = _g33++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onCreateWindow = new lime_app__$Event_$lime_$ui_$Window_$Void();
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.meta = new haxe_ds_StringMap();
	this.modules = [];
	this.__windowByID = new haxe_ds_IntMap();
	this.__windows = [];
	this.__backend = new lime__$internal_backend_html5_HTML5Application(this);
	this.__registerLimeModule(this);
	this.__preloader = new lime_utils_Preloader();
	this.__preloader.onProgress.add($bind(this,this.onPreloadProgress));
	this.__preloader.onComplete.add($bind(this,this.onPreloadComplete));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = true;
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	createWindow: function(attributes) {
		var $window = this.__createWindow(attributes);
		this.__addWindow($window);
		return $window;
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.__backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY,deltaMode) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowCreate: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowDropFile: function(file) {
	}
	,onWindowEnter: function() {
	}
	,onWindowExpose: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowMinimize: function() {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__addWindow: function(window) {
		if(window != null) {
			this.__windows.push(window);
			this.__windowByID.h[window.id] = window;
			var f = $bind(this,this.__onWindowClose);
			var a1 = window;
			var tmp = function() {
				f(a1);
			};
			window.onClose.add(tmp,false,-10000);
			if(this.__window == null) {
				this.__window = window;
				window.onActivate.add($bind(this,this.onWindowActivate));
				window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
				window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
				window.onDeactivate.add($bind(this,this.onWindowDeactivate));
				window.onDropFile.add($bind(this,this.onWindowDropFile));
				window.onEnter.add($bind(this,this.onWindowEnter));
				window.onExpose.add($bind(this,this.onWindowExpose));
				window.onFocusIn.add($bind(this,this.onWindowFocusIn));
				window.onFocusOut.add($bind(this,this.onWindowFocusOut));
				window.onFullscreen.add($bind(this,this.onWindowFullscreen));
				window.onKeyDown.add($bind(this,this.onKeyDown));
				window.onKeyUp.add($bind(this,this.onKeyUp));
				window.onLeave.add($bind(this,this.onWindowLeave));
				window.onMinimize.add($bind(this,this.onWindowMinimize));
				window.onMouseDown.add($bind(this,this.onMouseDown));
				window.onMouseMove.add($bind(this,this.onMouseMove));
				window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
				window.onMouseUp.add($bind(this,this.onMouseUp));
				window.onMouseWheel.add($bind(this,this.onMouseWheel));
				window.onMove.add($bind(this,this.onWindowMove));
				window.onRender.add($bind(this,this.render));
				window.onResize.add($bind(this,this.onWindowResize));
				window.onRestore.add($bind(this,this.onWindowRestore));
				window.onTextEdit.add($bind(this,this.onTextEdit));
				window.onTextInput.add($bind(this,this.onTextInput));
				this.onWindowCreate();
			}
			this.onCreateWindow.dispatch(window);
		}
	}
	,__createWindow: function(attributes) {
		var $window = new lime_ui_Window(this,attributes);
		if($window.id == -1) {
			return null;
		}
		return $window;
	}
	,__registerLimeModule: function(application) {
		application.onUpdate.add($bind(this,this.update));
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onExit.add($bind(this,this.__onModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) {
			var joystick1 = joystick.next();
			this.__onJoystickConnect(joystick1);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,__removeWindow: function(window) {
		if(window != null && this.__windowByID.h.hasOwnProperty(window.id)) {
			if(this.__window == window) {
				this.__window = null;
			}
			HxOverrides.remove(this.__windows,window);
			this.__windowByID.remove(window.id);
			window.close();
			if(this.__windows.length == 0) {
				lime_system_System.exit(0);
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		var tmp3 = function() {
			f3(a13);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var f = $bind(this,this.onJoystickAxisMove);
		var a1 = joystick;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		joystick.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onJoystickButtonDown);
		var a11 = joystick;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		joystick.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onJoystickButtonUp);
		var a12 = joystick;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		joystick.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onJoystickDisconnect);
		var a13 = joystick;
		var tmp3 = function() {
			f3(a13);
		};
		joystick.onDisconnect.add(tmp3);
		var f4 = $bind(this,this.onJoystickHatMove);
		var a14 = joystick;
		var tmp4 = function(a23,a31) {
			f4(a14,a23,a31);
		};
		joystick.onHatMove.add(tmp4);
		var f5 = $bind(this,this.onJoystickTrackballMove);
		var a15 = joystick;
		var tmp5 = function(a24,x,y) {
			f5(a15,a24,x,y);
		};
		joystick.onTrackballMove.add(tmp5);
	}
	,__onModuleExit: function(code) {
		this.__backend.exit();
	}
	,__onWindowClose: function(window) {
		if(this.__window == window) {
			this.onWindowClose();
		}
		this.__removeWindow(window);
	}
	,__class__: lime_app_Application
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = true;
ApplicationMain.main = function() {
	lime_system_System.__registerEntryPoint("opn3d",ApplicationMain.create);
};
ApplicationMain.create = function(config) {
	ManifestResources.init(config);
	var app = new Main();
	var _this = app.meta;
	if(__map_reserved["build"] != null) {
		_this.setReserved("build","181");
	} else {
		_this.h["build"] = "181";
	}
	var _this1 = app.meta;
	if(__map_reserved["company"] != null) {
		_this1.setReserved("company","Luis Santos AKA DJOKER");
	} else {
		_this1.h["company"] = "Luis Santos AKA DJOKER";
	}
	var _this2 = app.meta;
	if(__map_reserved["file"] != null) {
		_this2.setReserved("file","opn3d");
	} else {
		_this2.h["file"] = "opn3d";
	}
	var _this3 = app.meta;
	if(__map_reserved["name"] != null) {
		_this3.setReserved("name","Keys n/m to change demos. ");
	} else {
		_this3.h["name"] = "Keys n/m to change demos. ";
	}
	var _this4 = app.meta;
	if(__map_reserved["packageName"] != null) {
		_this4.setReserved("packageName","com.djokersoft.landscape");
	} else {
		_this4.h["packageName"] = "com.djokersoft.landscape";
	}
	var _this5 = app.meta;
	if(__map_reserved["version"] != null) {
		_this5.setReserved("version","1.0.0");
	} else {
		_this5.h["version"] = "1.0.0";
	}
	var attributes = { allowHighDPI : false, alwaysOnTop : false, borderless : false, element : null, frameRate : 1000, height : 0, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, title : "Keys n/m to change demos. ", width : 0, x : null, y : null};
	attributes.context = { antialiasing : 4, background : 0, colorDepth : 32, depth : true, hardware : true, stencil : false, type : null, vsync : false};
	if(app.__window == null) {
		if(config != null) {
			var _g = 0;
			var _g1 = Reflect.fields(config);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(attributes,field)) {
					attributes[field] = Reflect.field(config,field);
				} else if(Object.prototype.hasOwnProperty.call(attributes.context,field)) {
					attributes.context[field] = Reflect.field(config,field);
				}
			}
		}
	}
	app.createWindow(attributes);
	var _g2 = 0;
	var _g11 = ManifestResources.preloadLibraries;
	while(_g2 < _g11.length) {
		var library = _g11[_g2];
		++_g2;
		app.__preloader.addLibrary(library);
	}
	var _g3 = 0;
	var _g12 = ManifestResources.preloadLibraryNames;
	while(_g3 < _g12.length) {
		var name = _g12[_g3];
		++_g3;
		app.__preloader.addLibraryName(name);
	}
	app.__preloader.load();
	ApplicationMain.start(app);
};
ApplicationMain.start = function(app) {
	var result = app.exec();
};
var com_gdx_Screen = function() {
	this.width = com_gdx_Gdx.Instance().getWidth();
	this.height = com_gdx_Gdx.Instance().getHeight();
};
$hxClasses["com.gdx.Screen"] = com_gdx_Screen;
com_gdx_Screen.__name__ = true;
com_gdx_Screen.prototype = {
	getTexture: function(url,Linear,Repeat,mipmap) {
		if(mipmap == null) {
			mipmap = false;
		}
		if(Repeat == null) {
			Repeat = true;
		}
		if(Linear == null) {
			Linear = true;
		}
		return com_gdx_Gdx.Instance().getTexture(url,Linear,Repeat,mipmap);
	}
	,update: function(delta) {
	}
	,render: function() {
	}
	,keyPress: function(keyCode) {
		return com_gdx_Gdx.Instance().keyPress(keyCode);
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
	}
	,show: function() {
	}
	,hide: function() {
	}
	,pause: function() {
	}
	,resume: function() {
	}
	,KeyUp: function(key) {
	}
	,KeyDown: function(key) {
	}
	,TouchDown: function(x,y,num) {
	}
	,TouchMove: function(x,y,num) {
	}
	,TouchUp: function(x,y,num) {
	}
	,__class__: com_gdx_Screen
};
var Demo1 = function() {
	this.previousMouse = new com_gdx_math_Vector2(0,0);
	this.MouseSpeed = new com_gdx_math_Vector2(0,0);
	this.mouseDow = false;
	this.mousey = 0;
	this.mousex = 0;
	com_gdx_Screen.call(this);
};
$hxClasses["Demo1"] = Demo1;
Demo1.__name__ = true;
Demo1.__super__ = com_gdx_Screen;
Demo1.prototype = $extend(com_gdx_Screen.prototype,{
	show: function() {
		this.scene = new com_gdx_scene3d_SceneManager(50000);
		this.camera = this.scene.addTargetCamera(0,10,100,0,0,100);
		this.camera.setFarValue(5000.0);
		this.font = this.scene.addImageFont("data/arial.png",com_gdx_Gdx.Instance().status,50,com_gdx_Gdx.Instance().height - 100);
		this.map = com_gdx_scene3d_MeshCreator.loadBSPMap("data/gad1.bsp","data/level/",5,false,false);
		this.camera.setLocalPosition(this.map.getPlayerPosition());
		this.octree = this.scene.addNodeMeshOctree(this.map,250);
	}
	,resize: function(width,height) {
		com_gdx_Gdx.Instance().setViewPort(0,0,width,height);
	}
	,update: function(delta) {
		var dt = com_gdx_Gdx.Instance().deltaTime * 3;
		var speed = 120;
		if(this.keyPress(68)) {
			this.camera.Strafe(-speed * dt);
		} else if(this.keyPress(65)) {
			this.camera.Strafe(speed * dt);
		}
		if(this.keyPress(87)) {
			this.camera.Advance(speed * dt);
		} else if(this.keyPress(83)) {
			this.camera.Advance(-speed * dt);
		}
		this.scene.update();
	}
	,render: function() {
		this.scene.render();
		this.scene.renderUI();
		this.font.set_caption(com_gdx_Gdx.Instance().status + ",Nodes Render:" + this.octree.nodesVisible);
	}
	,TouchMove: function(mx,my,num) {
		this.mousex = mx;
		this.mousey = my;
		if(this.mouseDow) {
			this.MouseSpeed.x = mx - this.previousMouse.x;
			this.MouseSpeed.y = my - this.previousMouse.y;
			this.MouseSpeed.normalize();
			this.camera.MouseLook(this.MouseSpeed.x,this.MouseSpeed.y,8,10,8.0 * com_gdx_Gdx.Instance().deltaTime);
			var _this = this.previousMouse;
			_this.x = mx;
			_this.y = my;
		}
	}
	,TouchUp: function(x,y,num) {
		this.mouseDow = false;
	}
	,TouchDown: function(mx,my,num) {
		this.mouseDow = true;
	}
	,__class__: Demo1
});
var Demo2 = function() {
	this.previousMouse = new com_gdx_math_Vector2(0,0);
	this.MouseSpeed = new com_gdx_math_Vector2(0,0);
	this.mouseDow = false;
	this.mousey = 0;
	this.mousex = 0;
	com_gdx_Screen.call(this);
};
$hxClasses["Demo2"] = Demo2;
Demo2.__name__ = true;
Demo2.__super__ = com_gdx_Screen;
Demo2.prototype = $extend(com_gdx_Screen.prototype,{
	show: function() {
		this.scene = new com_gdx_scene3d_SceneManager(50000);
		this.camera = this.scene.addTargetCamera(0,10,-10,0,0,100);
		this.camera.setFarValue(42000.0);
		this.font = this.scene.addImageFont("data/arial.png",com_gdx_Gdx.Instance().status,50,com_gdx_Gdx.Instance().height - 100);
		this.octree = new com_gdx_scene3d_partition_NodeOctree(60);
		var mesh = com_gdx_scene3d_MeshCreator.createCube();
		var _g = 0;
		while(_g < 28) {
			var x = _g++;
			var _g1 = 0;
			while(_g1 < 28) {
				var y = _g1++;
				var node = new com_gdx_scene3d_SceneNode(mesh);
				node.setTexture(this.getTexture("data/t351sml.jpg",true,true,true),0);
				var y1 = Math.random() * -10 + 5;
				var _this = node.local_pos;
				_this.x = x * 5;
				_this.y = y1;
				_this.z = y * 5;
				node.posChanged = true;
				var large = Math.random() * -0.5 + 1.5;
				var y2 = Math.random() * -1. + 1.5;
				var _this1 = node.local_scl;
				_this1.x = large;
				_this1.y = y2;
				_this1.z = large;
				node.posChanged = true;
				this.octree.addNode(node);
			}
		}
		this.octree.build();
		this.scene.addNode(this.octree);
	}
	,resize: function(width,height) {
		com_gdx_Gdx.Instance().setViewPort(0,0,width,height);
	}
	,update: function(delta) {
		this.scene.update();
	}
	,render: function() {
		var dt = com_gdx_Gdx.Instance().deltaTime * 3;
		var speed = 120;
		if(this.keyPress(68)) {
			this.camera.Strafe(-speed * dt);
		} else if(this.keyPress(65)) {
			this.camera.Strafe(speed * dt);
		}
		if(this.keyPress(87)) {
			this.camera.Advance(speed * dt);
		} else if(this.keyPress(83)) {
			this.camera.Advance(-speed * dt);
		}
		this.scene.render();
		this.scene.renderUI();
		this.font.set_caption(com_gdx_Gdx.Instance().status);
	}
	,TouchMove: function(mx,my,num) {
		this.mousex = mx;
		this.mousey = my;
		if(this.mouseDow) {
			this.MouseSpeed.x = mx - this.previousMouse.x;
			this.MouseSpeed.y = my - this.previousMouse.y;
			this.MouseSpeed.normalize();
			this.camera.MouseLook(this.MouseSpeed.x,this.MouseSpeed.y,8,10,8.0 * com_gdx_Gdx.Instance().deltaTime);
			var _this = this.previousMouse;
			_this.x = mx;
			_this.y = my;
		}
	}
	,TouchUp: function(x,y,num) {
		this.mouseDow = false;
	}
	,TouchDown: function(mx,my,num) {
		this.mouseDow = true;
	}
	,__class__: Demo2
});
var Demo3 = function() {
	this.previousMouse = new com_gdx_math_Vector2(0,0);
	this.MouseSpeed = new com_gdx_math_Vector2(0,0);
	this.mouseDow = false;
	this.mousey = 0;
	this.mousex = 0;
	com_gdx_Screen.call(this);
};
$hxClasses["Demo3"] = Demo3;
Demo3.__name__ = true;
Demo3.__super__ = com_gdx_Screen;
Demo3.prototype = $extend(com_gdx_Screen.prototype,{
	show: function() {
		this.scene = new com_gdx_scene3d_SceneManager(50000);
		this.camera = this.scene.addTargetCamera(0,10,100,0,0,100);
		this.camera.setFarValue(5000.0);
		this.font = this.scene.addImageFont("data/arial.png",com_gdx_Gdx.Instance().status,50,com_gdx_Gdx.Instance().height - 100);
		this.map = com_gdx_scene3d_MeshCreator.loadBSPMap("data/small.bsp","data/maxpayne/",2,true);
		this.camera.setLocalPosition(this.map.getPlayerPosition());
		var n = this.scene.addSceneNode(this.map);
		var m = com_gdx_scene3d_MeshCreator.createCube();
		var t = this.scene.addSceneNode(m);
	}
	,resize: function(width,height) {
		com_gdx_Gdx.Instance().setViewPort(0,0,width,height);
	}
	,update: function(delta) {
		var dt = com_gdx_Gdx.Instance().deltaTime * 3;
		var speed = 120;
		if(this.keyPress(68)) {
			this.camera.Strafe(-speed * dt);
		} else if(this.keyPress(65)) {
			this.camera.Strafe(speed * dt);
		}
		if(this.keyPress(87)) {
			this.camera.Advance(speed * dt);
		} else if(this.keyPress(83)) {
			this.camera.Advance(-speed * dt);
		}
		this.scene.update();
	}
	,render: function() {
		this.scene.render();
		this.scene.renderUI();
		this.font.set_caption(com_gdx_Gdx.Instance().status);
	}
	,TouchMove: function(mx,my,num) {
		this.mousex = mx;
		this.mousey = my;
		if(this.mouseDow) {
			this.MouseSpeed.x = mx - this.previousMouse.x;
			this.MouseSpeed.y = my - this.previousMouse.y;
			this.MouseSpeed.normalize();
			this.camera.MouseLook(this.MouseSpeed.x,this.MouseSpeed.y,8,10,8.0 * com_gdx_Gdx.Instance().deltaTime);
			var _this = this.previousMouse;
			_this.x = mx;
			_this.y = my;
		}
	}
	,TouchUp: function(x,y,num) {
		this.mouseDow = false;
	}
	,TouchDown: function(mx,my,num) {
		this.mouseDow = true;
	}
	,__class__: Demo3
});
var DemoBS3DMeshStatic2 = function() {
	this.angle = 0;
	this.lightPosition = new com_gdx_math_Vector3(0,0,0);
	this.previousMouse = new com_gdx_math_Vector2(0,0);
	this.MouseSpeed = new com_gdx_math_Vector2(0,0);
	this.mouseDow = false;
	com_gdx_Screen.call(this);
};
$hxClasses["DemoBS3DMeshStatic2"] = DemoBS3DMeshStatic2;
DemoBS3DMeshStatic2.__name__ = true;
DemoBS3DMeshStatic2.__super__ = com_gdx_Screen;
DemoBS3DMeshStatic2.prototype = $extend(com_gdx_Screen.prototype,{
	show: function() {
		com_gdx_Gdx.Instance().clearColor(0,0,0.4);
		this.scene = new com_gdx_scene3d_SceneManager(4000);
		this.camera = this.scene.addTargetCamera(0,20,-90,0,0,100);
		this.font = this.scene.addImageFont("data/arial.png",com_gdx_Gdx.Instance().status,50,com_gdx_Gdx.Instance().height - 100);
		com_gdx_Gdx.Instance().setFogMode(2,20.0,60.0,0.004);
		this.light = this.scene.addSceneNode(com_gdx_scene3d_MeshCreator.createSphere());
		this.light.setLocalPosition(this.lightPosition);
		this.light.setShader(0);
		this.levelMesh = com_gdx_scene3d_MeshCreator.loadMs3dStatic("data/models/normals.ms3d","data/models/textures/");
		this.levelMesh.ScaleEx(0.1);
		this.levelMesh.setShader(7);
		this.levelNode = this.scene.addSceneNode(this.levelMesh);
	}
	,resize: function(width,height) {
		com_gdx_Gdx.Instance().setViewPort(0,0,width,height);
	}
	,update: function(delta) {
		var dt = com_gdx_Gdx.Instance().deltaTime * 3;
		var speed = 80;
		this.angle += 0.5 * dt;
		this.lightPosition = new com_gdx_math_Vector3(8.0 * Math.cos(this.angle),4 * -Math.sin(this.angle),8.0 * Math.sin(this.angle));
		var shader = js_Boot.__cast(this.levelMesh.pipline , com_gdx_gl_shaders_ShaderPointLight);
		var _this = shader.position;
		var source = this.lightPosition;
		_this.x = source.x;
		_this.y = source.y;
		_this.z = source.z;
		var _this1 = shader.camarePosition;
		var source1 = this.camera.local_pos;
		_this1.x = source1.x;
		_this1.y = source1.y;
		_this1.z = source1.z;
		this.light.setLocalPosition(this.lightPosition);
		if(this.keyPress(80)) {
			shader.intensity += 1;
		} else if(this.keyPress(76)) {
			shader.intensity += 1;
		}
		if(this.keyPress(79)) {
			shader.range += 0.5;
		} else if(this.keyPress(75)) {
			shader.range += 0.5;
		}
		if(this.keyPress(68)) {
			this.camera.Strafe(speed * dt);
		} else if(this.keyPress(65)) {
			this.camera.Strafe(-speed * dt);
		}
		if(this.keyPress(87)) {
			this.camera.Advance(speed * dt);
		} else if(this.keyPress(83)) {
			this.camera.Advance(-speed * dt);
		}
		this.font.set_caption(com_gdx_Gdx.Instance().status + " range:" + shader.range + " intensity:" + shader.intensity);
		this.scene.update();
	}
	,render: function() {
		this.scene.render();
		this.scene.renderUI();
	}
	,TouchMove: function(mx,my,num) {
		if(this.mouseDow) {
			this.MouseSpeed.x = mx - this.previousMouse.x;
			this.MouseSpeed.y = my - this.previousMouse.y;
			this.MouseSpeed.normalize();
			this.camera.MouseLook(this.MouseSpeed.x,this.MouseSpeed.y,8,10,8.0 * com_gdx_Gdx.Instance().deltaTime);
			var _this = this.previousMouse;
			_this.x = mx;
			_this.y = my;
		}
	}
	,TouchUp: function(x,y,num) {
		this.mouseDow = false;
	}
	,TouchDown: function(mx,my,num) {
		this.mouseDow = true;
	}
	,__class__: DemoBS3DMeshStatic2
});
var DemoBoxEmmiter = function() {
	this.previousMouse = new com_gdx_math_Vector2(0,0);
	this.MouseSpeed = new com_gdx_math_Vector2(0,0);
	this.mouseDow = false;
	this.mousey = 0;
	this.mousex = 0;
	com_gdx_Screen.call(this);
};
$hxClasses["DemoBoxEmmiter"] = DemoBoxEmmiter;
DemoBoxEmmiter.__name__ = true;
DemoBoxEmmiter.__super__ = com_gdx_Screen;
DemoBoxEmmiter.prototype = $extend(com_gdx_Screen.prototype,{
	show: function() {
		this.scene = new com_gdx_scene3d_SceneManager(50000);
		this.camera = this.scene.addTargetCamera(0,2,-10,0,0,1000);
		this.font = this.scene.addImageFont("data/arial.png",com_gdx_Gdx.Instance().status,50,com_gdx_Gdx.Instance().height - 100);
		var m = com_gdx_scene3d_MeshCreator.createPlane(0,100,100);
		var n = this.scene.addSceneNode(m);
		n.setTexture(this.getTexture("data/Sand.jpg"));
		var m1 = com_gdx_scene3d_MeshCreator.createCube();
		var n1 = this.scene.addSceneNode(m1);
		n1.setTexture(this.getTexture("data/hire.png"));
		n1.getMaterial(0).setMaterialType(5);
		var _this = n1.local_pos;
		_this.x = 0;
		_this.y = 1;
		_this.z = 0;
		n1.posChanged = true;
		var p = new com_gdx_scene3d_particles_BoxEmitter(20,new com_gdx_math_Vector3(-1,-1.5,-1),new com_gdx_math_Vector3(1,0,1),n1);
		p.setTexture(this.getTexture("data/Fire.png"));
		p.createFire();
		this.scene.addNode(p);
		var m2 = com_gdx_scene3d_MeshCreator.createSphere(8);
		var n2 = this.scene.addSceneNode(m2);
		n2.setTexture(this.getTexture("data/Fire.png"));
		n2.getMaterial(0).setMaterialType(5);
		var _this1 = n2.local_pos;
		_this1.x = -4;
		_this1.y = 2;
		_this1.z = 0;
		n2.posChanged = true;
		var p1 = new com_gdx_scene3d_particles_SphereEmitter(30,new com_gdx_math_Vector3(0,-0.5,0),0.5,n2);
		p1.setTexture(this.getTexture("data/Fire.png"));
		p1.addRotateAffector(new com_gdx_math_Vector3(0,-120,0),new com_gdx_math_Vector3(0,0,0));
		p1.createFire();
		p1.addColorMorphAffector([com_gdx_color_Color3.DARKORANGE,com_gdx_color_Color3.DARKVIOLET,com_gdx_color_Color3.WHITE,com_gdx_color_Color3.YELLOW,com_gdx_color_Color3.BLUE],[500,800,1250,1500,2000],true);
		this.scene.addNode(p1);
		var m3 = com_gdx_scene3d_MeshCreator.createCylinder();
		var n3 = this.scene.addSceneNode(m3);
		n3.setTexture(this.getTexture("data/hire.png"));
		n3.getMaterial(0).setMaterialType(5);
		var _this2 = n3.local_pos;
		_this2.x = 5;
		_this2.y = 2;
		_this2.z = 0;
		n3.posChanged = true;
		var p2 = new com_gdx_scene3d_particles_CylinderEmitter(20,new com_gdx_math_Vector3(0,1,0),1,new com_gdx_math_Vector3(0,-1,0),0.5,false,n3);
		p2.setTexture(this.getTexture("data/light.jpg"));
		p2.addRotateAffector(new com_gdx_math_Vector3(0,90,0),new com_gdx_math_Vector3(0,0,0));
		p2.setupEmitter(-1,new com_gdx_math_Vector3(0.2,0.4,0.1),new com_gdx_math_Vector3(0.40,1.8,0.2),new com_gdx_math_Vector3(0.01,0.1,0.00),new com_gdx_math_Vector3(0.01,0.5,0.0),0.8,4.5,4.2,new com_gdx_color_Color3(0.5,0.5,0.5),new com_gdx_color_Color3(0.1,0.1,0.1),1.0,0.4,4,2.8);
		this.scene.addNode(p2);
	}
	,resize: function(width,height) {
		com_gdx_Gdx.Instance().setViewPort(0,0,width,height);
	}
	,update: function(delta) {
		this.scene.update();
	}
	,render: function() {
		var dt = com_gdx_Gdx.Instance().deltaTime * 3;
		var speed = 80;
		if(this.keyPress(68)) {
			this.camera.Strafe(-speed * dt);
		} else if(this.keyPress(65)) {
			this.camera.Strafe(speed * dt);
		}
		if(this.keyPress(87)) {
			this.camera.Advance(speed * dt);
		} else if(this.keyPress(83)) {
			this.camera.Advance(-speed * dt);
		}
		this.font.set_caption(com_gdx_Gdx.Instance().status + "Cam:" + Std.string(this.camera.local_pos));
		this.scene.render();
		this.scene.renderUI();
	}
	,TouchMove: function(mx,my,num) {
		this.mousex = mx;
		this.mousey = my;
		if(this.mouseDow) {
			this.MouseSpeed.x = mx - this.previousMouse.x;
			this.MouseSpeed.y = my - this.previousMouse.y;
			this.MouseSpeed.normalize();
			this.camera.MouseLook(this.MouseSpeed.x,this.MouseSpeed.y,8,10,8.0 * com_gdx_Gdx.Instance().deltaTime);
			var _this = this.previousMouse;
			_this.x = mx;
			_this.y = my;
		}
	}
	,TouchUp: function(x,y,num) {
		this.mouseDow = false;
	}
	,TouchDown: function(mx,my,num) {
		this.mouseDow = true;
	}
	,__class__: DemoBoxEmmiter
});
var DemoGeoTerrain = function() {
	this.previousMouse = new com_gdx_math_Vector2(0,0);
	this.MouseSpeed = new com_gdx_math_Vector2(0,0);
	this.mouseDow = false;
	this.mousey = 0;
	this.mousex = 0;
	com_gdx_Screen.call(this);
};
$hxClasses["DemoGeoTerrain"] = DemoGeoTerrain;
DemoGeoTerrain.__name__ = true;
DemoGeoTerrain.__super__ = com_gdx_Screen;
DemoGeoTerrain.prototype = $extend(com_gdx_Screen.prototype,{
	show: function() {
		this.scene = new com_gdx_scene3d_SceneManager(50000);
		this.camera = this.scene.addTargetCamera(865,1000,1800,1000,1000,-1000);
		this.camera.setFarValue(42000.0);
		this.font = this.scene.addImageFont("data/arial.png",com_gdx_Gdx.Instance().status,50,com_gdx_Gdx.Instance().height - 100);
		this.terrain = new com_gdx_scene3d_GeoTerrain(6,17,new com_gdx_math_Vector3(40,8.0,40),new com_gdx_math_Vector3(0,0,0));
		this.terrain.loadTerrain("data/terrain-heightmap.jpg",100);
		this.terrain.setTexture(this.getTexture("data/terrain-texture.jpg",true,false,true),0);
		this.terrain.setTexture(this.getTexture("data/detailmap3.jpg",true,true,true),1);
		this.terrain.getMeshBuffer().scaleTexCoords(20.0,20,1);
		this.scene.addNode(this.terrain);
	}
	,resize: function(width,height) {
		com_gdx_Gdx.Instance().setViewPort(0,0,width,height);
	}
	,update: function(delta) {
		this.scene.update();
	}
	,render: function() {
		var dt = com_gdx_Gdx.Instance().deltaTime * 3;
		var speed = 120;
		if(this.keyPress(68)) {
			this.camera.Strafe(-speed * dt);
		} else if(this.keyPress(65)) {
			this.camera.Strafe(speed * dt);
		}
		if(this.keyPress(87)) {
			this.camera.Advance(speed * dt);
		} else if(this.keyPress(83)) {
			this.camera.Advance(-speed * dt);
		}
		this.scene.render();
		this.scene.renderUI();
		this.font.set_caption(com_gdx_Gdx.Instance().status);
	}
	,TouchMove: function(mx,my,num) {
		this.mousex = mx;
		this.mousey = my;
		if(this.mouseDow) {
			this.MouseSpeed.x = mx - this.previousMouse.x;
			this.MouseSpeed.y = my - this.previousMouse.y;
			this.MouseSpeed.normalize();
			this.camera.MouseLook(this.MouseSpeed.x,this.MouseSpeed.y,8,10,8.0 * com_gdx_Gdx.Instance().deltaTime);
			var _this = this.previousMouse;
			_this.x = mx;
			_this.y = my;
		}
	}
	,TouchUp: function(x,y,num) {
		this.mouseDow = false;
	}
	,TouchDown: function(mx,my,num) {
		this.mouseDow = true;
	}
	,__class__: DemoGeoTerrain
});
var DemoGrass = function() {
	this.previousMouse = new com_gdx_math_Vector2(0,0);
	this.MouseSpeed = new com_gdx_math_Vector2(0,0);
	this.mouseDow = false;
	this.mousey = 0;
	this.mousex = 0;
	com_gdx_Screen.call(this);
};
$hxClasses["DemoGrass"] = DemoGrass;
DemoGrass.__name__ = true;
DemoGrass.__super__ = com_gdx_Screen;
DemoGrass.prototype = $extend(com_gdx_Screen.prototype,{
	show: function() {
		this.scene = new com_gdx_scene3d_SceneManager(90000);
		this.camera = this.scene.addTargetCamera(0,200,-200,0,0,1000);
		this.font = this.scene.addImageFont("data/arial.png",com_gdx_Gdx.Instance().status,50,com_gdx_Gdx.Instance().height - 100);
		var m = com_gdx_scene3d_MeshCreator.createPlane(0,1000,1000);
		var n = this.scene.addSceneNode(m);
		n.setTexture(this.getTexture("data/Sand.jpg"));
		var grass = new com_gdx_scene3d_particles_GrassNode();
		grass.setTexture(this.getTexture("data/grass1.png"));
		this.scene.addNode(grass);
		var _g = 0;
		while(_g < 32) {
			var x = _g++;
			var _g1 = 0;
			while(_g1 < 30) {
				var y = _g1++;
				var variant = Math.random() * -12 + 30;
				var px = -480 + x * variant;
				var pz = -480 + y * variant;
				var size = Math.random() * -11 + 17;
				var hl = size - 1;
				grass.addGrass(new com_gdx_math_Vector3(px,hl,pz),size,0);
			}
		}
	}
	,resize: function(width,height) {
		com_gdx_Gdx.Instance().setViewPort(0,0,width,height);
	}
	,update: function(delta) {
		this.scene.update();
	}
	,render: function() {
		var dt = com_gdx_Gdx.Instance().deltaTime * 3;
		var speed = 80;
		if(this.keyPress(68)) {
			this.camera.Strafe(-speed * dt);
		} else if(this.keyPress(65)) {
			this.camera.Strafe(speed * dt);
		}
		if(this.keyPress(87)) {
			this.camera.Advance(speed * dt);
		} else if(this.keyPress(83)) {
			this.camera.Advance(-speed * dt);
		}
		this.font.set_caption(com_gdx_Gdx.Instance().status + "Cam:" + Std.string(this.camera.local_pos));
		this.scene.render();
		this.scene.renderUI();
	}
	,TouchMove: function(mx,my,num) {
		this.mousex = mx;
		this.mousey = my;
		if(this.mouseDow) {
			this.MouseSpeed.x = mx - this.previousMouse.x;
			this.MouseSpeed.y = my - this.previousMouse.y;
			this.MouseSpeed.normalize();
			this.camera.MouseLook(this.MouseSpeed.x,this.MouseSpeed.y,8,10,8.0 * com_gdx_Gdx.Instance().deltaTime);
			var _this = this.previousMouse;
			_this.x = mx;
			_this.y = my;
		}
	}
	,TouchUp: function(x,y,num) {
		this.mouseDow = false;
	}
	,TouchDown: function(mx,my,num) {
		this.mouseDow = true;
	}
	,__class__: DemoGrass
});
var DemoParticles = function() {
	this.previousMouse = new com_gdx_math_Vector2(0,0);
	this.MouseSpeed = new com_gdx_math_Vector2(0,0);
	this.mouseDow = false;
	this.mousey = 0;
	this.mousex = 0;
	com_gdx_Screen.call(this);
};
$hxClasses["DemoParticles"] = DemoParticles;
DemoParticles.__name__ = true;
DemoParticles.__super__ = com_gdx_Screen;
DemoParticles.prototype = $extend(com_gdx_Screen.prototype,{
	show: function() {
		this.scene = new com_gdx_scene3d_SceneManager(50000);
		this.camera = this.scene.addTargetCamera(0,2,-10,0,0,1000);
		this.font = this.scene.addImageFont("data/arial.png",com_gdx_Gdx.Instance().status,50,com_gdx_Gdx.Instance().height - 100);
		var m = com_gdx_scene3d_MeshCreator.createPlane(0,100,100);
		var n = this.scene.addSceneNode(m);
		n.setTexture(this.getTexture("data/Sand.jpg"));
		this.particles = new com_gdx_scene3d_particles_ParticleSystem(20);
		this.particles.setTexture(this.getTexture("data/Fire.png"));
		this.particles.createWaterFall();
		this.particles.addGravityAffector(new com_gdx_math_Vector3(0,-0.40,0),1800);
		this.particles.addBounceAffector(0.5,1000);
		this.particles.addRotateAffector(new com_gdx_math_Vector3(0,-100,0),new com_gdx_math_Vector3(0,0,0));
		this.particles.addColorMorphAffector([new com_gdx_color_Color3(0.2,0,0),new com_gdx_color_Color3(0.5,1,0),new com_gdx_color_Color3(0,.5,1),new com_gdx_color_Color3(0.5,0.2,0),new com_gdx_color_Color3(1,0.9,1)],[500,800,1250,1500,2000],true);
		this.scene.addNode(this.particles);
		var p = new com_gdx_scene3d_particles_BoxEmitter(80,new com_gdx_math_Vector3(-2,0,-2),new com_gdx_math_Vector3(2,2,2));
		p.setTexture(this.getTexture("data/Fire.png"));
		p.createFire();
		var _this = p.local_pos;
		_this.x = 3;
		_this.y = 0;
		_this.z = 0;
		p.posChanged = true;
		this.scene.addNode(p);
		var p1 = new com_gdx_scene3d_particles_SphereEmitter(60,new com_gdx_math_Vector3(0,0,0),1);
		p1.setTexture(this.getTexture("data/Fire.png"));
		p1.createFire();
		var _this1 = p1.local_pos;
		_this1.x = -4;
		_this1.y = 0;
		_this1.z = 0;
		p1.posChanged = true;
		this.scene.addNode(p1);
		var p2 = new com_gdx_scene3d_particles_CylinderEmitter(70,new com_gdx_math_Vector3(0,1,0),1,new com_gdx_math_Vector3(0,0,0),0.5,false);
		p2.setTexture(this.getTexture("data/Fire.png"));
		p2.createFire();
		var _this2 = p2.local_pos;
		_this2.x = 8;
		_this2.y = 0;
		_this2.z = 0;
		p2.posChanged = true;
		this.scene.addNode(p2);
		var p3 = new com_gdx_scene3d_particles_RingEmitter(80,new com_gdx_math_Vector3(0,0,0),2,0,0);
		p3.setTexture(this.getTexture("data/Fire.png"));
		p3.createFire();
		var _this3 = p3.local_pos;
		_this3.x = -8;
		_this3.y = 0;
		_this3.z = 0;
		p3.posChanged = true;
		this.scene.addNode(p3);
	}
	,resize: function(width,height) {
		com_gdx_Gdx.Instance().setViewPort(0,0,width,height);
	}
	,update: function(delta) {
		this.scene.update();
	}
	,render: function() {
		var dt = com_gdx_Gdx.Instance().deltaTime * 3;
		var speed = 80;
		if(this.keyPress(68)) {
			this.camera.Strafe(-speed * dt);
		} else if(this.keyPress(65)) {
			this.camera.Strafe(speed * dt);
		}
		if(this.keyPress(87)) {
			this.camera.Advance(speed * dt);
		} else if(this.keyPress(83)) {
			this.camera.Advance(-speed * dt);
		}
		this.font.set_caption(com_gdx_Gdx.Instance().status + "Cam:" + Std.string(this.camera.local_pos));
		this.scene.renderUI();
	}
	,TouchMove: function(mx,my,num) {
		this.mousex = mx;
		this.mousey = my;
		if(this.mouseDow) {
			this.MouseSpeed.x = mx - this.previousMouse.x;
			this.MouseSpeed.y = my - this.previousMouse.y;
			this.MouseSpeed.normalize();
			this.camera.MouseLook(this.MouseSpeed.x,this.MouseSpeed.y,8,10,8.0 * com_gdx_Gdx.Instance().deltaTime);
			var _this = this.previousMouse;
			_this.x = mx;
			_this.y = my;
		}
	}
	,TouchUp: function(x,y,num) {
		this.mouseDow = false;
	}
	,TouchDown: function(mx,my,num) {
		this.mouseDow = true;
		this.particles.restart();
	}
	,__class__: DemoParticles
});
var DemoScreen_$Decals = function() {
	this.previousMouse = new com_gdx_math_Vector2(0,0);
	this.MouseSpeed = new com_gdx_math_Vector2(0,0);
	this.mouseDow = false;
	this.mousey = 0;
	this.mousex = 0;
	com_gdx_Screen.call(this);
};
$hxClasses["DemoScreen_Decals"] = DemoScreen_$Decals;
DemoScreen_$Decals.__name__ = true;
DemoScreen_$Decals.__super__ = com_gdx_Screen;
DemoScreen_$Decals.prototype = $extend(com_gdx_Screen.prototype,{
	show: function() {
		this.scene = new com_gdx_scene3d_SceneManager(90000);
		this.camera = this.scene.addTargetCamera(8,140,-550,0,0,1000);
		this.font = this.scene.addImageFont("data/arial.png",com_gdx_Gdx.Instance().status,50,com_gdx_Gdx.Instance().height - 100);
		this.mesh = com_gdx_scene3d_MeshCreator.loadStaticB3DMesh("data/castel.b3d","data/textures/");
		this.mesh.Scale(0.2,0.2,0.2);
		this.scene.addSceneNode(this.mesh);
		this.point = this.scene.addSceneNode(com_gdx_scene3d_MeshCreator.createCube());
		this.point.setTexture(com_gdx_Gdx.Instance().getTexture("data/noise.jpg",true,true,false));
		this.decals = new com_gdx_scene3d_bolt_DecaleNode(500);
		this.decals.setTexture(this.getTexture("data/grass1.png"));
		this.scene.addNode(this.decals);
	}
	,resize: function(width,height) {
		com_gdx_Gdx.Instance().setViewPort(0,0,width,height);
	}
	,update: function(delta) {
		this.scene.update();
	}
	,render: function() {
		var dt = com_gdx_Gdx.Instance().deltaTime * 3;
		var speed = 80;
		if(this.keyPress(68)) {
			this.camera.Strafe(-speed * dt);
		} else if(this.keyPress(65)) {
			this.camera.Strafe(speed * dt);
		}
		if(this.keyPress(87)) {
			this.camera.Advance(speed * dt);
		} else if(this.keyPress(83)) {
			this.camera.Advance(-speed * dt);
		}
		var inpact = new com_gdx_math_Vector3(0,0,0);
		var ray = this.camera.getPointRay(this.mousex,this.mousey);
		if(this.mesh.rayTrace(ray)) {
			this.point.setLocalPosition(this.mesh.getContactPoint());
		}
		this.font.set_caption(com_gdx_Gdx.Instance().status + "Cam:" + Std.string(this.camera.local_pos));
		this.scene.render();
		this.scene.renderUI();
	}
	,TouchMove: function(mx,my,num) {
		this.mousex = mx;
		this.mousey = my;
		if(this.mouseDow) {
			this.MouseSpeed.x = mx - this.previousMouse.x;
			this.MouseSpeed.y = my - this.previousMouse.y;
			this.MouseSpeed.normalize();
			this.camera.MouseLook(this.MouseSpeed.x,this.MouseSpeed.y,8,10,8.0 * com_gdx_Gdx.Instance().deltaTime);
			var _this = this.previousMouse;
			_this.x = mx;
			_this.y = my;
		}
	}
	,TouchUp: function(x,y,num) {
		if(num == 2) {
			var inpact = new com_gdx_math_Vector3(0,0,0);
			var ray = this.camera.getPointRay(x,y);
			if(this.mesh.rayTrace(ray)) {
				this.point.setLocalPosition(this.mesh.getContactPoint());
				this.decals.addDecal(this.mesh.getContactPoint(),this.mesh.getContactNormal(),5,20);
			}
		}
		this.mouseDow = false;
	}
	,TouchDown: function(mx,my,num) {
		this.mouseDow = true;
	}
	,__class__: DemoScreen_$Decals
});
var DemoScreen_$Terrain = function() {
	this.previousMouse = new com_gdx_math_Vector2(0,0);
	this.MouseSpeed = new com_gdx_math_Vector2(0,0);
	this.mouseDow = false;
	this.mousey = 0;
	this.mousex = 0;
	com_gdx_Screen.call(this);
};
$hxClasses["DemoScreen_Terrain"] = DemoScreen_$Terrain;
DemoScreen_$Terrain.__name__ = true;
DemoScreen_$Terrain.__super__ = com_gdx_Screen;
DemoScreen_$Terrain.prototype = $extend(com_gdx_Screen.prototype,{
	show: function() {
		this.scene = new com_gdx_scene3d_SceneManager(50000);
		this.camera = this.scene.addTargetCamera(0,200,-200,0,0,1000);
		this.font = this.scene.addImageFont("data/arial.png",com_gdx_Gdx.Instance().status,50,com_gdx_Gdx.Instance().height - 100);
		this.scene.addSkyBox(500,"data/skybox01");
		this.landmesh = com_gdx_scene3d_MeshCreator.createMeshGroundHeighMap("data/island-height.jpg",5000,5000,50,0,240);
		var land = this.scene.addSceneNode(this.landmesh);
		land.setTexture(com_gdx_Gdx.Instance().getTexture("data/island.png",true,true,false));
		this.landmesh.getMeshBuffer(0).scaleTexCoords(5,5,1);
		var grass = new com_gdx_scene3d_particles_GrassNode();
		grass.setTexture(this.getTexture("data/grass1.png"));
		this.scene.addNode(grass);
		var _g = 0;
		while(_g < 42) {
			var x = _g++;
			var _g1 = 0;
			while(_g1 < 40) {
				var y = _g1++;
				var variant = Math.random() * -32 + 50;
				var px = -580 + x * variant;
				var pz = -580 + y * variant;
				var size = Math.random() * -2 + 4;
				var hl = this.landmesh.getMeshBuffer(0).getHeight(px,pz) + size;
				grass.addGrass(new com_gdx_math_Vector3(px,hl,pz),size,0);
			}
		}
	}
	,resize: function(width,height) {
		com_gdx_Gdx.Instance().setViewPort(0,0,width,height);
	}
	,update: function(delta) {
		this.scene.update();
	}
	,render: function() {
		var dt = com_gdx_Gdx.Instance().deltaTime * 3;
		var speed = 80;
		if(this.keyPress(68)) {
			this.camera.Strafe(-speed * dt);
		} else if(this.keyPress(65)) {
			this.camera.Strafe(speed * dt);
		}
		if(this.keyPress(87)) {
			this.camera.Advance(speed * dt);
		} else if(this.keyPress(83)) {
			this.camera.Advance(-speed * dt);
		}
		this.font.set_caption(com_gdx_Gdx.Instance().status + "Cam:" + Std.string(this.camera.local_pos));
		this.scene.render();
		this.scene.renderUI();
	}
	,TouchMove: function(mx,my,num) {
		this.mousex = mx;
		this.mousey = my;
		if(this.mouseDow) {
			this.MouseSpeed.x = mx - this.previousMouse.x;
			this.MouseSpeed.y = my - this.previousMouse.y;
			this.MouseSpeed.normalize();
			this.camera.MouseLook(this.MouseSpeed.x,this.MouseSpeed.y,8,10,8.0 * com_gdx_Gdx.Instance().deltaTime);
			var _this = this.previousMouse;
			_this.x = mx;
			_this.y = my;
		}
	}
	,TouchUp: function(x,y,num) {
		this.mouseDow = false;
	}
	,TouchDown: function(mx,my,num) {
		this.mouseDow = true;
	}
	,__class__: DemoScreen_$Terrain
});
var DemoScreen_$TerrainGrass = function() {
	this.previousMouse = new com_gdx_math_Vector2(0,0);
	this.MouseSpeed = new com_gdx_math_Vector2(0,0);
	this.mouseDow = false;
	this.mousey = 0;
	this.mousex = 0;
	com_gdx_Screen.call(this);
};
$hxClasses["DemoScreen_TerrainGrass"] = DemoScreen_$TerrainGrass;
DemoScreen_$TerrainGrass.__name__ = true;
DemoScreen_$TerrainGrass.__super__ = com_gdx_Screen;
DemoScreen_$TerrainGrass.prototype = $extend(com_gdx_Screen.prototype,{
	show: function() {
		this.scene = new com_gdx_scene3d_SceneManager(50000);
		this.camera = this.scene.addTargetCamera(0,200,-200,0,0,1000);
		this.font = this.scene.addImageFont("data/arial.png",com_gdx_Gdx.Instance().status,50,com_gdx_Gdx.Instance().height - 100);
		this.scene.addSkyBox(500,"data/skybox01");
		this.landmesh = com_gdx_scene3d_MeshCreator.createMeshGroundHeighMap("data/island-height.jpg",5000,5000,50,0,240);
		var land = this.scene.addSceneNode(this.landmesh);
		land.setTexture(com_gdx_Gdx.Instance().getTexture("data/island.jpg",true,true,false));
		land.setTexture(com_gdx_Gdx.Instance().getTexture("data/Sand.jpg",true,true,false),1);
		this.landmesh.getMeshBuffer(0).scaleTexCoords(5,5,1);
		this.point = this.scene.addSceneNode(com_gdx_scene3d_MeshCreator.createCube());
		this.point.setTexture(com_gdx_Gdx.Instance().getTexture("data/noise.jpg",true,true,false));
		this.grass = new com_gdx_scene3d_particles_GrassNode();
		this.grass.setTexture(this.getTexture("data/grass1.png"));
		this.scene.addNode(this.grass);
		this.grass.loadFromFile("data/grass.dat");
	}
	,resize: function(width,height) {
		com_gdx_Gdx.Instance().setViewPort(0,0,width,height);
	}
	,update: function(delta) {
		var dt = com_gdx_Gdx.Instance().deltaTime * 3;
		var speed = 80;
		if(this.keyPress(68)) {
			this.camera.Strafe(-speed * dt);
		} else if(this.keyPress(65)) {
			this.camera.Strafe(speed * dt);
		}
		if(this.keyPress(87)) {
			this.camera.Advance(speed * dt);
		} else if(this.keyPress(83)) {
			this.camera.Advance(-speed * dt);
		}
		if(this.keyPress(32)) {
			var inpact = new com_gdx_math_Vector3(0,0,0);
			var ray = this.camera.getPointRay(this.mousex,this.mousey);
			this.landmesh.getMeshBuffer(0).intersectsEx(ray,inpact,true);
			this.point.setLocalPosition(inpact);
			var _g = 0;
			while(_g < 8) {
				var x = _g++;
				var _g1 = 0;
				while(_g1 < 8) {
					var y = _g1++;
					var variant = Math.random() * -5 + 10;
					var px = inpact.x + x * variant;
					var pz = inpact.z + y * variant;
					var size = Math.random() * -2 + 4;
					var hl = this.landmesh.getMeshBuffer(0).getHeight(px,pz) + size;
					this.grass.addGrass(new com_gdx_math_Vector3(px,hl,pz),size,0);
				}
			}
		}
		this.font.set_caption(com_gdx_Gdx.Instance().status + "Cam:" + Std.string(this.camera.local_pos));
		this.scene.update();
	}
	,render: function() {
		this.scene.render();
		this.scene.renderUI();
	}
	,TouchMove: function(mx,my,num) {
		this.mousex = mx;
		this.mousey = my;
		if(this.mouseDow) {
			this.MouseSpeed.x = mx - this.previousMouse.x;
			this.MouseSpeed.y = my - this.previousMouse.y;
			this.MouseSpeed.normalize();
			this.camera.MouseLook(this.MouseSpeed.x,this.MouseSpeed.y,8,10,8.0 * com_gdx_Gdx.Instance().deltaTime);
			var _this = this.previousMouse;
			_this.x = mx;
			_this.y = my;
		}
	}
	,TouchUp: function(x,y,num) {
		if(num == 2) {
			var inpact = new com_gdx_math_Vector3(0,0,0);
			var ray = this.camera.getPointRay(x,y);
			this.landmesh.getMeshBuffer(0).intersectsEx(ray,inpact,true);
			this.point.setLocalPosition(inpact);
			var size = Math.random() * -2 + 4;
			inpact.y += size;
			this.grass.addGrass(inpact,size,0);
		}
		this.mouseDow = false;
	}
	,TouchDown: function(mx,my,num) {
		this.mouseDow = true;
	}
	,__class__: DemoScreen_$TerrainGrass
});
var DemoWaterFall = function() {
	this.previousMouse = new com_gdx_math_Vector2(0,0);
	this.MouseSpeed = new com_gdx_math_Vector2(0,0);
	this.mouseDow = false;
	this.mousey = 0;
	this.mousex = 0;
	com_gdx_Screen.call(this);
};
$hxClasses["DemoWaterFall"] = DemoWaterFall;
DemoWaterFall.__name__ = true;
DemoWaterFall.__super__ = com_gdx_Screen;
DemoWaterFall.prototype = $extend(com_gdx_Screen.prototype,{
	show: function() {
		this.scene = new com_gdx_scene3d_SceneManager(50000);
		this.camera = this.scene.addTargetCamera(0,2,-10,0,0,1000);
		this.font = this.scene.addImageFont("data/arial.png",com_gdx_Gdx.Instance().status,50,com_gdx_Gdx.Instance().height - 100);
		var m = com_gdx_scene3d_MeshCreator.createPlane(0,100,100);
		var n = this.scene.addSceneNode(m);
		n.setTexture(this.getTexture("data/Sand.jpg"));
		this.particles = new com_gdx_scene3d_particles_ParticleSystem(100);
		this.particles.setTexture(this.getTexture("data/Fire.png"));
		this.particles.createWaterFall();
		this.particles.addGravityAffector(new com_gdx_math_Vector3(0,-0.40,0),1800);
		this.particles.addBounceAffector(0.5,1000);
		this.particles.addColorMorphAffector([new com_gdx_color_Color3(0.2,0,0),new com_gdx_color_Color3(0.5,1,0),new com_gdx_color_Color3(0,.5,1),new com_gdx_color_Color3(0.5,0.2,0),new com_gdx_color_Color3(1,0.9,1)],[500,800,1250,1500,2000],true);
		this.scene.addNode(this.particles);
	}
	,resize: function(width,height) {
		com_gdx_Gdx.Instance().setViewPort(0,0,width,height);
	}
	,update: function(delta) {
		this.scene.update();
	}
	,render: function() {
		var dt = com_gdx_Gdx.Instance().deltaTime * 3;
		var speed = 80;
		if(this.keyPress(68)) {
			this.camera.Strafe(-speed * dt);
		} else if(this.keyPress(65)) {
			this.camera.Strafe(speed * dt);
		}
		if(this.keyPress(87)) {
			this.camera.Advance(speed * dt);
		} else if(this.keyPress(83)) {
			this.camera.Advance(-speed * dt);
		}
		this.font.set_caption(com_gdx_Gdx.Instance().status + "Cam:" + Std.string(this.camera.local_pos));
		this.scene.render();
		this.scene.renderUI();
	}
	,TouchMove: function(mx,my,num) {
		this.mousex = mx;
		this.mousey = my;
		if(this.mouseDow) {
			this.MouseSpeed.x = mx - this.previousMouse.x;
			this.MouseSpeed.y = my - this.previousMouse.y;
			this.MouseSpeed.normalize();
			this.camera.MouseLook(this.MouseSpeed.x,this.MouseSpeed.y,8,10,8.0 * com_gdx_Gdx.Instance().deltaTime);
			var _this = this.previousMouse;
			_this.x = mx;
			_this.y = my;
		}
	}
	,TouchUp: function(x,y,num) {
		this.mouseDow = false;
	}
	,TouchDown: function(mx,my,num) {
		this.mouseDow = true;
		this.particles.restart();
	}
	,__class__: DemoWaterFall
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = true;
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = true;
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
var com_gdx_App = function() {
	lime_app_Application.call(this);
	this.start = false;
};
$hxClasses["com.gdx.App"] = com_gdx_App;
com_gdx_App.__name__ = true;
com_gdx_App.__super__ = lime_app_Application;
com_gdx_App.prototype = $extend(lime_app_Application.prototype,{
	onPreloadComplete: function() {
		var _g = this.__window.context.type;
		switch(_g) {
		case "opengl":case "opengles":case "webgl":
			this.start = true;
			com_gdx_Gdx.gl = this.__window.context.webgl;
			this.gdx = com_gdx_Gdx.Instance();
			this.gdx.init(this.__window,this.__window.__width,this.__window.__height);
			this.OnStart();
			break;
		default:
			lime_utils_Log.warn("Current render context not supported by this sample",{ fileName : "App.hx", lineNumber : 58, className : "com.gdx.App", methodName : "onPreloadComplete"});
		}
	}
	,OnStart: function() {
	}
	,OnEnd: function() {
	}
	,onWindowCreate: function() {
		lime_app_Application.prototype.onWindowCreate.call(this);
	}
	,onKeyDown: function(keyCode,modifier) {
		lime_app_Application.prototype.onKeyDown.call(this,keyCode,modifier);
		if(!this.start) {
			return;
		}
		var keyCode1 = this.convertKeyCode(keyCode);
		this.gdx.onKeyDown(keyCode1);
	}
	,onKeyUp: function(keyCode,modifier) {
		lime_app_Application.prototype.onKeyUp.call(this,keyCode,modifier);
		if(!this.start) {
			return;
		}
		var keyCode1 = this.convertKeyCode(keyCode);
		this.gdx.onKeyUp(keyCode1);
	}
	,onMouseDown: function(x,y,button) {
		lime_app_Application.prototype.onMouseDown.call(this,x,y,button);
		if(!this.start) {
			return;
		}
		this.gdx.mouseDown(x,y,button);
	}
	,onMouseUp: function(x,y,button) {
		lime_app_Application.prototype.onMouseUp.call(this,x,y,button);
		if(!this.start) {
			return;
		}
		this.gdx.mouseUp(x,y,button);
	}
	,onMouseMove: function(x,y) {
		lime_app_Application.prototype.onMouseMove.call(this,x,y);
		if(!this.start) {
			return;
		}
		this.gdx.mouseMove(x,y,0);
	}
	,onTouchEnd: function(touch) {
		lime_app_Application.prototype.onTouchEnd.call(this,touch);
		if(!this.start) {
			return;
		}
		this.gdx.onTouchEnd(touch.x,touch.y,touch.id);
	}
	,onTouchMove: function(touch) {
		lime_app_Application.prototype.onTouchMove.call(this,touch);
		if(!this.start) {
			return;
		}
		this.gdx.onTouchMove(touch.x,touch.y,touch.id);
	}
	,onTouchStart: function(touch) {
		lime_app_Application.prototype.onTouchStart.call(this,touch);
		if(!this.start) {
			return;
		}
		this.gdx.onTouchBegin(touch.x,touch.y,touch.id);
	}
	,onWindowResize: function(width,height) {
		lime_app_Application.prototype.onWindowResize.call(this,width,height);
		if(!this.start) {
			return;
		}
		this.gdx.onresize(width,height);
	}
	,onWindowFocusIn: function() {
		lime_app_Application.prototype.onWindowFocusIn.call(this);
		if(!this.start) {
			return;
		}
		this.gdx.onShow();
	}
	,onWindowFocusOut: function() {
		lime_app_Application.prototype.onWindowFocusOut.call(this);
		if(!this.start) {
			return;
		}
		this.gdx.onHide();
	}
	,onWindowClose: function() {
		lime_app_Application.prototype.onWindowClose.call(this);
		if(!this.start) {
			return;
		}
		this.gdx.onClose();
		this.OnEnd();
	}
	,render: function(context) {
		if(!this.start) {
			return;
		}
		var _g = this.__window.context.type;
		switch(_g) {
		case "opengl":case "opengles":case "webgl":
			com_gdx_Gdx.gl = context.webgl;
			this.gdx.render();
			break;
		default:
			lime_utils_Log.warn("Current render context not supported by this sample",{ fileName : "App.hx", lineNumber : 165, className : "com.gdx.App", methodName : "render"});
		}
	}
	,update: function(deltaTime) {
		lime_app_Application.prototype.update.call(this,deltaTime);
		if(!this.start) {
			return;
		}
		this.gdx.Update(deltaTime / 1000);
	}
	,convertKeyCode: function(keyCode) {
		switch(keyCode) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 39:
			return 222;
		case 44:
			return 188;
		case 45:
			return 189;
		case 46:
			return 190;
		case 47:
			return 191;
		case 48:
			return 48;
		case 49:
			return 49;
		case 50:
			return 50;
		case 51:
			return 51;
		case 52:
			return 52;
		case 53:
			return 53;
		case 54:
			return 54;
		case 55:
			return 55;
		case 56:
			return 56;
		case 57:
			return 57;
		case 59:
			return 186;
		case 61:
			return 187;
		case 91:
			return 219;
		case 92:
			return 220;
		case 93:
			return 221;
		case 96:
			return 192;
		case 97:
			return 65;
		case 98:
			return 66;
		case 99:
			return 67;
		case 100:
			return 68;
		case 101:
			return 69;
		case 102:
			return 70;
		case 103:
			return 71;
		case 104:
			return 72;
		case 105:
			return 73;
		case 106:
			return 74;
		case 107:
			return 75;
		case 108:
			return 76;
		case 109:
			return 77;
		case 110:
			return 78;
		case 111:
			return 79;
		case 112:
			return 80;
		case 113:
			return 81;
		case 114:
			return 82;
		case 115:
			return 83;
		case 116:
			return 84;
		case 117:
			return 85;
		case 118:
			return 86;
		case 119:
			return 87;
		case 120:
			return 88;
		case 121:
			return 89;
		case 122:
			return 90;
		case 127:
			return 46;
		case 1073741881:
			return 20;
		case 1073741882:
			return 112;
		case 1073741883:
			return 113;
		case 1073741884:
			return 114;
		case 1073741885:
			return 115;
		case 1073741886:
			return 116;
		case 1073741887:
			return 117;
		case 1073741888:
			return 118;
		case 1073741889:
			return 119;
		case 1073741890:
			return 120;
		case 1073741891:
			return 121;
		case 1073741892:
			return 122;
		case 1073741893:
			return 123;
		case 1073741897:
			return 45;
		case 1073741898:
			return 36;
		case 1073741899:
			return 33;
		case 1073741901:
			return 35;
		case 1073741902:
			return 34;
		case 1073741903:
			return 39;
		case 1073741904:
			return 37;
		case 1073741905:
			return 40;
		case 1073741906:
			return 38;
		case 1073741908:
			return 111;
		case 1073741909:
			return 106;
		case 1073741910:
			return 109;
		case 1073741911:
			return 107;
		case 1073741912:
			return 108;
		case 1073741913:
			return 97;
		case 1073741914:
			return 98;
		case 1073741915:
			return 99;
		case 1073741916:
			return 100;
		case 1073741917:
			return 101;
		case 1073741918:
			return 102;
		case 1073741919:
			return 103;
		case 1073741920:
			return 104;
		case 1073741921:
			return 105;
		case 1073741922:
			return 96;
		case 1073741923:
			return 110;
		case 1073741928:
			return 124;
		case 1073741929:
			return 125;
		case 1073741930:
			return 126;
		case 1073742048:
			return 17;
		case 1073742049:
			return 16;
		case 1073742050:
			return 18;
		case 1073742052:
			return 17;
		case 1073742053:
			return 16;
		case 1073742054:
			return 18;
		default:
			return keyCode;
		}
	}
	,__class__: com_gdx_App
});
var Main = function() {
	com_gdx_App.call(this);
};
$hxClasses["Main"] = Main;
Main.__name__ = true;
Main.__super__ = com_gdx_App;
Main.prototype = $extend(com_gdx_App.prototype,{
	OnStart: function() {
		this.demos = [];
		this.demos.push(new Demo1());
		this.demos.push(new Demo2());
		this.demos.push(new Demo3());
		this.demos.push(new DemoBoxEmmiter());
		this.demos.push(new DemoGeoTerrain());
		this.demos.push(new DemoGrass());
		this.demos.push(new DemoParticles());
		this.demos.push(new DemoScreen_$Decals());
		this.demos.push(new DemoScreen_$Terrain());
		this.demos.push(new DemoScreen_$TerrainGrass());
		this.demos.push(new DemoWaterFall());
		this.demos.push(new DemoBS3DMeshStatic2());
		this.demoIndex = this.demos.length - 1;
		this.gdx.setScreen(this.demos[this.demoIndex]);
	}
	,onKeyUp: function(keyCode,modifier) {
		if(keyCode == 110) {
			this.demoIndex -= 1;
			if(this.demoIndex <= 0) {
				this.demoIndex = 0;
			}
			this.gdx.setScreen(this.demos[this.demoIndex]);
		} else if(keyCode == 109) {
			this.demoIndex += 1;
			if(this.demoIndex >= this.demos.length - 1) {
				this.demoIndex = this.demos.length - 1;
			}
			this.gdx.setScreen(this.demos[this.demoIndex]);
		}
		com_gdx_App.prototype.onKeyUp.call(this,keyCode,modifier);
	}
	,__class__: Main
});
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = true;
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	var rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) {
		rootPath = Reflect.field(config,"rootPath");
	}
	if(rootPath == null) {
		rootPath = "";
	}
	lime_utils_Assets.defaultRootPath = rootPath;
	var data;
	var manifest;
	var library;
	data = "{\"name\":null,\"assets\":\"aoy4:pathy21:data%2Fairport129.PNGy4:sizei9374y4:typey5:IMAGEy2:idR1y7:preloadtgoR0y21:data%2Fairport512.jpgR2i83057R3R4R5R7R6tgoR0y20:data%2Fairport_d.PNGR2i220386R3R4R5R8R6tgoR0y16:data%2Falign.jpgR2i8803R3R4R5R9R6tgoR0y16:data%2Farial.pngR2i10466R3R4R5R10R6tgoR0y24:data%2Fbrick-diffuse.jpgR2i119217R3R4R5R11R6tgoR0y23:data%2Fbrick-normal.jpgR2i124043R3R4R5R12R6tgoR0y25:data%2Fbrick-specular.jpgR2i238469R3R4R5R13R6tgoR0y28:data%2Fcastel%2F20kdm2.arenaR2i105R3y4:TEXTR5R14R6tgoR0y29:data%2Fcastel%2Fcommon.shaderR2i246R3R15R5R16R6tgoR0y25:data%2Fcastel%2Fe7.shaderR2i4974R3R15R5R17R6tgoR0y28:data%2Fcastel%2Fe7beam01.jpgR2i17922R3R4R5R18R6tgoR0y32:data%2Fcastel%2Fe7beam02_red.jpgR2i6459R3R4R5R19R6tgoR0y29:data%2Fcastel%2Fe7bigwall.jpgR2i221875R3R4R5R20R6tgoR0y28:data%2Fcastel%2Fe7bmtrim.jpgR2i21573R3R4R5R21R6tgoR0y29:data%2Fcastel%2Fe7bmtrim2.jpgR2i15736R3R4R5R22R6tgoR0y34:data%2Fcastel%2Fe7brickfloor01.jpgR2i97728R3R4R5R23R6tgoR0y30:data%2Fcastel%2Fe7brnmetal.jpgR2i57159R3R4R5R24R6tgoR0y30:data%2Fcastel%2Fe7dimfloor.jpgR2i12356R3R4R5R25R6tgoR0y31:data%2Fcastel%2Fe7panelwood.jpgR2i74404R3R4R5R26R6tgoR0y33:data%2Fcastel%2Fe7sbrickfloor.jpgR2i49298R3R4R5R27R6tgoR0y29:data%2Fcastel%2Fe7steptop.jpgR2i9798R3R4R5R28R6tgoR0y30:data%2Fcastel%2Fe7steptop2.jpgR2i11407R3R4R5R29R6tgoR0y29:data%2Fcastel%2Fe7swindow.jpgR2i84497R3R4R5R30R6tgoR0y35:data%2Fcastel%2Fe7walldesign01b.jpgR2i127282R3R4R5R31R6tgoR0y26:data%2Fcastel%2Fflame1.jpgR2i5653R3R4R5R32R6tgoR0y26:data%2Fcastel%2Fflame2.jpgR2i5688R3R4R5R33R6tgoR0y26:data%2Fcastel%2Fflame3.jpgR2i5427R3R4R5R34R6tgoR0y26:data%2Fcastel%2Fflame4.jpgR2i5130R3R4R5R35R6tgoR0y26:data%2Fcastel%2Fflame5.jpgR2i5185R3R4R5R36R6tgoR0y26:data%2Fcastel%2Fflame6.jpgR2i5161R3R4R5R37R6tgoR0y26:data%2Fcastel%2Fflame7.jpgR2i5432R3R4R5R38R6tgoR0y26:data%2Fcastel%2Fflame8.jpgR2i5768R3R4R5R39R6tgoR0y29:data%2Fcastel%2Fflameball.jpgR2i3430R3R4R5R40R6tgoR0y29:data%2Fcastel%2Fkillsky_1.jpgR2i9734R3R4R5R41R6tgoR0y29:data%2Fcastel%2Fkillsky_2.jpgR2i9321R3R4R5R42R6tgoR0y28:data%2Fcastel%2Flavahell.jpgR2i13900R3R4R5R43R6tgoR0y29:data%2Fcastel%2Fliquid.shaderR2i421R3R15R5R44R6tgoR0y36:data%2Fcastel%2Fmetalblackwave01.jpgR2i36481R3R4R5R45R6tgoR0y29:data%2Fcastel%2Fmodels.shaderR2i753R3R15R5R46R6tgoR0y27:data%2Fcastel%2Fpjrock1.jpgR2i37103R3R4R5R47R6tgoR0y26:data%2Fcastel%2Fsfx.shaderR2i2085R3R15R5R48R6tgoR0y26:data%2Fcastel%2Fsky.shaderR2i573R3R15R5R49R6tgoR0y32:data%2Fcastel%2Fxstepborder5.jpgR2i4763R3R4R5R50R6tgoR0y17:data%2Fcastel.b3dR2i36815R3y6:BINARYR5R51R6tgoR0y17:data%2Fcastel.bspR2i2163812R3R52R5R53R6tgoR0y20:data%2Fcolor_map.jpgR2i168032R3R4R5R54R6tgoR0y17:data%2Fdetail.jpgR2i2021R3R4R5R55R6tgoR0y18:data%2Fdetail2.jpgR2i144059R3R4R5R56R6tgoR0y21:data%2Fdetailmap3.jpgR2i92466R3R4R5R57R6tgoR0y25:data%2FDetail_Texture.jpgR2i82717R3R4R5R58R6tgoR0y15:data%2Fdirt.pngR2i519227R3R4R5R59R6tgoR0y35:data%2Fegyptians%2Fankhlite_wht.jpgR2i4079R3R4R5R60R6tgoR0y41:data%2Fegyptians%2Fankhlite_ylw.blend.jpgR2i2737R3R4R5R61R6tgoR0y35:data%2Fegyptians%2Fankhlite_ylw.jpgR2i4449R3R4R5R62R6tgoR0y37:data%2Fegyptians%2Fbounce_effects.jpgR2i7846R3R4R5R63R6tgoR0y34:data%2Fegyptians%2Fgold_groove.jpgR2i30228R3R4R5R64R6tgoR0y34:data%2Fegyptians%2Fgold_trim01.jpgR2i3941R3R4R5R65R6tgoR0y34:data%2Fegyptians%2Fgold_trim02.jpgR2i4507R3R4R5R66R6tgoR0y34:data%2Fegyptians%2Fgold_trim03.jpgR2i994R3R4R5R67R6tgoR0y31:data%2Fegyptians%2Fheiro_01.jpgR2i21435R3R4R5R68R6tgoR0y37:data%2Fegyptians%2Fhellsky2bright.pngR2i59351R3R4R5R69R6tgoR0y27:data%2Fegyptians%2Fleaf.pngR2i24715R3R4R5R70R6tgoR0y32:data%2Fegyptians%2Foldbrk_01.jpgR2i19461R3R4R5R71R6tgoR0y40:data%2Fegyptians%2Foldbrk_01broken13.jpgR2i29616R3R4R5R72R6tgoR0y32:data%2Fegyptians%2Foldbrk_03.jpgR2i19540R3R4R5R73R6tgoR0y39:data%2Fegyptians%2Foldbrk_03_bloody.jpgR2i20027R3R4R5R74R6tgoR0y32:data%2Fegyptians%2Foldstone2.jpgR2i17820R3R4R5R75R6tgoR0y39:data%2Fegyptians%2Foldstone2grooved.jpgR2i18452R3R4R5R76R6tgoR0y38:data%2Fegyptians%2Foldstone2_bas01.jpgR2i24547R3R4R5R77R6tgoR0y38:data%2Fegyptians%2Foldstone2_bas03.jpgR2i19580R3R4R5R78R6tgoR0y38:data%2Fegyptians%2Foldstone2_bas04.jpgR2i20596R3R4R5R79R6tgoR0y38:data%2Fegyptians%2Foldstone2_bas05.jpgR2i22178R3R4R5R80R6tgoR0y38:data%2Fegyptians%2Foldstone2_bas06.jpgR2i21398R3R4R5R81R6tgoR0y38:data%2Fegyptians%2Foldstone2_bas07.jpgR2i18950R3R4R5R82R6tgoR0y37:data%2Fegyptians%2Foldstone2_step.jpgR2i3668R3R4R5R83R6tgoR0y39:data%2Fegyptians%2Foldstone2_trim01.jpgR2i5028R3R4R5R84R6tgoR0y39:data%2Fegyptians%2Foldstone2_trim02.jpgR2i11132R3R4R5R85R6tgoR0y38:data%2Fegyptians%2Foldstone_ramses.jpgR2i19866R3R4R5R86R6tgoR0y32:data%2Fegyptians%2Fplant_egy.pngR2i26902R3R4R5R87R6tgoR0y31:data%2Fegyptians%2Fsand_egy.jpgR2i16680R3R4R5R88R6tgoR0y33:data%2Fegyptians%2Fstei_tele2.jpgR2i5511R3R4R5R89R6tgoR0y20:data%2Fegyptians.bspR2i2707720R3R52R5R90R6tgoR0y12:data%2Ff.jpgR2i172119R3R4R5R91R6tgoR0y15:data%2FFire.pngR2i9594R3R4R5R92R6tgoR0y17:data%2Fflares.pngR2i49935R3R4R5R93R6tgoR0y17:data%2Fflares.xmlR2i1121R3R15R5R94R6tgoR0y12:data%2Fg.jpgR2i181883R3R4R5R95R6tgoR0y15:data%2Fgad1.bspR2i509284R3R52R5R96R6tgoR0y30:data%2Fgothic%2Fstucco7top.jpgR2i5614R3R4R5R97R6tgoR0y33:data%2Fgothic%2Fwoodceiling1a.jpgR2i15375R3R4R5R98R6tgoR0y17:data%2Fgothic.bspR2i62076R3R52R5R99R6tgoR0y16:data%2Fgrass.datR2i116365R3R52R5R100R6tgoR0y17:data%2Fgrass1.pngR2i90052R3R4R5R101R6tgoR0y17:data%2Fgrass1.tgaR2i1048620R3R52R5R102R6tgoR0y17:data%2Fgrass2.pngR2i73825R3R4R5R103R6tgoR0y17:data%2Fgrass2.tgaR2i368739R3R52R5R104R6tgoR0y17:data%2Fheight.jpgR2i12378R3R4R5R105R6tgoR0y21:data%2Fheight_map.jpgR2i42718R3R4R5R106R6tgoR0y15:data%2Fhire.pngR2i10225R3R4R5R107R6tgoR0y30:data%2Fisland-height-small.jpgR2i8797R3R4R5R108R6tgoR0y24:data%2Fisland-height.jpgR2i35580R3R4R5R109R6tgoR0y17:data%2Fisland.jpgR2i126146R3R4R5R110R6tgoR0y17:data%2Fisland.pngR2i6370701R3R4R5R111R6tgoR0y17:data%2Fisland.psdR2i50602078R3R52R5R112R6tgoR0y31:data%2Flevel%2Fafrik_wall1a.jpgR2i46058R3R4R5R113R6tgoR0y31:data%2Flevel%2Fafrik_wall1b.jpgR2i47139R3R4R5R114R6tgoR0y31:data%2Flevel%2Fbattery_side.jpgR2i15102R3R4R5R115R6tgoR0y30:data%2Flevel%2Fblackboard2.jpgR2i48606R3R4R5R116R6tgoR0y22:data%2Flevel%2Fbox.jpgR2i22313R3R4R5R117R6tgoR0y40:data%2Flevel%2Fcrate_reinforced1_top.jpgR2i24633R3R4R5R118R6tgoR0y27:data%2Flevel%2Fdefenses.jpgR2i54063R3R4R5R119R6tgoR0y30:data%2Flevel%2Firon_floor3.jpgR2i22792R3R4R5R120R6tgoR0y25:data%2Flevel%2Fkibako.jpgR2i3561R3R4R5R121R6tgoR0y26:data%2Flevel%2Fkontena.jpgR2i3059R3R4R5R122R6tgoR0y27:data%2Flevel%2Fkontena2.jpgR2i3152R3R4R5R123R6tgoR0y23:data%2Flevel%2FLamp.jpgR2i983R3R4R5R124R6tgoR0y24:data%2Flevel%2Flamp2.jpgR2i1660R3R4R5R125R6tgoR0y29:data%2Flevel%2Fminen_post.jpgR2i11067R3R4R5R126R6tgoR0y31:data%2Flevel%2Fmisc_crate1e.jpgR2i16117R3R4R5R127R6tgoR0y32:data%2Flevel%2Fnor_panel2_v2.jpgR2i57350R3R4R5R128R6tgoR0y36:data%2Flevel%2Fpersnl_lockerfrnt.jpgR2i13500R3R4R5R129R6tgoR0y36:data%2Flevel%2Fpersnl_lockerside.jpgR2i9141R3R4R5R130R6tgoR0y38:data%2Flevel%2Fpersonel_lockertall.jpgR2i11039R3R4R5R131R6tgoR0y27:data%2Flevel%2Fraildoor.jpgR2i16982R3R4R5R132R6tgoR0y29:data%2Flevel%2Frivetplate.jpgR2i18884R3R4R5R133R6tgoR0y39:data%2Flevel%2Ftiledfloor_manordark.jpgR2i8483R3R4R5R134R6tgoR0y23:data%2Flevel%2Fyuka.jpgR2i1738R3R4R5R135R6tgoR0y16:data%2Flevel.bspR2i509284R3R52R5R136R6tgoR0y16:data%2Flight.jpgR2i14569R3R4R5R137R6tgoR0y15:data%2Flime.svgR2i2841R3R15R5R138R6tgoR0y17:data%2Fmarble.jpgR2i11852R3R4R5R139R6tgoR0y30:data%2Fmaxpayne%2FBrick48a.jpgR2i12104R3R4R5R140R6tgoR0y30:data%2Fmaxpayne%2FBrick52a.jpgR2i11942R3R4R5R141R6tgoR0y30:data%2Fmaxpayne%2FBrick61a.jpgR2i19357R3R4R5R142R6tgoR0y30:data%2Fmaxpayne%2FBrick65a.jpgR2i17680R3R4R5R143R6tgoR0y27:data%2Fmaxpayne%2Fcity0.tgaR2i49170R3R52R5R144R6tgoR0y27:data%2Fmaxpayne%2Fcity1.tgaR2i49170R3R52R5R145R6tgoR0y27:data%2Fmaxpayne%2Fcity2.tgaR2i49170R3R52R5R146R6tgoR0y27:data%2Fmaxpayne%2Fcity3.tgaR2i49170R3R52R5R147R6tgoR0y27:data%2Fmaxpayne%2Fcity4.tgaR2i49170R3R52R5R148R6tgoR0y27:data%2Fmaxpayne%2Fcity5.tgaR2i49170R3R52R5R149R6tgoR0y27:data%2Fmaxpayne%2Fcity6.tgaR2i49170R3R52R5R150R6tgoR0y27:data%2Fmaxpayne%2Fcity7.tgaR2i49170R3R52R5R151R6tgoR0y36:data%2Fmaxpayne%2FSnowyAsphalt03.jpgR2i46757R3R4R5R152R6tgoR0y29:data%2Fmaxpayne%2FWall56a.jpgR2i15214R3R4R5R153R6tgoR0y29:data%2Fmaxpayne%2FWall59a.jpgR2i19746R3R4R5R154R6tgoR0y28:data%2Fmaxpayne%2FWall69.jpgR2i14817R3R4R5R155R6tgoR0y28:data%2Fmaxpayne%2FWall70.jpgR2i15189R3R4R5R156R6tgoR0y28:data%2Fmaxpayne%2FWall80.jpgR2i36297R3R4R5R157R6tgoR0y29:data%2Fmaxpayne%2FWood17a.jpgR2i9952R3R4R5R158R6tgoR0y29:data%2Fmaxpayne%2FWood26a.jpgR2i11440R3R4R5R159R6tgoR0y23:data%2Fmodel%2FBird.md2R2i25464R3R52R5R160R6tgoR0y28:data%2Fmodel%2FBird_Skin.pngR2i144795R3R4R5R161R6tgoR0y23:data%2Fmodel%2Fbody.jpgR2i16891R3R4R5R162R6tgoR0y25:data%2Fmodel%2FCanyon.h3dR2i159369R3R52R5R163R6tgoR0y23:data%2Fmodel%2Fgad1.bspR2i509284R3R52R5R164R6tgoR0y22:data%2Fmodel%2Fgun.jpgR2i9891R3R4R5R165R6tgoR0y22:data%2Fmodel%2Fgun.md3R2i12004R3R52R5R166R6tgoR0y23:data%2Fmodel%2Fhead.jpgR2i1927R3R4R5R167R6tgoR0y23:data%2Fmodel%2Fhead.md3R2i3324R3R52R5R168R6tgoR0y23:data%2Fmodel%2Flegs.xmlR2i1039R3R15R5R169R6tgoR0y24:data%2Fmodel%2FLevel.bspR2i62076R3R52R5R170R6tgoR0y24:data%2Fmodel%2Flower.md3R2i352852R3R52R5R171R6tgoR0y23:data%2Fmodel%2FMoss.jpgR2i25234R3R4R5R172R6tgoR0y23:data%2Fmodel%2FRock.jpgR2i19583R3R4R5R173R6tgoR0y42:data%2Fmodel%2Ftextures%2Fafrik_wall1a.jpgR2i46058R3R4R5R174R6tgoR0y42:data%2Fmodel%2Ftextures%2Fafrik_wall1b.jpgR2i47139R3R4R5R175R6tgoR0y42:data%2Fmodel%2Ftextures%2Fbattery_side.jpgR2i15102R3R4R5R176R6tgoR0y41:data%2Fmodel%2Ftextures%2Fblackboard2.jpgR2i48606R3R4R5R177R6tgoR0y33:data%2Fmodel%2Ftextures%2Fbox.jpgR2i22313R3R4R5R178R6tgoR0y51:data%2Fmodel%2Ftextures%2Fcrate_reinforced1_top.jpgR2i24633R3R4R5R179R6tgoR0y38:data%2Fmodel%2Ftextures%2Fdefenses.jpgR2i54063R3R4R5R180R6tgoR0y57:data%2Fmodel%2Ftextures%2Fgothic_ceiling%2Fstucco7top.jpgR2i5614R3R4R5R181R6tgoR0y60:data%2Fmodel%2Ftextures%2Fgothic_ceiling%2Fwoodceiling1a.jpgR2i15375R3R4R5R182R6tgoR0y41:data%2Fmodel%2Ftextures%2Firon_floor3.jpgR2i22792R3R4R5R183R6tgoR0y36:data%2Fmodel%2Ftextures%2Fkibako.jpgR2i3561R3R4R5R184R6tgoR0y37:data%2Fmodel%2Ftextures%2Fkontena.jpgR2i3059R3R4R5R185R6tgoR0y38:data%2Fmodel%2Ftextures%2Fkontena2.jpgR2i3152R3R4R5R186R6tgoR0y34:data%2Fmodel%2Ftextures%2FLamp.jpgR2i983R3R4R5R187R6tgoR0y35:data%2Fmodel%2Ftextures%2Flamp2.jpgR2i1660R3R4R5R188R6tgoR0y40:data%2Fmodel%2Ftextures%2Fminen_post.jpgR2i11067R3R4R5R189R6tgoR0y42:data%2Fmodel%2Ftextures%2Fmisc_crate1e.jpgR2i16117R3R4R5R190R6tgoR0y43:data%2Fmodel%2Ftextures%2Fnor_panel2_v2.jpgR2i57350R3R4R5R191R6tgoR0y47:data%2Fmodel%2Ftextures%2Fpersnl_lockerfrnt.jpgR2i13500R3R4R5R192R6tgoR0y47:data%2Fmodel%2Ftextures%2Fpersnl_lockerside.jpgR2i9141R3R4R5R193R6tgoR0y49:data%2Fmodel%2Ftextures%2Fpersonel_lockertall.jpgR2i11039R3R4R5R194R6tgoR0y38:data%2Fmodel%2Ftextures%2Fraildoor.jpgR2i16982R3R4R5R195R6tgoR0y40:data%2Fmodel%2Ftextures%2Frivetplate.jpgR2i18884R3R4R5R196R6tgoR0y50:data%2Fmodel%2Ftextures%2Ftiledfloor_manordark.jpgR2i8483R3R4R5R197R6tgoR0y34:data%2Fmodel%2Ftextures%2Fyuka.jpgR2i1738R3R4R5R198R6tgoR0y24:data%2Fmodel%2Ftorso.xmlR2i835R3R15R5R199R6tgoR0y24:data%2Fmodel%2Fupper.md3R2i517172R3R52R5R200R6tgoR0y24:data%2Fmodels%2Fbird.h3dR2i12590R3R52R5R201R6tgoR0y25:data%2Fmodels%2FBird.ms3dR2i24615R3R52R5R202R6tgoR0y25:data%2Fmodels%2FBlade.jpgR2i11921R3R4R5R203R6tgoR0y25:data%2Fmodels%2FBlade.md2R2i324520R3R52R5R204R6tgoR0y23:data%2Fmodels%2Fbob.h3dR2i196085R3R52R5R205R6tgoR0y25:data%2Fmodels%2Fbones.h3dR2i7029R3R52R5R206R6tgoR0y26:data%2Fmodels%2Fbones2.h3dR2i7574R3R52R5R207R6tgoR0y26:data%2Fmodels%2FCanyon.h3dR2i159369R3R52R5R208R6tgoR0y27:data%2Fmodels%2FCanyon.ms3dR2i377634R3R52R5R209R6tgoR0y27:data%2Fmodels%2Fcarbody.B3DR2i201401R3R52R5R210R6tgoR0y26:data%2Fmodels%2Fcastel.b3dR2i36815R3R52R5R211R6tgoR0y26:data%2Fmodels%2Fcastel.h3dR2i50665R3R52R5R212R6tgoR0y24:data%2Fmodels%2Fcube.h3dR2i6481R3R52R5R213R6tgoR0y25:data%2Fmodels%2Fcube.ms3dR2i4536R3R52R5R214R6tgoR0y25:data%2Fmodels%2Fdance.b3dR2i1187406R3R52R5R215R6tgoR0y25:data%2Fmodels%2Fdoska.b3dR2i98842R3R52R5R216R6tgoR0y25:data%2Fmodels%2Fdwarf.h3dR2i268949R3R52R5R217R6tgoR0y26:data%2Fmodels%2Ffaerie.md2R2i320996R3R52R5R218R6tgoR0y27:data%2Fmodels%2Ffaerie2.jpgR2i25833R3R4R5R219R6tgoR0y31:data%2Fmodels%2Fguard1_body.pngR2i356079R3R4R5R220R6tgoR0y31:data%2Fmodels%2Fguard1_face.pngR2i204913R3R4R5R221R6tgoR0y31:data%2Fmodels%2Fguard1_face.psdR2i1532195R3R52R5R222R6tgoR0y33:data%2Fmodels%2Fguard1_helmet.pngR2i49741R3R4R5R223R6tgoR0y22:data%2Fmodels%2FH1.b3dR2i169079R3R52R5R224R6tgoR0y22:data%2Fmodels%2FH2.b3dR2i42579R3R52R5R225R6tgoR0y30:data%2Fmodels%2FHellKnight.b3dR2i64822R3R52R5R226R6tgoR0y30:data%2Fmodels%2Fhellknight.h3dR2i522332R3R52R5R227R6tgoR0y30:data%2Fmodels%2Fhellknight.pngR2i515561R3R4R5R228R6tgoR0y31:data%2Fmodels%2Fhellknightn.pngR2i547503R3R4R5R229R6tgoR0y23:data%2Fmodels%2Fhog.h3dR2i13095R3R52R5R230R6tgoR0y25:data%2Fmodels%2Fhuman.h3dR2i27505R3R52R5R231R6tgoR0y30:data%2Fmodels%2Firon_grill.pngR2i65717R3R4R5R232R6tgoR0y34:data%2Fmodels%2Flara%2Fdefault.bmpR2i196664R3R4R5R233R6tgoR0y34:data%2Fmodels%2Flara%2Fdefault.pngR2i117313R3R4R5R234R6tgoR0y36:data%2Fmodels%2Flara%2Fdefault_h.bmpR2i196664R3R4R5R235R6tgoR0y49:data%2Fmodels%2Flara%2FLaraCroft%20-%20ReadMe.txtR2i3710R3R15R5R236R6tgoR0y41:data%2Fmodels%2Flara%2Flara_animation.cfgR2i842R3R15R5R237R6tgoR0y36:data%2Fmodels%2Flara%2Flara_head.MD3R2i5208R3R52R5R238R6tgoR0y37:data%2Fmodels%2Flara%2Flara_head.skinR2i56R3R15R5R239R6tgoR0y37:data%2Fmodels%2Flara%2Flara_lower.md3R2i713716R3R52R5R240R6tgoR0y38:data%2Fmodels%2Flara%2Flara_lower.skinR2i100R3R15R5R241R6tgoR0y37:data%2Fmodels%2Flara%2Flara_upper.md3R2i1110756R3R52R5R242R6tgoR0y38:data%2Fmodels%2Flara%2Flara_upper.skinR2i129R3R15R5R243R6tgoR0y34:data%2Fmodels%2Flara%2Frailgun.bmpR2i196664R3R4R5R244R6tgoR0y34:data%2Fmodels%2Flara%2Frailgun.jpgR2i22307R3R4R5R245R6tgoR0y34:data%2Fmodels%2Flara%2Frailgun.md3R2i11908R3R52R5R246R6tgoR0y34:data%2Fmodels%2Flara%2Frailgun.pngR2i117530R3R4R5R247R6tgoR0y37:data%2Fmodels%2Flara%2Frailgun.shaderR2i55R3R15R5R248R6tgoR0y35:data%2Fmodels%2Flara%2Frailgun2.bmpR2i196664R3R4R5R249R6tgoR0y35:data%2Fmodels%2Flara%2Frailgun2.md3R2i14464R3R52R5R250R6tgoR0y35:data%2Fmodels%2Flara%2Frailgun3.bmpR2i98360R3R4R5R251R6tgoR0y35:data%2Fmodels%2Flara%2Frailgun4.bmpR2i49206R3R4R5R252R6tgoR0y23:data%2Fmodels%2FLL3.b3dR2i12339R3R52R5R253R6tgoR0y25:data%2Fmodels%2Fninja.b3dR2i106407R3R52R5R254R6tgoR0y25:data%2Fmodels%2Fninja.h3dR2i95146R3R52R5R255R6tgoR0y26:data%2Fmodels%2Fninja.ms3dR2i149766R3R52R5R256R6tgoR0y26:data%2Fmodels%2Fninjas.h3dR2i107975R3R52R5R257R6tgoR0y28:data%2Fmodels%2Fnormals.ms3dR2i106008R3R52R5R258R6tgoR0y27:data%2Fmodels%2Fnskinbl.jpgR2i39906R3R4R5R259R6tgoR0y27:data%2Fmodels%2Fnskingr.jpgR2i46424R3R4R5R260R6tgoR0y26:data%2Fmodels%2Fnskinn.pngR2i612665R3R4R5R261R6tgoR0y27:data%2Fmodels%2Fnskinrd.jpgR2i52173R3R4R5R262R6tgoR0y27:data%2Fmodels%2Fnskinwh.jpgR2i52576R3R4R5R263R6tgoR0y24:data%2Fmodels%2Fogre.b3dR2i1143086R3R52R5R264R6tgoR0y24:data%2Fmodels%2Fogre.h3dR2i1505216R3R52R5R265R6tgoR0y25:data%2Fmodels%2Fporco.h3dR2i15559R3R52R5R266R6tgoR0y31:data%2Fmodels%2Fround_grill.pngR2i72097R3R4R5R267R6tgoR0y37:data%2Fmodels%2Fsarge%2Fanimation.cfgR2i1029R3R15R5R268R6tgoR0y32:data%2Fmodels%2Fsarge%2Fband.jpgR2i24570R3R4R5R269R6tgoR0y32:data%2Fmodels%2Fsarge%2Fband.tgaR2i196652R3R52R5R270R6tgoR0y33:data%2Fmodels%2Fsarge%2Fcigar.jpgR2i11243R3R4R5R271R6tgoR0y33:data%2Fmodels%2Fsarge%2Fcigar.tgaR2i428R3R52R5R272R6tgoR0y32:data%2Fmodels%2Fsarge%2Fhead.md3R2i3760R3R52R5R273R6tgoR0y41:data%2Fmodels%2Fsarge%2Fhead_default.skinR2i89R3R15R5R274R6tgoR0y38:data%2Fmodels%2Fsarge%2Flegs.animationR2i1039R3R15R5R275R6tgoR0y32:data%2Fmodels%2Fsarge%2Flegs.rarR2i714R3R52R5R276R6tgoR0y32:data%2Fmodels%2Fsarge%2Flegs.xmlR2i1039R3R15R5R277R6tgoR0y33:data%2Fmodels%2Fsarge%2Flower.md3R2i593972R3R52R5R278R6tgoR0y42:data%2Fmodels%2Fsarge%2Flower_default.skinR2i50R3R15R5R279R6tgoR0y39:data%2Fmodels%2Fsarge%2Ftorso.animationR2i835R3R15R5R280R6tgoR0y33:data%2Fmodels%2Fsarge%2Ftorso.xmlR2i835R3R15R5R281R6tgoR0y33:data%2Fmodels%2Fsarge%2Fupper.md3R2i468636R3R52R5R282R6tgoR0y42:data%2Fmodels%2Fsarge%2Fupper_default.skinR2i118R3R15R5R283R6tgoR0y26:data%2Fmodels%2Fsinbad.b3dR2i1114792R3R52R5R284R6tgoR0y26:data%2Fmodels%2Fsinbad.h3dR2i1011857R3R52R5R285R6tgoR0y30:data%2Fmodels%2FSinbad_big.h3dR2i2025061R3R52R5R286R6tgoR0y26:data%2Fmodels%2Fsniper.b3dR2i536490R3R52R5R287R6tgoR0y27:data%2Fmodels%2Fsoldier.b3dR2i185367R3R52R5R288R6tgoR0y27:data%2Fmodels%2Fsowtex3.jpgR2i28793R3R4R5R289R6tgoR0y27:data%2Fmodels%2Ft351sml.jpgR2i8515R3R4R5R290R6tgoR0y34:data%2Fmodels%2Ftextures%2Faxe.jpgR2i14353R3R4R5R291R6tgoR0y34:data%2Fmodels%2Ftextures%2Fb3d.jpgR2i162130R3R4R5R292R6tgoR0y36:data%2Fmodels%2Ftextures%2FBlade.jpgR2i11921R3R4R5R293R6tgoR0y36:data%2Fmodels%2Ftextures%2Fdwarf.jpgR2i84160R3R4R5R294R6tgoR0y37:data%2Fmodels%2Ftextures%2Fdwarf2.jpgR2i34289R3R4R5R295R6tgoR0y38:data%2Fmodels%2Ftextures%2Ffaerie2.jpgR2i25833R3R4R5R296R6tgoR0y38:data%2Fmodels%2Ftextures%2FFaerie5.jpgR2i26591R3R4R5R297R6tgoR0y38:data%2Fmodels%2Ftextures%2FFloor02.jpgR2i70204R3R4R5R298R6tgoR0y38:data%2Fmodels%2Ftextures%2FFloor04.jpgR2i104967R3R4R5R299R6tgoR0y38:data%2Fmodels%2Ftextures%2FFloor10.jpgR2i64529R3R4R5R300R6tgoR0y36:data%2Fmodels%2Ftextures%2Fglass.jpgR2i11260R3R4R5R301R6tgoR0y42:data%2Fmodels%2Ftextures%2Fguard1_body.pngR2i356079R3R4R5R302R6tgoR0y42:data%2Fmodels%2Ftextures%2Fguard1_face.pngR2i204913R3R4R5R303R6tgoR0y42:data%2Fmodels%2Ftextures%2Fguard1_face.psdR2i1532195R3R52R5R304R6tgoR0y44:data%2Fmodels%2Ftextures%2Fguard1_helmet.pngR2i49741R3R4R5R305R6tgoR0y49:data%2Fmodels%2Ftextures%2FHellKnight_Diffuse.jpgR2i45518R3R4R5R306R6tgoR0y48:data%2Fmodels%2Ftextures%2FHellKnight_Normal.jpgR2i356082R3R4R5R307R6tgoR0y41:data%2Fmodels%2Ftextures%2Firon_grill.pngR2i65717R3R4R5R308R6tgoR0y35:data%2Fmodels%2Ftextures%2Fjosh.jpgR2i128910R3R4R5R309R6tgoR0y38:data%2Fmodels%2Ftextures%2FLM_0014.jpgR2i10535R3R4R5R310R6tgoR0y35:data%2Fmodels%2Ftextures%2FMoss.jpgR2i25234R3R4R5R311R6tgoR0y38:data%2Fmodels%2Ftextures%2Fnskinbl.jpgR2i39906R3R4R5R312R6tgoR0y38:data%2Fmodels%2Ftextures%2Fnskingr.jpgR2i46424R3R4R5R313R6tgoR0y38:data%2Fmodels%2Ftextures%2Fnskinrd.jpgR2i52173R3R4R5R314R6tgoR0y38:data%2Fmodels%2Ftextures%2Fnskinwh.jpgR2i52576R3R4R5R315R6tgoR0y35:data%2Fmodels%2Ftextures%2FRock.jpgR2i19583R3R4R5R316R6tgoR0y37:data%2Fmodels%2Ftextures%2FRoof03.jpgR2i37338R3R4R5R317R6tgoR0y42:data%2Fmodels%2Ftextures%2Fround_grill.pngR2i72097R3R4R5R318R6tgoR0y42:data%2Fmodels%2Ftextures%2Fsinbad_body.pngR2i205264R3R4R5R319R6tgoR0y45:data%2Fmodels%2Ftextures%2Fsinbad_clothes.pngR2i284625R3R4R5R320R6tgoR0y43:data%2Fmodels%2Ftextures%2Fsinbad_sword.pngR2i70325R3R4R5R321R6tgoR0y38:data%2Fmodels%2Ftextures%2Fsowtex3.jpgR2i28793R3R4R5R322R6tgoR0y35:data%2Fmodels%2Ftextures%2Ft001.jpgR2i68173R3R4R5R323R6tgoR0y35:data%2Fmodels%2Ftextures%2Ft003.jpgR2i74790R3R4R5R324R6tgoR0y35:data%2Fmodels%2Ftextures%2Ft004.jpgR2i71118R3R4R5R325R6tgoR0y35:data%2Fmodels%2Ftextures%2Ft008.jpgR2i50942R3R4R5R326R6tgoR0y37:data%2Fmodels%2Ftextures%2FWall01.jpgR2i76766R3R4R5R327R6tgoR0y37:data%2Fmodels%2Ftextures%2FWall02.jpgR2i64299R3R4R5R328R6tgoR0y36:data%2Fmodels%2Ftextures%2Fwall3.jpgR2i10240R3R4R5R329R6tgoR0y37:data%2Fmodels%2Ftextures%2FWood01.jpgR2i97451R3R4R5R330R6tgoR0y37:data%2Fmodels%2Ftextures%2FWood02.jpgR2i75327R3R4R5R331R6tgoR0y37:data%2Fmodels%2Ftextures%2FZombie.jpgR2i47029R3R4R5R332R6tgoR0y26:data%2Fmodels%2FTurrel.b3dR2i30189R3R52R5R333R6tgoR0y26:data%2Fmodels%2Fvegeta.b3dR2i311723R3R52R5R334R6tgoR0y26:data%2Fmodels%2Fzombie.b3dR2i59846R3R52R5R335R6tgoR0y26:data%2Fmodels%2Fzombie.h3dR2i58656R3R52R5R336R6tgoR0y26:data%2Fmodels%2FZombie.jpgR2i47029R3R4R5R337R6tgoR0y15:data%2FMoss.jpgR2i25234R3R4R5R338R6tgoR0y16:data%2Fnoise.jpgR2i45998R3R4R5R339R6tgoR0y21:data%2Fnormal_map.jpgR2i33683R3R4R5R340R6tgoR0y16:data%2Fpoint.jpgR2i8881R3R4R5R341R6tgoR0y15:data%2FRaid.pngR2i185038R3R4R5R342R6tgoR0y22:data%2FRaidTexture.jpgR2i1347232R3R4R5R343R6tgoR0y27:data%2FRarotonga_Island.jpgR2i962002R3R4R5R344R6tgoR0y15:data%2FRock.jpgR2i19583R3R4R5R345R6tgoR0y19:data%2Frockwall.jpgR2i89121R3R4R5R346R6tgoR0y25:data%2FrockwallNormal.pngR2i170348R3R4R5R347R6tgoR0y15:data%2FSand.jpgR2i382247R3R4R5R348R6tgoR0y28:data%2Fsfi%2Falien_metal.jpgR2i46031R3R4R5R349R6tgoR0y29:data%2Fsfi%2Falien_metal2.jpgR2i29791R3R4R5R350R6tgoR0y41:data%2Fsfi%2Fbase_floor%2Fproto_grate.tgaR2i65580R3R52R5R351R6tgoR0y42:data%2Fsfi%2Fbase_floor%2Fproto_grate4.tgaR2i65580R3R52R5R352R6tgoR0y25:data%2Fsfi%2Fbio00009.jpgR2i47403R3R4R5R353R6tgoR0y36:data%2Fsfi%2Fbouncepad01b_layer1.jpgR2i10933R3R4R5R354R6tgoR0y29:data%2Fsfi%2Fbright_light.pngR2i34059R3R4R5R355R6tgoR0y24:data%2Fsfi%2Fbubbles.jpgR2i6815R3R4R5R356R6tgoR0y31:data%2Fsfi%2Fceil1_38.blend.jpgR2i1311R3R4R5R357R6tgoR0y25:data%2Fsfi%2Fceil1_38.jpgR2i1262R3R4R5R358R6tgoR0y33:data%2Fsfi%2Fconcrete_dark_f6.jpgR2i15627R3R4R5R359R6tgoR0y30:data%2Fsfi%2Fconcrete_wall.jpgR2i7296R3R4R5R360R6tgoR0y26:data%2Fsfi%2Fdarkglass.pngR2i17429R3R4R5R361R6tgoR0y24:data%2Fsfi%2Fflat1_1.jpgR2i2020R3R4R5R362R6tgoR0y36:data%2Fsfi%2Fgothic_light2_blend.jpgR2i2272R3R4R5R363R6tgoR0y34:data%2Fsfi%2Fgothic_light2_lrg.jpgR2i8919R3R4R5R364R6tgoR0y31:data%2Fsfi%2Fgrate1_4_small.jpgR2i3080R3R4R5R365R6tgoR0y32:data%2Fsfi%2Fgrate1_4_small2.jpgR2i7279R3R4R5R366R6tgoR0y35:data%2Fsfi%2Fgrate_panel_front4.jpgR2i10000R3R4R5R367R6tgoR0y29:data%2Fsfi%2Fgrate_stairs.jpgR2i7305R3R4R5R368R6tgoR0y32:data%2Fsfi%2Fgray_metal_senn.jpgR2i12086R3R4R5R369R6tgoR0y27:data%2Fsfi%2Fgreen_glow.jpgR2i13687R3R4R5R370R6tgoR0y30:data%2Fsfi%2Fgreen_port001.jpgR2i226140R3R4R5R371R6tgoR0y30:data%2Fsfi%2Fgreen_port002.jpgR2i246743R3R4R5R372R6tgoR0y28:data%2Fsfi%2Fhexfloor2b2.jpgR2i14136R3R4R5R373R6tgoR0y29:data%2Fsfi%2Fjumppadsmall.jpgR2i5709R3R4R5R374R6tgoR0y29:data%2Fsfi%2Fmetal_beams1.jpgR2i12979R3R4R5R375R6tgoR0y31:data%2Fsfi%2Fmetal_collumn1.jpgR2i16034R3R4R5R376R6tgoR0y31:data%2Fsfi%2Fmetal_collumn2.JPGR2i34000R3R4R5R377R6tgoR0y34:data%2Fsfi%2Fmetal_grate_senn2.jpgR2i13975R3R4R5R378R6tgoR0y29:data%2Fsfi%2Fmt_pv_m10ama.pngR2i13265R3R4R5R379R6tgoR0y26:data%2Fsfi%2Fmt_sr_v21.JPGR2i10510R3R4R5R380R6tgoR0y25:data%2Fsfi%2Fmt_sr_v7.pngR2i26339R3R4R5R381R6tgoR0y28:data%2Fsfi%2Fproto_grate.pngR2i32989R3R4R5R382R6tgoR0y29:data%2Fsfi%2Fproto_grate4.pngR2i16169R3R4R5R383R6tgoR0y26:data%2Fsfi%2Frock_wall.JPGR2i49087R3R4R5R384R6tgoR0y28:data%2Fsfi%2Fsenn_bounce.jpgR2i46504R3R4R5R385R6tgoR0y29:data%2Fsfi%2Fsenn_bounce2.jpgR2i50123R3R4R5R386R6tgoR0y32:data%2Fsfi%2Fsenn_logofloor2.jpgR2i217690R3R4R5R387R6tgoR0y25:data%2Fsfi%2Fsenn_sky.pngR2i42676R3R4R5R388R6tgoR0y30:data%2Fsfi%2Fsky_no_clouds.pngR2i164R3R4R5R389R6tgoR0y23:data%2Fsfi%2Fslime7.jpgR2i6160R3R4R5R390R6tgoR0y24:data%2Fsfi%2Fslime7c.jpgR2i5142R3R4R5R391R6tgoR0y26:data%2Fsfi%2Fs_sr_m12b.JPGR2i1133R3R4R5R392R6tgoR0y24:data%2Fsfi%2Ftech01a.jpgR2i18230R3R4R5R393R6tgoR0y24:data%2Fsfi%2Ftech02a.jpgR2i26999R3R4R5R394R6tgoR0y32:data%2Fsfi%2Ftech_arch_senn2.jpgR2i51639R3R4R5R395R6tgoR0y26:data%2Fsfi%2Ftech_tile.jpgR2i9996R3R4R5R396R6tgoR0y22:data%2Fsfi%2Ftinfx.jpgR2i7767R3R4R5R397R6tgoR0y29:data%2Fsfi%2Fvents_system.jpgR2i13574R3R4R5R398R6tgoR0y24:data%2Fsfi%2Fwires01.pngR2i16069R3R4R5R399R6tgoR0y24:data%2Fsfi%2Fwires02.pngR2i23484R3R4R5R400R6tgoR0y30:data%2Fsfi%2Fw_rust_metal3.jpgR2i79136R3R4R5R401R6tgoR0y14:data%2Fsfi.bspR2i3085316R3R52R5R402R6tgoR0y26:data%2Fshaders%2Fblur.fragR2i1714R3R15R5R403R6tgoR0y42:data%2Fshaders%2Fcolor%2Fdeuteranopia.fragR2i475R3R15R5R404R6tgoR0y39:data%2Fshaders%2Fcolor%2Fgrayscale.fragR2i278R3R15R5R405R6tgoR0y36:data%2Fshaders%2Fcolor%2Finvert.fragR2i238R3R15R5R406R6tgoR0y40:data%2Fshaders%2Fcolor%2Fprotanopia.fragR2i463R3R15R5R407R6tgoR0y40:data%2Fshaders%2Fcolor%2Ftritanopia.fragR2i463R3R15R5R408R6tgoR0y27:data%2Fshaders%2Fgrain.fragR2i5096R3R15R5R409R6tgoR0y26:data%2Fshaders%2Fhq2x.fragR2i897R3R15R5R410R6tgoR0y30:data%2Fshaders%2Fscanline.fragR2i367R3R15R5R411R6tgoR0y22:data%2Fskybox01_nx.jpgR2i51070R3R4R5R412R6tgoR0y22:data%2Fskybox01_ny.jpgR2i19054R3R4R5R413R6tgoR0y22:data%2Fskybox01_nz.jpgR2i46342R3R4R5R414R6tgoR0y22:data%2Fskybox01_px.jpgR2i60216R3R4R5R415R6tgoR0y22:data%2Fskybox01_py.jpgR2i50155R3R4R5R416R6tgoR0y22:data%2Fskybox01_pz.jpgR2i49470R3R4R5R417R6tgoR0y16:data%2Fsmall.bspR2i121048R3R52R5R418R6tgoR0y16:data%2Fspark.pngR2i36272R3R4R5R419R6tgoR0y18:data%2Fsprites.pngR2i173630R3R4R5R420R6tgoR0y18:data%2Fsprites.xmlR2i2246R3R15R5R421R6tgoR0y18:data%2Ft351sml.jpgR2i8515R3R4R5R422R6tgoR0y25:data%2Fterra%2Fdetail.jpgR2i2021R3R4R5R423R6tgoR0y29:data%2Fterra%2Fdetailmap3.jpgR2i92466R3R4R5R424R6tgoR0y33:data%2Fterra%2Fdetail_texture.jpgR2i82717R3R4R5R425R6tgoR0y23:data%2Fterra%2Fdirt.pngR2i519227R3R4R5R426R6tgoR0y38:data%2Fterra%2Fisland-height-small.jpgR2i8797R3R4R5R427R6tgoR0y32:data%2Fterra%2Fisland-height.jpgR2i35580R3R4R5R428R6tgoR0y25:data%2Fterra%2Fisland.jpgR2i126146R3R4R5R429R6tgoR0y24:data%2Fterra%2Fnoise.jpgR2i45998R3R4R5R430R6tgoR0y23:data%2Fterra%2FRaid.pngR2i134139R3R4R5R431R6tgoR0y30:data%2Fterra%2Fraidtexture.jpgR2i668016R3R4R5R432R6tgoR0y23:data%2Fterra%2FSand.jpgR2i382247R3R4R5R433R6tgoR0y36:data%2Fterra%2Fterrain-heightmap.jpgR2i12101R3R4R5R434R6tgoR0y34:data%2Fterra%2Fterrain-texture.jpgR2i184786R3R4R5R435R6tgoR0y28:data%2Fterrain-heightmap.jpgR2i12101R3R4R5R436R6tgoR0y26:data%2Fterrain-texture.jpgR2i184786R3R4R5R437R6tgoR0y29:data%2Ftextures%2FFloor02.jpgR2i70204R3R4R5R438R6tgoR0y29:data%2Ftextures%2FFloor04.jpgR2i104967R3R4R5R439R6tgoR0y29:data%2Ftextures%2FFloor10.jpgR2i64529R3R4R5R440R6tgoR0y28:data%2Ftextures%2FRoof03.jpgR2i37338R3R4R5R441R6tgoR0y28:data%2Ftextures%2FWall01.jpgR2i76766R3R4R5R442R6tgoR0y28:data%2Ftextures%2FWall02.jpgR2i64299R3R4R5R443R6tgoR0y27:data%2Ftextures%2Fwall3.jpgR2i10240R3R4R5R444R6tgoR0y28:data%2Ftextures%2FWood01.jpgR2i97451R3R4R5R445R6tgoR0y28:data%2Ftextures%2FWood02.jpgR2i75327R3R4R5R446R6tgoR0y16:data%2Ftrail.pngR2i1846R3R4R5R447R6tgoR0y16:data%2Fweed6.tgaR2i72190R3R52R5R448R6tgh\",\"rootPath\":null,\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	manifest = lime_utils_AssetManifest.parse(data,rootPath);
	library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
Math.__name__ = true;
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = true;
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = true;
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) {
		return 4294967296.0 + $int;
	} else {
		return $int + 0.0;
	}
};
var com_gdx_Buffer = function() {
	com_gdx_Gdx.Instance().numBuffers += 1;
};
$hxClasses["com.gdx.Buffer"] = com_gdx_Buffer;
com_gdx_Buffer.__name__ = true;
com_gdx_Buffer.prototype = {
	dispose: function() {
		com_gdx_Gdx.Instance().numBuffers -= 1;
	}
	,__class__: com_gdx_Buffer
};
var com_gdx_Gdx = function() {
	this.TouchID = 0;
	this.TouchY = [];
	this.TouchX = [];
	this.TouchDown = false;
	this.fullScaleY = 1;
	this.fullScaleX = 1;
	this.timeStamp = 0;
	this.pt = 0;
	this.height = 0;
	this.width = 0;
	this.maxMem = 0;
	this.status = "";
};
$hxClasses["com.gdx.Gdx"] = com_gdx_Gdx;
com_gdx_Gdx.__name__ = true;
com_gdx_Gdx.Instance = function() {
	if(com_gdx_Gdx.gdx == null) {
		com_gdx_Gdx.gdx = new com_gdx_Gdx();
	}
	return com_gdx_Gdx.gdx;
};
com_gdx_Gdx.prototype = {
	init: function(win,w,h) {
		this.mainWindow = win;
		this.viewPort = new com_gdx_math_Rectangle(0,0,w,h);
		this.currentBaseTextures = [];
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			this.currentBaseTextures.push(null);
		}
		this.numTextures = 0;
		this.numVertex = 0;
		this.numTris = 0;
		this.numSurfaces = 0;
		this.numMesh = 0;
		this.numBrush = 0;
		this.numBuffers = 0;
		this.keys = [];
		var _g1 = 0;
		while(_g1 < 256) {
			var i1 = _g1++;
			this.keys[i1] = 0;
		}
		var _g2 = 0;
		while(_g2 < 20) {
			var i2 = _g2++;
			this.TouchX[i2] = -1;
			this.TouchY[i2] = -1;
		}
		this.timecount = 0;
		this.width = w;
		this.height = h;
		this.ASPECT_RATIO = this.width / this.height;
		this.setViewPort(0,0,this.width,this.height);
		this.startWidth = this.width;
		this.startHeight = this.height;
		this.avgFPS = 0;
		this.bestFPS = 0;
		this.lastFPS = 0;
		this.worstFPS = 999;
		this.triangleCount = 0;
		this.bestFrameTime = 999999;
		this.worstFrameTime = 0;
		this.mLastTime = this.getTimer();
		this.mLastSecond = this.mLastTime;
		this.mFrameCount = 0;
		this.fixedTime = 0;
		this.deltaTime = 0;
		this.isPause = false;
		this.BlendSource = -1;
		this.BlendDestination = -1;
		this.DepthFunc = -1;
		this.Blend = true;
		this.CullFaceMode = com_gdx_Gdx.gl.BACK;
		this.CullFace = false;
		this.DepthFunc = com_gdx_Gdx.gl.LESS;
		this.DepthMask = false;
		this.DepthTest = false;
		this.clearColor(0,0,0.4);
		this.setDepthMask(true);
		this.setDepthTest(true);
		this.setCullFace(true);
		this.setBlend(false);
		this.setDepthFunc(com_gdx_Gdx.gl.LESS);
		com_gdx_Gdx.gl.pixelStorei(com_gdx_Gdx.gl.PACK_ALIGNMENT,1);
		com_gdx_Gdx.gl.hint(com_gdx_Gdx.gl.GENERATE_MIPMAP_HINT,com_gdx_Gdx.gl.NICEST);
		com_gdx_Gdx.gl.clearDepth(1.0);
		com_gdx_Gdx.gl.colorMask(true,true,true,true);
		com_gdx_Gdx.gl.depthRange(0.0,1.0);
		com_gdx_Gdx.gl.frontFace(com_gdx_Gdx.gl.CCW);
		com_gdx_Gdx.gl.clearStencil(0);
		com_gdx_Gdx.gl.stencilMask(-1);
		com_gdx_Gdx.gl.cullFace(com_gdx_Gdx.gl.BACK);
		this.textures = new haxe_ds_StringMap();
		this.dummyTexture = new com_gdx_gl_Texture();
		var bmp = new lime_graphics_Image(null,0,0,128,128);
		var _g3 = 0;
		while(_g3 < 64) {
			var x = _g3++;
			var _g11 = 0;
			while(_g11 < 64) {
				var y = _g11++;
				bmp.setPixel32(x,y,255);
				bmp.setPixel32(x + 64,y,-1);
				bmp.setPixel32(x,y + 64,-1);
				bmp.setPixel32(x + 64,y + 64,255);
			}
		}
		this.dummyTexture.loadBitmap(bmp,false);
		var value = this.dummyTexture;
		var _this = this.textures;
		if(__map_reserved["dummy"] != null) {
			_this.setReserved("dummy",value);
		} else {
			_this.h["dummy"] = value;
		}
		this.materials = [];
		this.materials.push(new com_gdx_gl_shaders_ColorShader());
		this.materials.push(new com_gdx_gl_shaders_ShaderDefault());
		this.materials.push(new com_gdx_gl_shaders_ShaderCastShadow());
		this.materials.push(new com_gdx_gl_shaders_ShaderTexture());
		this.materials.push(new com_gdx_gl_shaders_ShaderSkin());
		this.materials.push(new com_gdx_gl_shaders_ShaderGrass());
		this.materials.push(new com_gdx_gl_shaders_ShaderLight());
		this.currentMaterial = new com_gdx_gl_material_Material();
		this.setFogMode(2,20.0,60.0,0.009);
		this.pt = this.getTimer();
	}
	,setFogMode: function(mode,fogStar,fogEnd,fogDensity) {
		this.fogMode = mode;
		this.fogStart = fogStar;
		this.fogEnd = fogEnd;
		this.fogDensity = fogDensity;
	}
	,onKeyDown: function(keyCode) {
		if(keyCode <= 256) {
			this.keys[keyCode] = 1;
		}
		if(this.screen != null) {
			this.screen.KeyDown(keyCode);
		}
	}
	,onKeyUp: function(keyCode) {
		if(keyCode <= 256) {
			this.keys[keyCode] = 0;
		}
		if(this.screen != null) {
			this.screen.KeyUp(keyCode);
		}
	}
	,keyPress: function(keyCode) {
		return this.keys[keyCode] != 0;
	}
	,getTextureCubemap: function(url) {
		var _this = this.textures;
		if(__map_reserved[url] != null ? _this.existsReserved(url) : _this.h.hasOwnProperty(url)) {
			var _this1 = this.textures;
			return js_Boot.__cast(__map_reserved[url] != null ? _this1.getReserved(url) : _this1.h[url] , com_gdx_gl_TextureCube);
		} else {
			var tex = new com_gdx_gl_TextureCube(url);
			var _this2 = this.textures;
			if(__map_reserved[url] != null) {
				_this2.setReserved(url,tex);
			} else {
				_this2.h[url] = tex;
			}
			return tex;
		}
	}
	,getTexture: function(url,Linear,Repeat,mipmap) {
		if(mipmap == null) {
			mipmap = false;
		}
		if(Repeat == null) {
			Repeat = true;
		}
		if(Linear == null) {
			Linear = true;
		}
		var _this = this.textures;
		if(__map_reserved[url] != null ? _this.existsReserved(url) : _this.h.hasOwnProperty(url)) {
			var _this1 = this.textures;
			if(__map_reserved[url] != null) {
				return _this1.getReserved(url);
			} else {
				return _this1.h[url];
			}
		} else {
			var tex = new com_gdx_gl_Texture();
			tex.loadBitmap(lime_utils_Assets.getImage(url),Linear,Repeat,mipmap);
			haxe_Log.trace("INFO: Load (" + url + ") Bitmap to Texture",{ fileName : "Gdx.hx", lineNumber : 420, className : "com.gdx.Gdx", methodName : "getTexture"});
			var _this2 = this.textures;
			if(__map_reserved[url] != null) {
				_this2.setReserved(url,tex);
			} else {
				_this2.h[url] = tex;
			}
			return tex;
		}
	}
	,getWidth: function() {
		return this.width;
	}
	,getHeight: function() {
		return this.height;
	}
	,clearColor: function(red,green,blue) {
		if(blue == null) {
			blue = 0;
		}
		if(green == null) {
			green = 0;
		}
		if(red == null) {
			red = 0;
		}
		this._r = red;
		this._g = green;
		this._b = blue;
		com_gdx_Gdx.gl.clearColor(this._r,this._g,this._b,1);
	}
	,updateStates: function() {
		++this.mFrameCount;
		var thisTime = this.getTimer();
		var frameTime = thisTime - this.mLastTime;
		this.mLastTime = thisTime;
		this.bestFrameTime = Math.min(this.bestFrameTime,frameTime) | 0;
		this.worstFrameTime = Math.max(this.worstFrameTime,frameTime) | 0;
		if(thisTime - this.mLastSecond > 1000) {
			this.lastFPS = this.mFrameCount / (thisTime - this.mLastSecond) * 1000 | 0;
			if(this.avgFPS == 0) {
				this.avgFPS = this.lastFPS;
			} else {
				this.avgFPS = (this.avgFPS + this.lastFPS) / 2 | 0;
			}
			this.bestFPS = Math.max(this.bestFPS,this.lastFPS) | 0;
			this.worstFPS = Math.min(this.worstFPS,this.lastFPS) | 0;
			this.mLastSecond = thisTime;
			this.mFrameCount = 0;
		}
		var mem = this.get_totalMemory() / 1024 / 1024 | 0;
		if(mem > this.maxMem) {
			this.maxMem = mem;
		}
		this.status = "FPS:" + this.lastFPS + "/Best:" + this.bestFPS + "\nTris:" + this.numTris + "/Vtx:" + this.numVertex + "/Surf:" + this.numSurfaces + "/Mesh:" + this.numMesh + "\nTextures:" + this.numTextures + "/Mat:" + this.numBrush;
	}
	,get_totalMemory: function() {
		return window.performance.memory;
	}
	,clear: function() {
		com_gdx_Gdx.gl.clear(com_gdx_Gdx.gl.COLOR_BUFFER_BIT | com_gdx_Gdx.gl.DEPTH_BUFFER_BIT);
	}
	,setViewPort: function(x,y,w,h) {
		com_gdx_Gdx.gl.viewport(x | 0,y | 0,w | 0,h | 0);
		this.viewPort.setTo(x,y,w,h);
	}
	,Update: function(dt) {
		this.fixedTime = Math.min(0.025,0.005 + this.timeStamp * 1e-5 * 30);
		this.deltaTime = dt;
		if(this.screen != null) {
			this.screen.update(dt);
		}
	}
	,render: function() {
		this.currentBaseTextures[0] = null;
		this.currentBaseTextures[1] = null;
		this.currentBaseTextures[2] = null;
		this.currentBaseTextures[3] = null;
		this.currentMaterial = null;
		this.numTextures = 0;
		this.numVertex = 0;
		this.numTris = 0;
		this.numSurfaces = 0;
		this.numMesh = 0;
		this.numBrush = 0;
		this.setDepthMask(true);
		this.setDepthTest(true);
		this.setCullFace(true);
		this.setBlend(true);
		com_gdx_gl_BlendMode.setBlend(0);
		com_gdx_Gdx.gl.clearColor(this._r,this._g,this._b,1);
		this.clear();
		if(this.screen != null) {
			this.screen.render();
		}
		this.timeStamp++;
		com_gdx_Gdx.gl.useProgram(null);
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,null);
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ELEMENT_ARRAY_BUFFER,null);
		com_gdx_Gdx.gl.activeTexture(com_gdx_Gdx.gl.TEXTURE0);
		this.updateStates();
	}
	,onShow: function() {
		if(this.screen != null) {
			this.screen.resume();
		}
		this.isPause = false;
	}
	,onHide: function() {
		if(this.screen != null) {
			this.screen.pause();
		}
		this.isPause = true;
	}
	,onClose: function() {
		this.dispose();
	}
	,onresize: function(Width,Height) {
		this.width = Width;
		this.height = Height;
		if(this.screen != null) {
			this.screen.resize(this.width,this.height);
		}
		this.ASPECT_RATIO = this.width / this.height;
		this.fullScaleX = this.startWidth / this.width;
		this.fullScaleY = this.startHeight / this.height;
	}
	,setScreen: function(screen) {
		if(this.screen != null) {
			this.screen.hide();
		}
		this.screen = screen;
		if(this.screen != null) {
			this.screen.show();
			this.screen.resize(this.getWidth(),this.getHeight());
		}
	}
	,dispose: function() {
		com_gdx_Gdx.gl.useProgram(null);
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,null);
		com_gdx_Gdx.gl.blendFunc(com_gdx_Gdx.gl.SRC_ALPHA,com_gdx_Gdx.gl.DST_ALPHA);
	}
	,mouseDown: function(x,y,button) {
		this.TouchX[button] = x;
		this.TouchY[button] = y;
		++this.TouchID;
		this.TouchDown = true;
		if(this.screen != null) {
			this.screen.TouchDown(x,y,button);
		}
	}
	,mouseUp: function(x,y,button) {
		this.TouchX[button] = x;
		this.TouchY[button] = y;
		--this.TouchID;
		this.TouchDown = false;
		if(this.screen != null) {
			this.screen.TouchUp(x,y,button);
		}
	}
	,mouseMove: function(x,y,button) {
		this.TouchX[button] = x;
		this.TouchY[button] = y;
		if(this.screen != null) {
			this.screen.TouchMove(x,y,button);
		}
	}
	,onTouchBegin: function(x,y,id) {
		this.TouchX[id] = x;
		this.TouchY[id] = y;
		++this.TouchID;
		this.TouchDown = true;
		if(this.screen != null) {
			this.screen.TouchDown(x,y,id);
		}
	}
	,onTouchMove: function(x,y,id) {
		this.TouchX[id] = x;
		this.TouchY[id] = y;
		if(this.screen != null) {
			this.screen.TouchMove(x,y,id);
		}
	}
	,onTouchEnd: function(x,y,id) {
		this.TouchX[id] = -1;
		this.TouchY[id] = -1;
		--this.TouchID;
		this.TouchDown = false;
		if(this.screen != null) {
			this.screen.TouchUp(x,y,id);
		}
	}
	,getTimer: function() {
		return (new Date().getTime() / 1000 - com_gdx_Gdx.__startTime) * 1000 | 0;
	}
	,setDepthTest: function(enable) {
		if(this.DepthTest != enable) {
			if(enable) {
				com_gdx_Gdx.gl.enable(com_gdx_Gdx.gl.DEPTH_TEST);
			} else {
				com_gdx_Gdx.gl.disable(com_gdx_Gdx.gl.DEPTH_TEST);
			}
			this.DepthTest = enable;
		}
	}
	,setDepthMask: function(enable) {
		if(this.DepthMask != enable) {
			if(enable) {
				com_gdx_Gdx.gl.depthMask(true);
			} else {
				com_gdx_Gdx.gl.depthMask(false);
			}
			this.DepthMask = enable;
		}
	}
	,setDepthFunc: function(mode) {
		if(this.DepthFunc != mode) {
			com_gdx_Gdx.gl.depthFunc(mode);
			this.DepthFunc = mode;
		}
	}
	,setCullFace: function(enable) {
		if(this.CullFace != enable) {
			if(enable) {
				com_gdx_Gdx.gl.enable(com_gdx_Gdx.gl.CULL_FACE);
			} else {
				com_gdx_Gdx.gl.disable(com_gdx_Gdx.gl.CULL_FACE);
			}
			this.CullFace = enable;
		}
	}
	,setBlend: function(enable) {
		if(this.Blend != enable) {
			if(enable) {
				com_gdx_Gdx.gl.enable(com_gdx_Gdx.gl.BLEND);
			} else {
				com_gdx_Gdx.gl.disable(com_gdx_Gdx.gl.BLEND);
			}
			this.Blend = enable;
		}
	}
	,setBlendFunc: function(source,destination) {
		if(this.BlendSource != source || this.BlendDestination != destination) {
			com_gdx_Gdx.gl.blendFunc(source,destination);
			this.BlendSource = source;
			this.BlendDestination = destination;
		}
	}
	,__class__: com_gdx_Gdx
};
var com_gdx_color_Color3 = function(initialR,initialG,initialB) {
	if(initialB == null) {
		initialB = 0;
	}
	if(initialG == null) {
		initialG = 0;
	}
	if(initialR == null) {
		initialR = 0;
	}
	this.r = initialR;
	this.g = initialG;
	this.b = initialB;
};
$hxClasses["com.gdx.color.Color3"] = com_gdx_color_Color3;
com_gdx_color_Color3.__name__ = true;
com_gdx_color_Color3.prototype = {
	Max: function() {
		return Math.max(this.r,Math.max(this.g,this.b));
	}
	,__class__: com_gdx_color_Color3
};
var com_gdx_color_Color4 = function(initialR,initialG,initialB,initialA) {
	if(initialA == null) {
		initialA = 1.0;
	}
	if(initialB == null) {
		initialB = 1;
	}
	if(initialG == null) {
		initialG = 1;
	}
	if(initialR == null) {
		initialR = 1;
	}
	this.r = initialR;
	this.g = initialG;
	this.b = initialB;
	this.a = initialA;
};
$hxClasses["com.gdx.color.Color4"] = com_gdx_color_Color4;
com_gdx_color_Color4.__name__ = true;
com_gdx_color_Color4.prototype = {
	__class__: com_gdx_color_Color4
};
var com_gdx_gl_BlendMode = function() { };
$hxClasses["com.gdx.gl.BlendMode"] = com_gdx_gl_BlendMode;
com_gdx_gl_BlendMode.__name__ = true;
com_gdx_gl_BlendMode.setBlend = function(mode) {
	switch(mode) {
	case 0:
		com_gdx_Gdx.Instance().setBlendFunc(770,771);
		break;
	case 1:
		com_gdx_Gdx.Instance().setBlendFunc(1,1);
		break;
	case 2:
		com_gdx_Gdx.Instance().setBlendFunc(774,771);
		break;
	case 3:
		com_gdx_Gdx.Instance().setBlendFunc(770,1);
		break;
	case 4:
		com_gdx_Gdx.Instance().setBlendFunc(1,771);
		break;
	default:
		com_gdx_Gdx.Instance().setBlendFunc(1,771);
	}
};
var com_gdx_gl_Imidiatemode = function(capacity) {
	com_gdx_Buffer.call(this);
	this.shader = js_Boot.__cast(com_gdx_Gdx.Instance().materials[0] , com_gdx_gl_shaders_ColorShader);
	this.vertexBuffer = com_gdx_Gdx.gl.createBuffer();
	this.colorBuffer = com_gdx_Gdx.gl.createBuffer();
	this.fvertexBuffer = com_gdx_Gdx.gl.createBuffer();
	this.fcolorBuffer = com_gdx_Gdx.gl.createBuffer();
	this.primitiveCount = 0;
	this.fprimitiveCount = 0;
	this.capacity = capacity;
	this.idxPos = 0;
	this.idxCols = 0;
	this.fidxPos = 0;
	this.fidxCols = 0;
	var elements = capacity * 3 * 4 * 4;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else {
		this1 = null;
	}
	this.vertices = this1;
	com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.vertexBuffer);
	lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(com_gdx_Gdx.gl,com_gdx_Gdx.gl.ARRAY_BUFFER,this.vertices,com_gdx_Gdx.gl.DYNAMIC_DRAW);
	var elements1 = capacity * 4 * 4 * 4;
	var this2;
	if(elements1 != null) {
		this2 = new Float32Array(elements1);
	} else {
		this2 = null;
	}
	this.colors = this2;
	com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.colorBuffer);
	lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(com_gdx_Gdx.gl,com_gdx_Gdx.gl.ARRAY_BUFFER,this.colors,com_gdx_Gdx.gl.DYNAMIC_DRAW);
	var elements2 = capacity * 3 * 4 * 4;
	var this3;
	if(elements2 != null) {
		this3 = new Float32Array(elements2);
	} else {
		this3 = null;
	}
	this.fvertices = this3;
	com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.fvertexBuffer);
	lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(com_gdx_Gdx.gl,com_gdx_Gdx.gl.ARRAY_BUFFER,this.fvertices,com_gdx_Gdx.gl.DYNAMIC_DRAW);
	var elements3 = capacity * 4 * 4 * 4;
	var this4;
	if(elements3 != null) {
		this4 = new Float32Array(elements3);
	} else {
		this4 = null;
	}
	this.fcolors = this4;
	com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.fcolorBuffer);
	lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(com_gdx_Gdx.gl,com_gdx_Gdx.gl.ARRAY_BUFFER,this.fcolors,com_gdx_Gdx.gl.DYNAMIC_DRAW);
};
$hxClasses["com.gdx.gl.Imidiatemode"] = com_gdx_gl_Imidiatemode;
com_gdx_gl_Imidiatemode.__name__ = true;
com_gdx_gl_Imidiatemode.__super__ = com_gdx_Buffer;
com_gdx_gl_Imidiatemode.prototype = $extend(com_gdx_Buffer.prototype,{
	vertex: function(x,y,z) {
		if(z == null) {
			z = 0.0;
		}
		this.vertices[this.idxPos++] = x;
		this.vertices[this.idxPos++] = y;
		this.vertices[this.idxPos++] = z;
	}
	,color: function(r,g,b,a) {
		if(a == null) {
			a = 0.0;
		}
		this.colors[this.idxCols++] = r;
		this.colors[this.idxCols++] = g;
		this.colors[this.idxCols++] = b;
		this.colors[this.idxCols++] = a;
	}
	,reset: function() {
		this.idxPos = 0;
		this.idxCols = 0;
		this.fidxPos = 0;
		this.fidxCols = 0;
		this.fprimitiveCount = 0;
		this.primitiveCount = 0;
	}
	,render: function(camera,mat) {
		com_gdx_Gdx.Instance().setCullFace(false);
		com_gdx_Gdx.Instance().setDepthMask(true);
		com_gdx_Gdx.Instance().setDepthTest(true);
		this.shader.Bind(camera.viewMatrix,camera.projMatrix,mat);
		com_gdx_Gdx.gl.enableVertexAttribArray(this.shader.vertexAttribute);
		com_gdx_Gdx.gl.enableVertexAttribArray(this.shader.colorAttribute);
		if(this.idxPos >= 1) {
			com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.vertexBuffer);
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(com_gdx_Gdx.gl,com_gdx_Gdx.gl.ARRAY_BUFFER,this.vertices,com_gdx_Gdx.gl.STATIC_DRAW);
			com_gdx_Gdx.gl.vertexAttribPointer(this.shader.vertexAttribute,3,com_gdx_Gdx.gl.FLOAT,false,0,0);
			com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.colorBuffer);
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(com_gdx_Gdx.gl,com_gdx_Gdx.gl.ARRAY_BUFFER,this.colors,com_gdx_Gdx.gl.STATIC_DRAW);
			com_gdx_Gdx.gl.vertexAttribPointer(this.shader.colorAttribute,4,com_gdx_Gdx.gl.FLOAT,false,0,0);
			com_gdx_Gdx.gl.drawArrays(com_gdx_Gdx.gl.LINES,0,this.primitiveCount * 2 | 0);
		}
		if(this.fidxPos >= 1) {
			com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.fvertexBuffer);
			var this1 = com_gdx_Gdx.gl;
			var target = com_gdx_Gdx.gl.ARRAY_BUFFER;
			var srcData = this.fvertices;
			this1.bufferSubData(target,0,srcData);
			com_gdx_Gdx.gl.vertexAttribPointer(this.shader.vertexAttribute,3,com_gdx_Gdx.gl.FLOAT,false,0,0);
			com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.fcolorBuffer);
			var this2 = com_gdx_Gdx.gl;
			var target1 = com_gdx_Gdx.gl.ARRAY_BUFFER;
			var srcData1 = this.fcolors;
			this2.bufferSubData(target1,0,srcData1);
			com_gdx_Gdx.gl.vertexAttribPointer(this.shader.colorAttribute,4,com_gdx_Gdx.gl.FLOAT,false,0,0);
			com_gdx_Gdx.gl.drawArrays(4,0,this.fprimitiveCount * 3 | 0);
		}
	}
	,lineVector: function(va,vb,r,g,b,a) {
		if(a == null) {
			a = 1;
		}
		this.vertex(va.x,va.y,va.z);
		this.color(r,g,b,a);
		this.vertex(vb.x,vb.y,vb.z);
		this.color(r,g,b,a);
		this.primitiveCount += 1;
	}
	,line3D: function(x1,y1,z1,x2,y2,z2,r,g,b,a) {
		if(a == null) {
			a = 1;
		}
		if(b == null) {
			b = 1;
		}
		if(g == null) {
			g = 1;
		}
		if(r == null) {
			r = 1;
		}
		this.vertex(x1,y1,z1);
		this.color(r,g,b,a);
		this.vertex(x2,y2,z2);
		this.color(r,g,b,a);
		this.primitiveCount += 1;
	}
	,drawABBox: function(box,r,g,b) {
		var center = box.center;
		var otherVector = box.maximum;
		var diag = new com_gdx_math_Vector3(center.x - otherVector.x,center.y - otherVector.y,center.z - otherVector.z);
		this.line3D(center.x - diag.x,center.y - diag.y,center.z + diag.z,center.x + diag.x,center.y - diag.y,center.z + diag.z,r,g,b,1);
		this.line3D(center.x + diag.x,center.y - diag.y,center.z + diag.z,center.x + diag.x,center.y - diag.y,center.z - diag.z,r,g,b,1);
		this.line3D(center.x + diag.x,center.y - diag.y,center.z - diag.z,center.x - diag.x,center.y - diag.y,center.z - diag.z,r,g,b,1);
		this.line3D(center.x - diag.x,center.y - diag.y,center.z - diag.z,center.x - diag.x,center.y - diag.y,center.z + diag.z,r,g,b,1);
		this.line3D(center.x + diag.x,center.y + diag.y,center.z + diag.z,center.x + diag.x,center.y + diag.y,center.z - diag.z,r,g,b,1);
		this.line3D(center.x + diag.x,center.y + diag.y,center.z - diag.z,center.x - diag.x,center.y + diag.y,center.z - diag.z,r,g,b,1);
		this.line3D(center.x - diag.x,center.y + diag.y,center.z - diag.z,center.x - diag.x,center.y + diag.y,center.z + diag.z,r,g,b,1);
		this.line3D(center.x - diag.x,center.y + diag.y,center.z + diag.z,center.x + diag.x,center.y + diag.y,center.z + diag.z,r,g,b,1);
		this.line3D(center.x + diag.x,center.y - diag.y,center.z + diag.z,center.x + diag.x,center.y + diag.y,center.z + diag.z,r,g,b,1);
		this.line3D(center.x + diag.x,center.y - diag.y,center.z - diag.z,center.x + diag.x,center.y + diag.y,center.z - diag.z,r,g,b,1);
		this.line3D(center.x - diag.x,center.y - diag.y,center.z - diag.z,center.x - diag.x,center.y + diag.y,center.z - diag.z,r,g,b,1);
		this.line3D(center.x - diag.x,center.y - diag.y,center.z + diag.z,center.x - diag.x,center.y + diag.y,center.z + diag.z,r,g,b,1);
	}
	,drawOBBox: function(box,r,g,b) {
		var center = box.center;
		var otherVector = box.maximumWorld;
		var diag = new com_gdx_math_Vector3(center.x - otherVector.x,center.y - otherVector.y,center.z - otherVector.z);
		this.line3D(center.x - diag.x,center.y - diag.y,center.z + diag.z,center.x + diag.x,center.y - diag.y,center.z + diag.z,r,g,b,1);
		this.line3D(center.x + diag.x,center.y - diag.y,center.z + diag.z,center.x + diag.x,center.y - diag.y,center.z - diag.z,r,g,b,1);
		this.line3D(center.x + diag.x,center.y - diag.y,center.z - diag.z,center.x - diag.x,center.y - diag.y,center.z - diag.z,r,g,b,1);
		this.line3D(center.x - diag.x,center.y - diag.y,center.z - diag.z,center.x - diag.x,center.y - diag.y,center.z + diag.z,r,g,b,1);
		this.line3D(center.x + diag.x,center.y + diag.y,center.z + diag.z,center.x + diag.x,center.y + diag.y,center.z - diag.z,r,g,b,1);
		this.line3D(center.x + diag.x,center.y + diag.y,center.z - diag.z,center.x - diag.x,center.y + diag.y,center.z - diag.z,r,g,b,1);
		this.line3D(center.x - diag.x,center.y + diag.y,center.z - diag.z,center.x - diag.x,center.y + diag.y,center.z + diag.z,r,g,b,1);
		this.line3D(center.x - diag.x,center.y + diag.y,center.z + diag.z,center.x + diag.x,center.y + diag.y,center.z + diag.z,r,g,b,1);
		this.line3D(center.x + diag.x,center.y - diag.y,center.z + diag.z,center.x + diag.x,center.y + diag.y,center.z + diag.z,r,g,b,1);
		this.line3D(center.x + diag.x,center.y - diag.y,center.z - diag.z,center.x + diag.x,center.y + diag.y,center.z - diag.z,r,g,b,1);
		this.line3D(center.x - diag.x,center.y - diag.y,center.z - diag.z,center.x - diag.x,center.y + diag.y,center.z - diag.z,r,g,b,1);
		this.line3D(center.x - diag.x,center.y - diag.y,center.z + diag.z,center.x - diag.x,center.y + diag.y,center.z + diag.z,r,g,b,1);
	}
	,dispose: function() {
		com_gdx_Buffer.prototype.dispose.call(this);
		this.vertices = null;
		this.colors = null;
		com_gdx_Gdx.gl.deleteBuffer(this.vertexBuffer);
		com_gdx_Gdx.gl.deleteBuffer(this.colorBuffer);
	}
	,__class__: com_gdx_gl_Imidiatemode
});
var com_gdx_gl_MeshBuffer = function(shader) {
	com_gdx_Buffer.call(this);
	this.shaderUse = shader;
	var min = new com_gdx_math_Vector3(Infinity,Infinity,Infinity);
	var max = new com_gdx_math_Vector3(-Infinity,-Infinity,-Infinity);
	this.Bounding = new com_gdx_math_BoundingInfo(min,max);
	this.no_verts = 0;
	this.no_tris = 0;
	this.tris = [];
	this.materialIndex = 0;
	this.reset_vbo = -1;
	this.vertexbuffer = new com_gdx_gl_VertexBuffer(this.shaderUse);
	this.material = new com_gdx_gl_material_Material();
	this.isOptimize = false;
	this.bones = [];
	this.wights = [];
	this.vert_coords = [];
	this.vert_norm = [];
	this.vert_tex_coords0 = [];
	this.vert_tex_coords1 = [];
	this.vert_col = [];
	this.primitiveType = 4;
};
$hxClasses["com.gdx.gl.MeshBuffer"] = com_gdx_gl_MeshBuffer;
com_gdx_gl_MeshBuffer.__name__ = true;
com_gdx_gl_MeshBuffer.__super__ = com_gdx_Buffer;
com_gdx_gl_MeshBuffer.prototype = $extend(com_gdx_Buffer.prototype,{
	setShader: function(s) {
		this.shaderUse = s;
		this.vertexbuffer.set(this.shaderUse);
		this.reset_vbo = -1;
	}
	,AddFullVertexColorVector: function(Pos,Nor,uv0,uv1,color) {
		this.no_verts++;
		this.vert_coords.push(Pos.x);
		this.vert_coords.push(Pos.y);
		this.vert_coords.push(Pos.z);
		this.vert_norm.push(Nor.x);
		this.vert_norm.push(Nor.y);
		this.vert_norm.push(Nor.z);
		this.vert_col.push(color.r);
		this.vert_col.push(color.g);
		this.vert_col.push(color.b);
		this.vert_col.push(color.a);
		this.vert_tex_coords0.push(uv0.x);
		this.vert_tex_coords0.push(uv0.y);
		this.vert_tex_coords1.push(uv1.x);
		this.vert_tex_coords1.push(uv1.y);
		return this.no_verts - 1;
	}
	,AddVertex: function(x,y,z,u,v) {
		if(v == null) {
			v = 0.0;
		}
		if(u == null) {
			u = 0.0;
		}
		this.no_verts++;
		this.vert_coords.push(x);
		this.vert_coords.push(y);
		this.vert_coords.push(z);
		this.vert_norm.push(0.0);
		this.vert_norm.push(0.0);
		this.vert_norm.push(0.0);
		this.vert_col.push(1.0);
		this.vert_col.push(1.0);
		this.vert_col.push(1.0);
		this.vert_col.push(1.0);
		this.vert_tex_coords0.push(u);
		this.vert_tex_coords0.push(v);
		this.vert_tex_coords1.push(u);
		this.vert_tex_coords1.push(v);
		return this.no_verts - 1;
	}
	,AddFullVertexColor: function(x,y,z,nx,ny,nz,u,v,u2,v2,r,g,b,a) {
		if(a == null) {
			a = 1;
		}
		if(b == null) {
			b = 1;
		}
		if(g == null) {
			g = 1;
		}
		if(r == null) {
			r = 1;
		}
		if(v2 == null) {
			v2 = 0.0;
		}
		if(u2 == null) {
			u2 = 0.0;
		}
		if(v == null) {
			v = 0.0;
		}
		if(u == null) {
			u = 0.0;
		}
		this.no_verts++;
		this.vert_coords.push(x);
		this.vert_coords.push(y);
		this.vert_coords.push(z);
		this.vert_norm.push(nx);
		this.vert_norm.push(ny);
		this.vert_norm.push(nz);
		this.vert_col.push(r);
		this.vert_col.push(g);
		this.vert_col.push(b);
		this.vert_col.push(a);
		this.vert_tex_coords0.push(u);
		this.vert_tex_coords0.push(v);
		this.vert_tex_coords1.push(u2);
		this.vert_tex_coords1.push(v2);
		return this.no_verts - 1;
	}
	,VertexX: function(vid) {
		return this.vert_coords[vid * 3];
	}
	,VertexY: function(vid) {
		return this.vert_coords[vid * 3 + 1];
	}
	,VertexZ: function(vid) {
		return this.vert_coords[vid * 3 + 2];
	}
	,VertexNX: function(vid) {
		return this.vert_norm[vid * 3];
	}
	,VertexNY: function(vid) {
		return this.vert_norm[vid * 3 + 1];
	}
	,VertexNZ: function(vid) {
		return this.vert_norm[vid * 3 + 2];
	}
	,VertexU: function(vid,coord_set) {
		if(coord_set == 0) {
			return this.vert_tex_coords0[vid * 2];
		} else if(coord_set == 1) {
			return this.vert_tex_coords1[vid * 2];
		} else {
			return this.vert_tex_coords1[vid * 3];
		}
	}
	,VertexV: function(vid,coord_set) {
		if(coord_set == 0) {
			return this.vert_tex_coords0[vid * 2 + 1];
		} else if(coord_set == 1) {
			return this.vert_tex_coords1[vid * 2 + 1];
		} else {
			return this.vert_tex_coords1[vid * 3 + 1];
		}
	}
	,TriangleVertex: function(tri_no,corner) {
		var vid = [];
		tri_no = (tri_no + 1) * 3;
		vid[0] = this.tris[tri_no - 1];
		vid[1] = this.tris[tri_no - 2];
		vid[2] = this.tris[tri_no - 3];
		return vid[corner];
	}
	,VertexNormal: function(vid,nx,ny,nz) {
		vid *= 3;
		this.vert_norm[vid] = nx;
		this.vert_norm[vid + 1] = ny;
		this.vert_norm[vid + 2] = nz;
		this.reset_vbo |= 4;
	}
	,VertexColor: function(vid,r,g,b,a) {
		vid *= 4;
		this.vert_col[vid] = r / 255.0;
		this.vert_col[vid + 1] = g / 255.0;
		this.vert_col[vid + 2] = b / 255.0;
		this.vert_col[vid + 3] = a;
		this.reset_vbo |= 8;
	}
	,VertexTexCoords: function(vi,u,v,w,coords_set) {
		if(coords_set == null) {
			coords_set = 0;
		}
		if(w == null) {
			w = 0;
		}
		vi *= 2;
		if(coords_set == 0) {
			this.vert_tex_coords0[vi] = u;
			this.vert_tex_coords0[vi + 1] = v;
		} else {
			this.vert_tex_coords1[vi] = u;
			this.vert_tex_coords1[vi + 1] = v;
		}
		this.reset_vbo |= 2;
	}
	,AddTriangle: function(v0,v1,v2) {
		this.no_tris++;
		this.tris.push(v2);
		this.tris.push(v1);
		this.tris.push(v0);
		this.reset_vbo |= 16;
		return this.no_tris;
	}
	,getFace: function(numface,index) {
		return this.getVertex(this.tris[numface * 3 + index]);
	}
	,getVertex: function(index) {
		return new com_gdx_math_Vector3(this.vert_coords[index * 3],this.vert_coords[index * 3 + 1],this.vert_coords[index * 3 + 2]);
	}
	,CountTriangles: function() {
		return this.no_tris;
	}
	,CountVertices: function() {
		return this.no_verts;
	}
	,UpdateVBO: function() {
		if(this.reset_vbo == -1) {
			this.reset_vbo = 31;
		}
		if((this.reset_vbo & 1) == 1) {
			this.vertexbuffer.uploadVertex(this.vert_coords);
		}
		if((this.reset_vbo & 2) == 2) {
			if(this.vert_tex_coords0.length > 0) {
				this.vertexbuffer.uploadUVCoord0(this.vert_tex_coords0);
			}
			if(this.vert_tex_coords1.length > 0) {
				this.vertexbuffer.uploadUVCoord1(this.vert_tex_coords1);
			}
		}
		if((this.reset_vbo & 4) == 4) {
			this.vertexbuffer.uploadNormals(this.vert_norm);
		}
		if((this.reset_vbo & 8) == 8) {
			this.vertexbuffer.uploadColors(this.vert_col);
		}
		if((this.reset_vbo & 16) == 16) {
			this.vertexbuffer.uploadIndices(this.tris);
		}
		if((this.reset_vbo & 24) == 24) {
			if(this.bones != null) {
				if(this.bones.length > 1 && this.wights.length > 1) {
					this.vertexbuffer.uploadBones(this.bones);
					this.vertexbuffer.uploadHeigs(this.wights);
				}
			}
		}
		this.reset_vbo = 0;
	}
	,renderTo: function(newShader,useMaterial) {
		if(newShader == null) {
			return;
		}
		if(useMaterial) {
			newShader.ApplayMaterial(this.material);
		}
		if(this.isOptimize) {
			this.packVertexBufer.renderTo(newShader,this.primitiveType,this.no_tris * 3);
		} else {
			this.UpdateVBO();
			this.vertexbuffer.renderTo(newShader,this.primitiveType,this.no_tris * 3);
		}
		com_gdx_Gdx.Instance().numTris += this.no_tris;
		com_gdx_Gdx.Instance().numVertex += this.no_verts;
		com_gdx_Gdx.Instance().numSurfaces += 1;
	}
	,render: function() {
		this.shaderUse.ApplayMaterial(this.material);
		if(this.isOptimize) {
			this.packVertexBufer.render(this.primitiveType,this.no_tris * 3);
		} else {
			this.UpdateVBO();
			this.vertexbuffer.render(this.primitiveType,this.no_tris * 3);
		}
		com_gdx_Gdx.Instance().numTris += this.no_tris;
		com_gdx_Gdx.Instance().numVertex += this.no_verts;
		com_gdx_Gdx.Instance().numSurfaces += 1;
	}
	,CreateBoundingBox: function(m) {
		var checkExtends = function(v,min,max) {
			if(v.x < min.x) {
				min.x = v.x;
			}
			if(v.y < min.y) {
				min.y = v.y;
			}
			if(v.z < min.z) {
				min.z = v.z;
			}
			if(v.x > max.x) {
				max.x = v.x;
			}
			if(v.y > max.y) {
				max.y = v.y;
			}
			if(v.z > max.z) {
				max.z = v.z;
			}
		};
		var min1 = new com_gdx_math_Vector3(Infinity,Infinity,Infinity);
		var max1 = new com_gdx_math_Vector3(-Infinity,-Infinity,-Infinity);
		var _g1 = 0;
		var _g = this.CountTriangles();
		while(_g1 < _g) {
			var index = _g1++;
			var _g2 = 0;
			while(_g2 < 3) {
				var i = _g2++;
				var v1 = this.getFace(index,i);
				checkExtends(v1,min1,max1);
			}
		}
		this.Bounding = new com_gdx_math_BoundingInfo(min1,max1);
		var _this = this.Bounding;
		_this.boundingBox.update(m);
		var _this1 = _this.boundingSphere;
		var vector = _this1.center;
		var result = _this1.centerWorld;
		var x = vector.x * m.m11 + vector.y * m.m21 + vector.z * m.m31 + m.m41;
		var y = vector.x * m.m12 + vector.y * m.m22 + vector.z * m.m32 + m.m42;
		var z = vector.x * m.m13 + vector.y * m.m23 + vector.z * m.m33 + m.m43;
		var w = vector.x * m.m14 + vector.y * m.m24 + vector.z * m.m34 + m.m44;
		result.x = x / w;
		result.y = y / w;
		result.z = z / w;
		var result1 = _this1._tempRadiusVector;
		result1.x = m.m11 + m.m21 + m.m31;
		result1.y = m.m12 + m.m22 + m.m32;
		result1.z = m.m13 + m.m23 + m.m33;
		var f = _this1._tempRadiusVector.x;
		var a = f < 0 ? -f : f;
		var f1 = _this1._tempRadiusVector.y;
		var b = f1 < 0 ? -f1 : f1;
		var a1 = a < b ? b : a;
		var f2 = _this1._tempRadiusVector.z;
		var b1 = f2 < 0 ? -f2 : f2;
		_this1.radiusWorld = (a1 < b1 ? b1 : a1) * _this1.radius;
	}
	,scaleTexCoords: function(factorX,factorY,coords_set) {
		var _g1 = 0;
		var _g = this.no_verts;
		while(_g1 < _g) {
			var v = _g1++;
			var vx;
			var vy = 0;
			if(coords_set == 0) {
				this.vert_tex_coords0[v * 2] *= factorX;
				this.vert_tex_coords0[v * 2 + 1] *= factorY;
			} else if(coords_set == 1) {
				this.vert_tex_coords1[v * 2] *= factorX;
				this.vert_tex_coords1[v * 2 + 1] *= factorY;
			} else {
				this.vert_tex_coords0[v * 2] *= factorX;
				this.vert_tex_coords0[v * 2 + 1] *= factorY;
				this.vert_tex_coords1[v * 2] *= factorX;
				this.vert_tex_coords1[v * 2 + 1] *= factorY;
			}
			this.reset_vbo |= 2;
		}
	}
	,dispose: function() {
		com_gdx_Buffer.prototype.dispose.call(this);
		this.Bounding = null;
		this.tris = null;
		this.vertexbuffer.dispose();
		this.material.dispose();
		this.material = null;
		this.vert_coords = null;
		this.vert_norm = null;
		this.vert_tex_coords0 = null;
		this.vert_tex_coords1 = null;
		this.vert_col = null;
	}
	,transform: function(m) {
		var _g1 = 0;
		var _g = this.CountVertices();
		while(_g1 < _g) {
			var v = _g1++;
			var vx = this.vert_coords[v * 3];
			var vy = this.vert_coords[v * 3 + 1];
			var vz = this.vert_coords[v * 3 + 2];
			this.vert_coords[v * 3] = m.m11 * vx + m.m21 * vy + m.m31 * vz + m.m41;
			this.vert_coords[v * 3 + 1] = m.m12 * vx + m.m22 * vy + m.m32 * vz + m.m42;
			this.vert_coords[v * 3 + 2] = m.m13 * vx + m.m23 * vy + m.m33 * vz + m.m43;
			var nx = this.vert_norm[v * 3];
			var ny = this.vert_norm[v * 3 + 1];
			var nz = this.vert_norm[v * 3 + 2];
			this.vert_norm[v * 3] = m.m11 * nx + m.m21 * ny + m.m31 * nz + m.m41;
			this.vert_norm[v * 3 + 1] = m.m12 * nx + m.m22 * ny + m.m32 * nz + m.m42;
			this.vert_norm[v * 3 + 2] = m.m13 * nx + m.m23 * ny + m.m33 * nz + m.m43;
		}
		var result = new com_gdx_math_Matrix();
		result.m11 = 1.0;
		result.m12 = 0;
		result.m13 = 0;
		result.m14 = 0;
		result.m21 = 0;
		result.m22 = 1.0;
		result.m23 = 0;
		result.m24 = 0;
		result.m31 = 0;
		result.m32 = 0;
		result.m33 = 1.0;
		result.m34 = 0;
		result.m41 = 0;
		result.m42 = 0;
		result.m43 = 0;
		result.m44 = 1.0;
		this.CreateBoundingBox(result);
		this.reset_vbo = this.reset_vbo | 1 | 4;
	}
	,scale: function(x,y,z) {
		var result = new com_gdx_math_Matrix();
		result.m11 = 0;
		result.m12 = 0;
		result.m13 = 0;
		result.m14 = 0;
		result.m21 = 0;
		result.m22 = 0;
		result.m23 = 0;
		result.m24 = 0;
		result.m31 = 0;
		result.m32 = 0;
		result.m33 = 0;
		result.m34 = 0;
		result.m41 = 0;
		result.m42 = 0;
		result.m43 = 0;
		result.m44 = 0;
		var result1 = result;
		result1.m11 = x;
		result1.m12 = 0;
		result1.m13 = 0;
		result1.m14 = 0;
		result1.m21 = 0;
		result1.m22 = y;
		result1.m23 = 0;
		result1.m24 = 0;
		result1.m31 = 0;
		result1.m32 = 0;
		result1.m33 = z;
		result1.m34 = 0;
		result1.m41 = 0;
		result1.m42 = 0;
		result1.m43 = 0;
		result1.m44 = 1.0;
		var m = result1;
		this.transform(m);
	}
	,getHeight: function(x,z) {
		var ray0 = new com_gdx_math_Ray(new com_gdx_math_Vector3(x,0,z),new com_gdx_math_Vector3(0,1,0));
		return this.intersects(ray0,true);
	}
	,intersects: function(ray,fastCheck) {
		if(fastCheck == null) {
			fastCheck = false;
		}
		var distance = Infinity;
		var _g1 = 0;
		var _g = this.tris.length / 3 | 0;
		while(_g1 < _g) {
			var index = _g1++;
			var p0 = this.getFace(index,0);
			var p1 = this.getFace(index,1);
			var p2 = this.getFace(index,2);
			var currentDistance = ray.intersectsTriangle(p0,p1,p2);
			if(currentDistance > 0) {
				if(fastCheck || currentDistance < distance) {
					distance = currentDistance;
					if(fastCheck) {
						break;
					}
				}
			}
		}
		if(!(distance > 0 && distance < Infinity)) {
			distance = 0;
		}
		return distance;
	}
	,intersectsEx: function(ray,pContactPoint,fastCheck) {
		if(fastCheck == null) {
			fastCheck = false;
		}
		var distance = Infinity;
		var _g1 = 0;
		var _g = this.tris.length / 3 | 0;
		while(_g1 < _g) {
			var index = _g1++;
			var p0 = this.getFace(index,0);
			var p1 = this.getFace(index,1);
			var p2 = this.getFace(index,2);
			var currentDistance = ray.intersectsTriangle(p0,p1,p2);
			if(currentDistance > 0) {
				if(fastCheck || currentDistance < distance) {
					distance = currentDistance;
					pContactPoint.x = ray.origin.x + ray.direction.x * distance;
					pContactPoint.y = ray.origin.y + ray.direction.y * distance;
					pContactPoint.z = ray.origin.z + ray.direction.z * distance;
					if(fastCheck) {
						break;
					}
				}
			}
		}
		if(!(distance > 0 && distance < Infinity)) {
			distance = 0;
		}
		return distance;
	}
	,__class__: com_gdx_gl_MeshBuffer
});
var com_gdx_gl_PackVertexBuffer = function(shader) {
	com_gdx_Buffer.call(this);
	this.pipeline = shader;
	if(shader.colorAttribute != -1) {
		this.useColors = true;
	} else {
		this.useColors = false;
	}
	if(shader.normalAttribute != -1) {
		this.useNormals = true;
	} else {
		this.useNormals = false;
	}
	if(shader.texCoord0Attribute != -1) {
		this.useTexture = true;
	} else {
		this.useTexture = false;
	}
	if(shader.texCoord1Attribute != -1) {
		this.useDetail = true;
	} else {
		this.useDetail = false;
	}
	if(this.pipeline.bonesAttribute >= 0) {
		this.useBones = true;
	} else {
		this.useBones = false;
	}
	var inc = 3;
	if(this.useTexture) {
		inc += 2;
	}
	if(this.useDetail) {
		inc += 2;
	}
	if(this.useNormals) {
		inc += 3;
	}
	if(this.useColors) {
		inc += 4;
	}
	if(this.useBones) {
		inc += 4;
		inc += 4;
	}
	this.vertexStrideSize = inc * 4;
	this.indexBuffer = com_gdx_Gdx.gl.createBuffer();
	this.vertexBuffer = com_gdx_Gdx.gl.createBuffer();
};
$hxClasses["com.gdx.gl.PackVertexBuffer"] = com_gdx_gl_PackVertexBuffer;
com_gdx_gl_PackVertexBuffer.__name__ = true;
com_gdx_gl_PackVertexBuffer.__super__ = com_gdx_Buffer;
com_gdx_gl_PackVertexBuffer.prototype = $extend(com_gdx_Buffer.prototype,{
	render: function(primitiveType,Num_Triangles) {
		var offSet = 0;
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.vertexBuffer);
		com_gdx_Gdx.gl.vertexAttribPointer(this.pipeline.vertexAttribute,3,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,0);
		com_gdx_Gdx.gl.enableVertexAttribArray(this.pipeline.vertexAttribute);
		offSet += 3;
		if(this.pipeline.normalAttribute != -1) {
			com_gdx_Gdx.gl.vertexAttribPointer(this.pipeline.normalAttribute,3,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,offSet * 4);
			com_gdx_Gdx.gl.enableVertexAttribArray(this.pipeline.normalAttribute);
			offSet += 3;
		}
		if(this.pipeline.texCoord0Attribute != -1) {
			com_gdx_Gdx.gl.vertexAttribPointer(this.pipeline.texCoord0Attribute,2,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,offSet * 4);
			com_gdx_Gdx.gl.enableVertexAttribArray(this.pipeline.texCoord0Attribute);
			offSet += 2;
		}
		if(this.pipeline.texCoord1Attribute != -1) {
			com_gdx_Gdx.gl.vertexAttribPointer(this.pipeline.texCoord1Attribute,2,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,offSet * 4);
			com_gdx_Gdx.gl.enableVertexAttribArray(this.pipeline.texCoord1Attribute);
			offSet += 2;
		}
		if(this.pipeline.colorAttribute != -1) {
			com_gdx_Gdx.gl.vertexAttribPointer(this.pipeline.colorAttribute,4,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,offSet * 4);
			com_gdx_Gdx.gl.enableVertexAttribArray(this.pipeline.colorAttribute);
			offSet += 4;
		}
		if(this.pipeline.bonesAttribute != -1) {
			com_gdx_Gdx.gl.vertexAttribPointer(this.pipeline.bonesAttribute,4,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,offSet * 4);
			com_gdx_Gdx.gl.enableVertexAttribArray(this.pipeline.bonesAttribute);
			offSet += 4;
		}
		if(this.pipeline.wighsAttribute != -1) {
			com_gdx_Gdx.gl.vertexAttribPointer(this.pipeline.wighsAttribute,4,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,offSet * 4);
			com_gdx_Gdx.gl.enableVertexAttribArray(this.pipeline.wighsAttribute);
			offSet += 4;
		}
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		com_gdx_Gdx.gl.drawElements(primitiveType,Num_Triangles,com_gdx_Gdx.gl.UNSIGNED_SHORT,0);
		com_gdx_Gdx.gl.disableVertexAttribArray(this.pipeline.vertexAttribute);
		if(this.pipeline.normalAttribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(this.pipeline.normalAttribute);
		}
		if(this.pipeline.texCoord0Attribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(this.pipeline.texCoord0Attribute);
		}
		if(this.pipeline.texCoord1Attribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(this.pipeline.texCoord1Attribute);
		}
		if(this.pipeline.colorAttribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(this.pipeline.colorAttribute);
		}
		if(this.pipeline.bonesAttribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(this.pipeline.bonesAttribute);
		}
		if(this.pipeline.wighsAttribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(this.pipeline.wighsAttribute);
		}
	}
	,renderTo: function(newShader,primitiveType,Num_Triangles) {
		var offSet = 0;
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.vertexBuffer);
		com_gdx_Gdx.gl.vertexAttribPointer(newShader.vertexAttribute,3,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,0);
		com_gdx_Gdx.gl.enableVertexAttribArray(newShader.vertexAttribute);
		offSet += 3;
		if(newShader.normalAttribute != -1) {
			com_gdx_Gdx.gl.vertexAttribPointer(newShader.normalAttribute,3,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,offSet * 4);
			com_gdx_Gdx.gl.enableVertexAttribArray(newShader.normalAttribute);
			offSet += 3;
		}
		if(newShader.texCoord0Attribute != -1) {
			com_gdx_Gdx.gl.vertexAttribPointer(newShader.texCoord0Attribute,2,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,offSet * 4);
			com_gdx_Gdx.gl.enableVertexAttribArray(newShader.texCoord0Attribute);
			offSet += 2;
		}
		if(newShader.texCoord1Attribute != -1) {
			com_gdx_Gdx.gl.vertexAttribPointer(newShader.texCoord1Attribute,2,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,offSet * 4);
			com_gdx_Gdx.gl.enableVertexAttribArray(newShader.texCoord1Attribute);
			offSet += 2;
		}
		if(newShader.colorAttribute != -1) {
			com_gdx_Gdx.gl.vertexAttribPointer(newShader.colorAttribute,4,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,offSet * 4);
			com_gdx_Gdx.gl.enableVertexAttribArray(newShader.colorAttribute);
			offSet += 4;
		}
		if(newShader.bonesAttribute != -1) {
			com_gdx_Gdx.gl.vertexAttribPointer(newShader.bonesAttribute,4,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,offSet * 4);
			com_gdx_Gdx.gl.enableVertexAttribArray(newShader.bonesAttribute);
			offSet += 4;
		}
		if(newShader.wighsAttribute != -1) {
			com_gdx_Gdx.gl.vertexAttribPointer(newShader.wighsAttribute,4,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,offSet * 4);
			com_gdx_Gdx.gl.enableVertexAttribArray(newShader.wighsAttribute);
			offSet += 4;
		}
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		com_gdx_Gdx.gl.drawElements(primitiveType,Num_Triangles,com_gdx_Gdx.gl.UNSIGNED_SHORT,0);
		com_gdx_Gdx.gl.disableVertexAttribArray(newShader.vertexAttribute);
		if(newShader.normalAttribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(newShader.normalAttribute);
		}
		if(newShader.texCoord0Attribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(newShader.texCoord0Attribute);
		}
		if(newShader.texCoord1Attribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(newShader.texCoord1Attribute);
		}
		if(newShader.colorAttribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(newShader.colorAttribute);
		}
		if(newShader.bonesAttribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(newShader.bonesAttribute);
		}
		if(newShader.wighsAttribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(newShader.wighsAttribute);
		}
	}
	,dispose: function() {
		com_gdx_Buffer.prototype.dispose.call(this);
		com_gdx_Gdx.gl.deleteBuffer(this.vertexBuffer);
		com_gdx_Gdx.gl.deleteBuffer(this.indexBuffer);
	}
	,__class__: com_gdx_gl_PackVertexBuffer
});
var com_gdx_gl_ScreenQuad = function() {
	var vertexShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.VERTEX_SHADER);
	com_gdx_Gdx.gl.shaderSource(vertexShader,"\r\n#ifdef GL_ES\r\n\tprecision mediump float;\r\n#endif\r\nattribute vec4 aVertex;\r\nattribute vec2 aTexCoord;\r\nvarying vec2 vTexCoord;\r\nvoid main() {\r\n\tvTexCoord = aTexCoord;\r\n\tgl_Position = vec4(aVertex.x, aVertex.y, 0.0, 1.0);\r\n}");
	com_gdx_Gdx.gl.compileShader(vertexShader);
	if(com_gdx_Gdx.gl.getShaderParameter(vertexShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Vert:" + com_gdx_Gdx.gl.getShaderInfoLog(vertexShader),{ fileName : "ScreenQuad.hx", lineNumber : 60, className : "com.gdx.gl.ScreenQuad", methodName : "new"});
		return;
	}
	var fragmentShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.FRAGMENT_SHADER);
	com_gdx_Gdx.gl.shaderSource(fragmentShader,"\r\n#ifdef GL_ES\r\n\tprecision mediump float;\r\n#endif\r\nvarying vec2 vTexCoord;\r\nuniform sampler2D uImage0;\r\nvoid main() {\r\n\t\r\n    gl_FragColor = texture2D(uImage0, vTexCoord);\r\n}");
	com_gdx_Gdx.gl.compileShader(fragmentShader);
	if(com_gdx_Gdx.gl.getShaderParameter(fragmentShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Frag:" + com_gdx_Gdx.gl.getShaderInfoLog(fragmentShader),{ fileName : "ScreenQuad.hx", lineNumber : 66, className : "com.gdx.gl.ScreenQuad", methodName : "new"});
		return;
	}
	this.program = com_gdx_Gdx.gl.createProgram();
	com_gdx_Gdx.gl.attachShader(this.program,vertexShader);
	com_gdx_Gdx.gl.attachShader(this.program,fragmentShader);
	com_gdx_Gdx.gl.linkProgram(this.program);
	if(com_gdx_Gdx.gl.getProgramParameter(this.program,com_gdx_Gdx.gl.LINK_STATUS) == 0) {
		haxe_Log.trace(com_gdx_Gdx.gl.getProgramInfoLog(this.program),{ fileName : "ScreenQuad.hx", lineNumber : 76, className : "com.gdx.gl.ScreenQuad", methodName : "new"});
		haxe_Log.trace("VALIDATE_STATUS: " + Std.string(com_gdx_Gdx.gl.getProgramParameter(this.program,com_gdx_Gdx.gl.VALIDATE_STATUS)),{ fileName : "ScreenQuad.hx", lineNumber : 77, className : "com.gdx.gl.ScreenQuad", methodName : "new"});
		haxe_Log.trace("ERROR: " + com_gdx_Gdx.gl.getError(),{ fileName : "ScreenQuad.hx", lineNumber : 78, className : "com.gdx.gl.ScreenQuad", methodName : "new"});
		return;
	}
	this.imageUniform = com_gdx_Gdx.gl.getUniformLocation(this.program,"uImage0");
	this.vertexSlot = com_gdx_Gdx.gl.getAttribLocation(this.program,"aVertex");
	this.texCoordSlot = com_gdx_Gdx.gl.getAttribLocation(this.program,"aTexCoord");
	this.buffer = com_gdx_Gdx.gl.createBuffer();
	com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.buffer);
	var tmp = com_gdx_Gdx.gl;
	var tmp1 = com_gdx_Gdx.gl.ARRAY_BUFFER;
	var array = [-1.0,-1.0,0,0,1.0,-1.0,1,0,-1.0,1.0,0,1,1.0,-1.0,1,0,1.0,1.0,1,1,-1.0,1.0,0,1];
	var this1;
	if(array != null) {
		this1 = new Float32Array(array);
	} else {
		this1 = null;
	}
	lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(tmp,tmp1,this1,com_gdx_Gdx.gl.STATIC_DRAW);
	com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,null);
};
$hxClasses["com.gdx.gl.ScreenQuad"] = com_gdx_gl_ScreenQuad;
com_gdx_gl_ScreenQuad.__name__ = true;
com_gdx_gl_ScreenQuad.prototype = {
	__class__: com_gdx_gl_ScreenQuad
};
var com_gdx_gl_Texture = function() {
	com_gdx_Buffer.call(this);
};
$hxClasses["com.gdx.gl.Texture"] = com_gdx_gl_Texture;
com_gdx_gl_Texture.__name__ = true;
com_gdx_gl_Texture.__super__ = com_gdx_Buffer;
com_gdx_gl_Texture.prototype = $extend(com_gdx_Buffer.prototype,{
	Bind: function(unit) {
		if(unit == null) {
			unit = 0;
		}
		com_gdx_Gdx.gl.activeTexture(com_gdx_Gdx.gl.TEXTURE0 + unit);
		com_gdx_Gdx.gl.bindTexture(com_gdx_Gdx.gl.TEXTURE_2D,this.data);
	}
	,roundUpToPow2: function(number) {
		--number;
		number |= number >> 1;
		number |= number >> 2;
		number |= number >> 4;
		number |= number >> 8;
		number |= number >> 16;
		return ++number;
	}
	,isTextureOk: function(texture) {
		if(this.roundUpToPow2(texture.width) == texture.width) {
			return this.roundUpToPow2(texture.height) == texture.height;
		} else {
			return false;
		}
	}
	,loadBitmap: function(bitmapData,Linear,Repeat,mipmap) {
		if(mipmap == null) {
			mipmap = false;
		}
		if(Repeat == null) {
			Repeat = true;
		}
		if(Linear == null) {
			Linear = true;
		}
		if(bitmapData == null) {
			return;
		}
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.texWidth = this.roundUpToPow2(this.width);
		this.texHeight = this.roundUpToPow2(this.height);
		this.exists = false;
		this.data = com_gdx_Gdx.gl.createTexture();
		com_gdx_Gdx.gl.bindTexture(com_gdx_Gdx.gl.TEXTURE_2D,this.data);
		if(Repeat) {
			com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_2D,com_gdx_Gdx.gl.TEXTURE_WRAP_S,com_gdx_Gdx.gl.REPEAT);
			com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_2D,com_gdx_Gdx.gl.TEXTURE_WRAP_T,com_gdx_Gdx.gl.REPEAT);
		} else {
			com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_2D,com_gdx_Gdx.gl.TEXTURE_WRAP_S,com_gdx_Gdx.gl.CLAMP_TO_EDGE);
			com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_2D,com_gdx_Gdx.gl.TEXTURE_WRAP_T,com_gdx_Gdx.gl.CLAMP_TO_EDGE);
		}
		if(!mipmap) {
			if(Linear) {
				com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_2D,com_gdx_Gdx.gl.TEXTURE_MAG_FILTER,com_gdx_Gdx.gl.LINEAR);
			} else {
				com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_2D,com_gdx_Gdx.gl.TEXTURE_MAG_FILTER,com_gdx_Gdx.gl.NEAREST);
			}
		}
		if(this.isTextureOk(bitmapData)) {
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(com_gdx_Gdx.gl,com_gdx_Gdx.gl.TEXTURE_2D,0,com_gdx_Gdx.gl.RGBA,bitmapData.buffer.width,bitmapData.buffer.height,0,com_gdx_Gdx.gl.RGBA,com_gdx_Gdx.gl.UNSIGNED_BYTE,bitmapData.get_data());
		} else {
			haxe_Log.trace("INFO : resize image : width:" + this.width + " to " + this.texWidth + ", height: " + this.height + " to " + this.texHeight,{ fileName : "Texture.hx", lineNumber : 133, className : "com.gdx.gl.Texture", methodName : "loadBitmap"});
			bitmapData.resize(this.texWidth,this.texHeight);
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(com_gdx_Gdx.gl,com_gdx_Gdx.gl.TEXTURE_2D,0,com_gdx_Gdx.gl.RGBA,bitmapData.buffer.width,bitmapData.buffer.height,0,com_gdx_Gdx.gl.RGBA,com_gdx_Gdx.gl.UNSIGNED_BYTE,bitmapData.get_data());
		}
		if(!mipmap) {
			if(Linear) {
				com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_2D,com_gdx_Gdx.gl.TEXTURE_MIN_FILTER,com_gdx_Gdx.gl.LINEAR);
			} else {
				com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_2D,com_gdx_Gdx.gl.TEXTURE_MIN_FILTER,com_gdx_Gdx.gl.NEAREST);
			}
		} else {
			if(Linear) {
				com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_2D,com_gdx_Gdx.gl.TEXTURE_MIN_FILTER,com_gdx_Gdx.gl.LINEAR_MIPMAP_LINEAR);
			} else {
				com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_2D,com_gdx_Gdx.gl.TEXTURE_MIN_FILTER,com_gdx_Gdx.gl.NEAREST_MIPMAP_NEAREST);
			}
			com_gdx_Gdx.gl.generateMipmap(com_gdx_Gdx.gl.TEXTURE_2D);
		}
	}
	,dispose: function() {
		com_gdx_Buffer.prototype.dispose.call(this);
		com_gdx_Gdx.gl.deleteTexture(this.data);
	}
	,__class__: com_gdx_gl_Texture
});
var com_gdx_gl_TextureCube = function(rootUrl) {
	var _gthis = this;
	com_gdx_gl_Texture.call(this);
	var extensions = [];
	extensions = ["_px.jpg","_py.jpg","_pz.jpg","_nx.jpg","_ny.jpg","_nz.jpg"];
	this.data = com_gdx_Gdx.gl.createTexture();
	com_gdx_Gdx.gl.bindTexture(com_gdx_Gdx.gl.TEXTURE_CUBE_MAP,this.data);
	var faces = [com_gdx_Gdx.gl.TEXTURE_CUBE_MAP_POSITIVE_X,com_gdx_Gdx.gl.TEXTURE_CUBE_MAP_POSITIVE_Y,com_gdx_Gdx.gl.TEXTURE_CUBE_MAP_POSITIVE_Z,com_gdx_Gdx.gl.TEXTURE_CUBE_MAP_NEGATIVE_X,com_gdx_Gdx.gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,com_gdx_Gdx.gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];
	var _setTex = function(imagePath,index) {
		var bitmapData = lime_utils_Assets.getImage(imagePath);
		_gthis.width = bitmapData.width;
		_gthis.height = bitmapData.height;
		_gthis.texWidth = _gthis.roundUpToPow2(_gthis.width);
		_gthis.texHeight = _gthis.roundUpToPow2(_gthis.height);
		if(_gthis.isTextureOk(bitmapData)) {
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(com_gdx_Gdx.gl,faces[index],0,com_gdx_Gdx.gl.RGBA,bitmapData.buffer.width,bitmapData.buffer.height,0,com_gdx_Gdx.gl.RGBA,com_gdx_Gdx.gl.UNSIGNED_BYTE,bitmapData.get_data());
		} else {
			haxe_Log.trace("INFO : resize image : width:" + _gthis.width + " to " + _gthis.texWidth + ", height: " + _gthis.height + " to " + _gthis.texHeight,{ fileName : "TextureCube.hx", lineNumber : 73, className : "com.gdx.gl.TextureCube", methodName : "new"});
			bitmapData.resize(_gthis.texWidth,_gthis.texHeight);
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(com_gdx_Gdx.gl,faces[index],0,com_gdx_Gdx.gl.RGBA,bitmapData.buffer.width,bitmapData.buffer.height,0,com_gdx_Gdx.gl.RGBA,com_gdx_Gdx.gl.UNSIGNED_BYTE,bitmapData.get_data());
		}
	};
	com_gdx_Gdx.gl.bindTexture(com_gdx_Gdx.gl.TEXTURE_CUBE_MAP,this.data);
	com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_CUBE_MAP,com_gdx_Gdx.gl.TEXTURE_WRAP_S,com_gdx_Gdx.gl.CLAMP_TO_EDGE);
	com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_CUBE_MAP,com_gdx_Gdx.gl.TEXTURE_WRAP_T,com_gdx_Gdx.gl.CLAMP_TO_EDGE);
	var _g1 = 0;
	var _g = extensions.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(lime_utils_Assets.exists(rootUrl + extensions[i])) {
			_setTex(rootUrl + extensions[i],i);
			haxe_Log.trace("Load :" + rootUrl + extensions[i],{ fileName : "TextureCube.hx", lineNumber : 97, className : "com.gdx.gl.TextureCube", methodName : "new"});
		} else {
			haxe_Log.trace("Image '" + rootUrl + extensions[i] + "' doesn't exist !",{ fileName : "TextureCube.hx", lineNumber : 99, className : "com.gdx.gl.TextureCube", methodName : "new"});
		}
	}
	com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_CUBE_MAP,com_gdx_Gdx.gl.TEXTURE_MAG_FILTER,com_gdx_Gdx.gl.LINEAR);
	com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_CUBE_MAP,com_gdx_Gdx.gl.TEXTURE_MIN_FILTER,com_gdx_Gdx.gl.LINEAR_MIPMAP_LINEAR);
	com_gdx_Gdx.gl.generateMipmap(com_gdx_Gdx.gl.TEXTURE_CUBE_MAP);
};
$hxClasses["com.gdx.gl.TextureCube"] = com_gdx_gl_TextureCube;
com_gdx_gl_TextureCube.__name__ = true;
com_gdx_gl_TextureCube.__super__ = com_gdx_gl_Texture;
com_gdx_gl_TextureCube.prototype = $extend(com_gdx_gl_Texture.prototype,{
	Bind: function(i) {
		if(i == null) {
			i = 0;
		}
		com_gdx_Gdx.gl.bindTexture(com_gdx_Gdx.gl.TEXTURE_CUBE_MAP,this.data);
	}
	,__class__: com_gdx_gl_TextureCube
});
var com_gdx_gl_VertexBone = function() {
	this.Color = new com_gdx_color_Color4(1,1,1,1);
	this.Pos = new com_gdx_math_Vector3(0,0,0);
	this.Normal = new com_gdx_math_Vector3(0,0,0);
	this.TCoords0 = new com_gdx_math_Vector2(0,0);
	this.TCoords1 = new com_gdx_math_Vector2(0,0);
	this.bones = [];
	this.bones.push(new com_gdx_util_VertexWight(-1,0));
	this.bones.push(new com_gdx_util_VertexWight(-1,0));
	this.bones.push(new com_gdx_util_VertexWight(-1,0));
	this.bones.push(new com_gdx_util_VertexWight(-1,0));
	this.numBones = 0;
	this.surfaceId = 0;
};
$hxClasses["com.gdx.gl.VertexBone"] = com_gdx_gl_VertexBone;
com_gdx_gl_VertexBone.__name__ = true;
com_gdx_gl_VertexBone.prototype = {
	__class__: com_gdx_gl_VertexBone
};
var com_gdx_gl_VertexBuffer = function(shader) {
	com_gdx_Buffer.call(this);
	this.pipeline = shader;
	if(shader.colorAttribute >= 0) {
		this.useColors = true;
	} else {
		this.useColors = false;
	}
	if(shader.normalAttribute >= 0) {
		this.useNormals = true;
	} else {
		this.useNormals = false;
	}
	if(shader.texCoord0Attribute >= 0) {
		this.useTexture = true;
	} else {
		this.useTexture = false;
	}
	if(shader.texCoord1Attribute >= 0) {
		this.useDetail = true;
	} else {
		this.useDetail = false;
	}
	if(this.pipeline.bonesAttribute >= 0) {
		this.useBones = true;
	} else {
		this.useBones = false;
	}
	this.coordBuffer = com_gdx_Gdx.gl.createBuffer();
	this.indexBuffer = com_gdx_Gdx.gl.createBuffer();
	if(this.useNormals) {
		this.normBuffer = com_gdx_Gdx.gl.createBuffer();
	}
	if(this.useTexture) {
		this.tex0Buffer = com_gdx_Gdx.gl.createBuffer();
		if(this.useDetail) {
			this.tex1Buffer = com_gdx_Gdx.gl.createBuffer();
		}
	}
	if(this.useColors) {
		this.colBuffer = com_gdx_Gdx.gl.createBuffer();
	}
	if(this.useBones) {
		this.bonesBuffer = com_gdx_Gdx.gl.createBuffer();
		this.wighsBuffer = com_gdx_Gdx.gl.createBuffer();
	}
};
$hxClasses["com.gdx.gl.VertexBuffer"] = com_gdx_gl_VertexBuffer;
com_gdx_gl_VertexBuffer.__name__ = true;
com_gdx_gl_VertexBuffer.__super__ = com_gdx_Buffer;
com_gdx_gl_VertexBuffer.prototype = $extend(com_gdx_Buffer.prototype,{
	set: function(shader) {
		this.pipeline = shader;
		if(shader.colorAttribute >= 0) {
			this.useColors = true;
		} else {
			this.useColors = false;
		}
		if(shader.normalAttribute >= 0) {
			this.useNormals = true;
		} else {
			this.useNormals = false;
		}
		if(shader.texCoord0Attribute >= 0) {
			this.useTexture = true;
		} else {
			this.useTexture = false;
		}
		if(shader.texCoord1Attribute >= 0) {
			this.useDetail = true;
		} else {
			this.useDetail = false;
		}
		if(this.pipeline.bonesAttribute >= 0) {
			this.useBones = true;
		} else {
			this.useBones = false;
		}
		if(this.useNormals) {
			if(this.normBuffer == null) {
				this.normBuffer = com_gdx_Gdx.gl.createBuffer();
			}
		}
		if(this.useTexture) {
			if(this.tex0Buffer == null) {
				this.tex0Buffer = com_gdx_Gdx.gl.createBuffer();
			}
			if(this.useDetail) {
				if(this.tex1Buffer == null) {
					this.tex1Buffer = com_gdx_Gdx.gl.createBuffer();
				}
			}
		}
		if(this.useColors) {
			if(this.colBuffer == null) {
				this.colBuffer = com_gdx_Gdx.gl.createBuffer();
			}
		}
		if(this.useBones) {
			if(this.bonesBuffer == null) {
				this.bonesBuffer = com_gdx_Gdx.gl.createBuffer();
			}
			if(this.wighsBuffer == null) {
				this.wighsBuffer = com_gdx_Gdx.gl.createBuffer();
			}
		}
	}
	,uploadIndices: function(v) {
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		var tmp = com_gdx_Gdx.gl;
		var tmp1 = com_gdx_Gdx.gl.ELEMENT_ARRAY_BUFFER;
		var this1;
		if(v != null) {
			this1 = new Int16Array(v);
		} else {
			this1 = null;
		}
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(tmp,tmp1,this1,com_gdx_Gdx.gl.STATIC_DRAW);
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ELEMENT_ARRAY_BUFFER,null);
	}
	,uploadBones: function(v) {
		if(!this.useBones) {
			return;
		}
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.bonesBuffer);
		var tmp = com_gdx_Gdx.gl;
		var tmp1 = com_gdx_Gdx.gl.ARRAY_BUFFER;
		var this1;
		if(v != null) {
			this1 = new Float32Array(v);
		} else {
			this1 = null;
		}
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(tmp,tmp1,this1,com_gdx_Gdx.gl.DYNAMIC_DRAW);
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,null);
	}
	,uploadHeigs: function(v) {
		if(!this.useBones) {
			return;
		}
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.wighsBuffer);
		var tmp = com_gdx_Gdx.gl;
		var tmp1 = com_gdx_Gdx.gl.ARRAY_BUFFER;
		var this1;
		if(v != null) {
			this1 = new Float32Array(v);
		} else {
			this1 = null;
		}
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(tmp,tmp1,this1,com_gdx_Gdx.gl.DYNAMIC_DRAW);
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,null);
	}
	,uploadVertex: function(v) {
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.coordBuffer);
		var tmp = com_gdx_Gdx.gl;
		var tmp1 = com_gdx_Gdx.gl.ARRAY_BUFFER;
		var this1;
		if(v != null) {
			this1 = new Float32Array(v);
		} else {
			this1 = null;
		}
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(tmp,tmp1,this1,com_gdx_Gdx.gl.DYNAMIC_DRAW);
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,null);
	}
	,uploadNormals: function(v) {
		if(!this.useNormals) {
			return;
		}
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.normBuffer);
		var tmp = com_gdx_Gdx.gl;
		var tmp1 = com_gdx_Gdx.gl.ARRAY_BUFFER;
		var this1;
		if(v != null) {
			this1 = new Float32Array(v);
		} else {
			this1 = null;
		}
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(tmp,tmp1,this1,com_gdx_Gdx.gl.DYNAMIC_DRAW);
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,null);
	}
	,uploadColors: function(v) {
		if(!this.useColors) {
			return;
		}
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.colBuffer);
		var tmp = com_gdx_Gdx.gl;
		var tmp1 = com_gdx_Gdx.gl.ARRAY_BUFFER;
		var this1;
		if(v != null) {
			this1 = new Float32Array(v);
		} else {
			this1 = null;
		}
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(tmp,tmp1,this1,com_gdx_Gdx.gl.DYNAMIC_DRAW);
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,null);
	}
	,uploadUVCoord0: function(v) {
		if(!this.useTexture) {
			return;
		}
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.tex0Buffer);
		var tmp = com_gdx_Gdx.gl;
		var tmp1 = com_gdx_Gdx.gl.ARRAY_BUFFER;
		var this1;
		if(v != null) {
			this1 = new Float32Array(v);
		} else {
			this1 = null;
		}
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(tmp,tmp1,this1,com_gdx_Gdx.gl.DYNAMIC_DRAW);
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,null);
	}
	,uploadUVCoord1: function(v) {
		if(!this.useDetail) {
			return;
		}
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.tex1Buffer);
		var tmp = com_gdx_Gdx.gl;
		var tmp1 = com_gdx_Gdx.gl.ARRAY_BUFFER;
		var this1;
		if(v != null) {
			this1 = new Float32Array(v);
		} else {
			this1 = null;
		}
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(tmp,tmp1,this1,com_gdx_Gdx.gl.DYNAMIC_DRAW);
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,null);
	}
	,setUVCoord0: function(v) {
		if(!this.useTexture) {
			return;
		}
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.tex0Buffer);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(com_gdx_Gdx.gl,com_gdx_Gdx.gl.ARRAY_BUFFER,v,com_gdx_Gdx.gl.DYNAMIC_DRAW);
	}
	,setColors: function(v) {
		if(!this.useColors) {
			return;
		}
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.colBuffer);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(com_gdx_Gdx.gl,com_gdx_Gdx.gl.ARRAY_BUFFER,v,com_gdx_Gdx.gl.DYNAMIC_DRAW);
	}
	,setVertex: function(v) {
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.coordBuffer);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(com_gdx_Gdx.gl,com_gdx_Gdx.gl.ARRAY_BUFFER,v,com_gdx_Gdx.gl.DYNAMIC_DRAW);
	}
	,render: function(primitiveType,Num_Triangles) {
		if(this.pipeline.vertexAttribute == -1) {
			return;
		}
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.coordBuffer);
		com_gdx_Gdx.gl.vertexAttribPointer(this.pipeline.vertexAttribute,3,com_gdx_Gdx.gl.FLOAT,false,0,0);
		com_gdx_Gdx.gl.enableVertexAttribArray(this.pipeline.vertexAttribute);
		if(this.pipeline.normalAttribute != -1) {
			com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.normBuffer);
			com_gdx_Gdx.gl.vertexAttribPointer(this.pipeline.normalAttribute,3,com_gdx_Gdx.gl.FLOAT,false,0,0);
			com_gdx_Gdx.gl.enableVertexAttribArray(this.pipeline.normalAttribute);
		}
		if(this.pipeline.texCoord0Attribute != -1) {
			com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.tex0Buffer);
			com_gdx_Gdx.gl.vertexAttribPointer(this.pipeline.texCoord0Attribute,2,com_gdx_Gdx.gl.FLOAT,false,0,0);
			com_gdx_Gdx.gl.enableVertexAttribArray(this.pipeline.texCoord0Attribute);
		}
		if(this.pipeline.texCoord1Attribute != -1) {
			com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.tex1Buffer);
			com_gdx_Gdx.gl.vertexAttribPointer(this.pipeline.texCoord1Attribute,2,com_gdx_Gdx.gl.FLOAT,false,0,0);
			com_gdx_Gdx.gl.enableVertexAttribArray(this.pipeline.texCoord1Attribute);
		}
		if(this.pipeline.colorAttribute != -1) {
			com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.colBuffer);
			com_gdx_Gdx.gl.vertexAttribPointer(this.pipeline.colorAttribute,4,com_gdx_Gdx.gl.FLOAT,false,0,0);
			com_gdx_Gdx.gl.enableVertexAttribArray(this.pipeline.colorAttribute);
		}
		if(this.useBones) {
			if(this.pipeline.bonesAttribute >= 0) {
				com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.bonesBuffer);
				com_gdx_Gdx.gl.vertexAttribPointer(this.pipeline.bonesAttribute,4,com_gdx_Gdx.gl.FLOAT,false,0,0);
				com_gdx_Gdx.gl.enableVertexAttribArray(this.pipeline.bonesAttribute);
			}
			if(this.pipeline.wighsAttribute >= 0) {
				com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.wighsBuffer);
				com_gdx_Gdx.gl.vertexAttribPointer(this.pipeline.wighsAttribute,4,com_gdx_Gdx.gl.FLOAT,false,0,0);
				com_gdx_Gdx.gl.enableVertexAttribArray(this.pipeline.wighsAttribute);
			}
		}
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		com_gdx_Gdx.gl.drawElements(primitiveType,Num_Triangles,com_gdx_Gdx.gl.UNSIGNED_SHORT,0);
		com_gdx_Gdx.gl.disableVertexAttribArray(this.pipeline.vertexAttribute);
		if(this.pipeline.normalAttribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(this.pipeline.normalAttribute);
		}
		if(this.pipeline.texCoord0Attribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(this.pipeline.texCoord0Attribute);
		}
		if(this.pipeline.texCoord1Attribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(this.pipeline.texCoord1Attribute);
		}
		if(this.pipeline.colorAttribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(this.pipeline.colorAttribute);
		}
		if(this.useBones) {
			if(this.pipeline.bonesAttribute >= 0) {
				com_gdx_Gdx.gl.disableVertexAttribArray(this.pipeline.bonesAttribute);
			}
			if(this.pipeline.wighsAttribute >= 0) {
				com_gdx_Gdx.gl.disableVertexAttribArray(this.pipeline.wighsAttribute);
			}
		}
	}
	,renderTo: function(shader,primitiveType,Num_Triangles) {
		if(shader.vertexAttribute == -1) {
			return;
		}
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.coordBuffer);
		com_gdx_Gdx.gl.vertexAttribPointer(shader.vertexAttribute,3,com_gdx_Gdx.gl.FLOAT,false,0,0);
		com_gdx_Gdx.gl.enableVertexAttribArray(shader.vertexAttribute);
		if(shader.normalAttribute != -1) {
			com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.normBuffer);
			com_gdx_Gdx.gl.vertexAttribPointer(shader.normalAttribute,3,com_gdx_Gdx.gl.FLOAT,false,0,0);
			com_gdx_Gdx.gl.enableVertexAttribArray(shader.normalAttribute);
		}
		if(shader.texCoord0Attribute != -1) {
			com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.tex0Buffer);
			com_gdx_Gdx.gl.vertexAttribPointer(shader.texCoord0Attribute,2,com_gdx_Gdx.gl.FLOAT,false,0,0);
			com_gdx_Gdx.gl.enableVertexAttribArray(shader.texCoord0Attribute);
		}
		if(shader.texCoord1Attribute != -1) {
			com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.tex1Buffer);
			com_gdx_Gdx.gl.vertexAttribPointer(shader.texCoord1Attribute,2,com_gdx_Gdx.gl.FLOAT,false,0,0);
			com_gdx_Gdx.gl.enableVertexAttribArray(shader.texCoord1Attribute);
		}
		if(shader.colorAttribute != -1) {
			com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.colBuffer);
			com_gdx_Gdx.gl.vertexAttribPointer(shader.colorAttribute,4,com_gdx_Gdx.gl.FLOAT,false,0,0);
			com_gdx_Gdx.gl.enableVertexAttribArray(shader.colorAttribute);
		}
		if(this.useBones) {
			if(shader.bonesAttribute >= 0) {
				com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.bonesBuffer);
				com_gdx_Gdx.gl.vertexAttribPointer(shader.bonesAttribute,4,com_gdx_Gdx.gl.FLOAT,false,0,0);
				com_gdx_Gdx.gl.enableVertexAttribArray(shader.bonesAttribute);
			}
			if(shader.wighsAttribute >= 0) {
				com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.wighsBuffer);
				com_gdx_Gdx.gl.vertexAttribPointer(shader.wighsAttribute,4,com_gdx_Gdx.gl.FLOAT,false,0,0);
				com_gdx_Gdx.gl.enableVertexAttribArray(shader.wighsAttribute);
			}
		}
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		com_gdx_Gdx.gl.drawElements(primitiveType,Num_Triangles,com_gdx_Gdx.gl.UNSIGNED_SHORT,0);
		com_gdx_Gdx.gl.disableVertexAttribArray(shader.vertexAttribute);
		if(shader.normalAttribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(shader.normalAttribute);
		}
		if(shader.texCoord0Attribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(shader.texCoord0Attribute);
		}
		if(shader.texCoord1Attribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(shader.texCoord1Attribute);
		}
		if(shader.colorAttribute != -1) {
			com_gdx_Gdx.gl.disableVertexAttribArray(shader.colorAttribute);
		}
		if(this.useBones) {
			if(shader.bonesAttribute >= 0) {
				com_gdx_Gdx.gl.disableVertexAttribArray(shader.bonesAttribute);
			}
			if(shader.wighsAttribute >= 0) {
				com_gdx_Gdx.gl.disableVertexAttribArray(shader.wighsAttribute);
			}
		}
	}
	,dispose: function() {
		com_gdx_Buffer.prototype.dispose.call(this);
		com_gdx_Gdx.gl.deleteBuffer(this.coordBuffer);
		com_gdx_Gdx.gl.deleteBuffer(this.indexBuffer);
		if(this.useNormals) {
			com_gdx_Gdx.gl.deleteBuffer(this.normBuffer);
		}
		if(this.useTexture) {
			com_gdx_Gdx.gl.deleteBuffer(this.tex0Buffer);
		}
		if(this.useDetail) {
			com_gdx_Gdx.gl.deleteBuffer(this.tex1Buffer);
		}
		if(this.useBones) {
			com_gdx_Gdx.gl.deleteBuffer(this.bonesBuffer);
			com_gdx_Gdx.gl.deleteBuffer(this.wighsBuffer);
		}
		if(this.useColors) {
			com_gdx_Gdx.gl.deleteBuffer(this.colBuffer);
		}
	}
	,__class__: com_gdx_gl_VertexBuffer
});
var com_gdx_gl_material_Material = function() {
	com_gdx_Buffer.call(this);
	this.textures = [];
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		this.textures.push(null);
	}
	this.alpha = 1;
	this.CullingFace = true;
	this.BlendFace = false;
	this.DiffuseColor = new com_gdx_color_Color3(1.0,1.0,1.0);
	this.SpecularColor = new com_gdx_color_Color3(1.0,1.0,1.0);
	this.AmbientColor = new com_gdx_color_Color3(1.0,1.0,1.0);
	this.Shininess = 10;
	this.BlendType = 0;
	this.DepthTest = true;
	this.DepthMask = true;
	this.materialId = 0;
	this.materialType = 0;
};
$hxClasses["com.gdx.gl.material.Material"] = com_gdx_gl_material_Material;
com_gdx_gl_material_Material.__name__ = true;
com_gdx_gl_material_Material.CompareMaterial = function(brush1,brush2) {
	if(brush1.textures[0] != null) {
		if(brush2.textures[0] != null) {
			if(brush1.textures[0] != brush2.textures[0]) {
				return false;
			}
		}
	}
	if(brush1.textures[1] != null) {
		if(brush2.textures[1] != null) {
			if(brush1.textures[1] != brush2.textures[1]) {
				return false;
			}
		}
	}
	return true;
};
com_gdx_gl_material_Material.__super__ = com_gdx_Buffer;
com_gdx_gl_material_Material.prototype = $extend(com_gdx_Buffer.prototype,{
	setTexture: function(tex,layer) {
		if(layer == null) {
			layer = 0;
		}
		this.textures[layer] = tex;
	}
	,setMaterialType: function(newType) {
		this.materialType = newType;
	}
	,Applay: function() {
		com_gdx_Gdx.Instance().setDepthMask(this.DepthMask);
		com_gdx_Gdx.Instance().setDepthTest(this.DepthTest);
		com_gdx_Gdx.Instance().setCullFace(this.CullingFace);
		com_gdx_Gdx.Instance().setBlend(this.BlendFace);
		if(this.BlendFace) {
			com_gdx_gl_BlendMode.setBlend(this.BlendType);
		}
		com_gdx_Gdx.Instance().numBrush += 1;
	}
	,clone: function(b) {
		this.alpha = b.alpha;
		this.BlendFace = b.BlendFace;
		this.BlendType = b.BlendType;
		this.CullingFace = b.CullingFace;
		this.DepthMask = b.DepthMask;
		this.DepthTest = b.DepthTest;
		this.materialId = b.materialId;
		this.materialType = b.materialType;
		var _this = this.DiffuseColor;
		var source = b.DiffuseColor;
		_this.r = source.r;
		_this.g = source.g;
		_this.b = source.b;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			this.textures[i] = b.textures[i];
		}
	}
	,dispose: function() {
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			this.textures[i].dispose();
			this.textures[i] = null;
		}
		this.textures = null;
		com_gdx_Buffer.prototype.dispose.call(this);
	}
	,__class__: com_gdx_gl_material_Material
});
var com_gdx_gl_shaders_Shader = function() {
	com_gdx_Buffer.call(this);
	this.vertexAttribute = -1;
	this.normalAttribute = -1;
	this.colorAttribute = -1;
	this.texCoord0Attribute = -1;
	this.texCoord1Attribute = -1;
	this.bonesAttribute = -1;
	this.wighsAttribute = -1;
	this.boneMatrixUniform = [];
	this.MaterialType = null;
};
$hxClasses["com.gdx.gl.shaders.Shader"] = com_gdx_gl_shaders_Shader;
com_gdx_gl_shaders_Shader.__name__ = true;
com_gdx_gl_shaders_Shader.__super__ = com_gdx_Buffer;
com_gdx_gl_shaders_Shader.prototype = $extend(com_gdx_Buffer.prototype,{
	setBoneMatrix: function(index,m) {
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(com_gdx_Gdx.gl,this.boneMatrixUniform[index],false,m.asArray());
	}
	,setProjMatrix: function(m) {
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(com_gdx_Gdx.gl,this.projMatrixUniform,false,m.asArray());
	}
	,setViewMatrix: function(m) {
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(com_gdx_Gdx.gl,this.viewMatrixUniform,false,m.asArray());
	}
	,setWorldMatrix: function(m) {
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(com_gdx_Gdx.gl,this.worldMatrixUniform,false,m.asArray());
	}
	,setMaterialType: function(m) {
		com_gdx_Gdx.gl.uniform1i(this.MaterialType,m);
	}
	,setTexture0: function(tex) {
		if(this.texCoord0Attribute == -1) {
			return;
		}
		if(tex != com_gdx_Gdx.Instance().currentBaseTextures[0]) {
			tex.Bind(0);
			com_gdx_Gdx.gl.uniform1i(this.texture0Uniform,0);
			com_gdx_Gdx.Instance().numTextures += 1;
			com_gdx_Gdx.Instance().currentBaseTextures[0] = tex;
		}
	}
	,preSets: function() {
	}
	,Bind: function(view,proj,world) {
		com_gdx_Gdx.gl.useProgram(this.shaderProgram);
		this.setProjMatrix(proj);
		this.setViewMatrix(view);
		this.setWorldMatrix(world);
		this.preSets();
	}
	,unBind: function() {
		com_gdx_Gdx.gl.useProgram(null);
	}
	,ApplayMaterial: function(mat) {
		if(mat != com_gdx_Gdx.Instance().currentMaterial) {
			mat.Applay();
			this.setMaterialType(mat.materialType);
			com_gdx_Gdx.Instance().currentMaterial = mat;
		}
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			if(mat.textures[i] != null) {
				if(mat.textures[i] != com_gdx_Gdx.Instance().currentBaseTextures[i]) {
					com_gdx_Gdx.Instance().currentBaseTextures[i] = mat.textures[i];
					switch(i) {
					case 0:
						mat.textures[i].Bind(0);
						com_gdx_Gdx.gl.uniform1i(this.texture0Uniform,0);
						break;
					case 1:
						mat.textures[i].Bind(1);
						com_gdx_Gdx.gl.uniform1i(this.texture1Uniform,1);
						break;
					case 2:
						mat.textures[i].Bind(2);
						com_gdx_Gdx.gl.uniform1i(this.texture2Uniform,2);
						break;
					case 3:
						mat.textures[i].Bind(3);
						com_gdx_Gdx.gl.uniform1i(this.texture3Uniform,3);
						break;
					}
					com_gdx_Gdx.Instance().numTextures += 1;
				}
			} else {
				break;
			}
		}
	}
	,dispose: function() {
		this.shaderProgram = null;
		com_gdx_Buffer.prototype.dispose.call(this);
	}
	,__class__: com_gdx_gl_shaders_Shader
});
var com_gdx_gl_shaders_ColorShader = function() {
	com_gdx_gl_shaders_Shader.call(this);
	var sVertexShader = "\r\nattribute vec3 inVertexPosition;\r\nattribute vec4 inVertexColor;\r\nuniform mat4 WorldMatrix;\r\nuniform mat4 ViewMatrix;\r\nuniform mat4 ProjectionMatrix;\r\nvarying vec4 varVertexColor;\r\nvoid main(void)\r\n{\r\n\r\n\tvarVertexColor = inVertexColor;\r\n    gl_Position =   ProjectionMatrix * ViewMatrix * WorldMatrix * vec4(inVertexPosition, 1.0);\r\n}\r\n";
	var sFragmentShader = "precision mediump float;" + "\r\nvarying vec4 varVertexColor;\r\nvoid main ()\r\n{\r\n\t\t\t\tgl_FragColor = varVertexColor;\t\t\t\r\n\t\r\n\t\r\n}";
	var vertexShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.VERTEX_SHADER);
	com_gdx_Gdx.gl.shaderSource(vertexShader,sVertexShader);
	com_gdx_Gdx.gl.compileShader(vertexShader);
	if(com_gdx_Gdx.gl.getShaderParameter(vertexShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Vert:" + com_gdx_Gdx.gl.getShaderInfoLog(vertexShader),{ fileName : "ColorShader.hx", lineNumber : 74, className : "com.gdx.gl.shaders.ColorShader", methodName : "new"});
		return;
	}
	var fragmentShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.FRAGMENT_SHADER);
	com_gdx_Gdx.gl.shaderSource(fragmentShader,sFragmentShader);
	com_gdx_Gdx.gl.compileShader(fragmentShader);
	if(com_gdx_Gdx.gl.getShaderParameter(fragmentShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Frag:" + com_gdx_Gdx.gl.getShaderInfoLog(fragmentShader),{ fileName : "ColorShader.hx", lineNumber : 80, className : "com.gdx.gl.shaders.ColorShader", methodName : "new"});
		return;
	}
	this.shaderProgram = com_gdx_Gdx.gl.createProgram();
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,vertexShader);
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,fragmentShader);
	com_gdx_Gdx.gl.linkProgram(this.shaderProgram);
	if(com_gdx_Gdx.gl.getProgramParameter(this.shaderProgram,com_gdx_Gdx.gl.LINK_STATUS) == 0) {
		haxe_Log.trace("Unable to initialize the shader program.",{ fileName : "ColorShader.hx", lineNumber : 89, className : "com.gdx.gl.shaders.ColorShader", methodName : "new"});
		return;
	}
	com_gdx_Gdx.gl.useProgram(this.shaderProgram);
	this.vertexAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexPosition");
	this.colorAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexColor");
	haxe_Log.trace(this.vertexAttribute + "," + this.colorAttribute,{ fileName : "ColorShader.hx", lineNumber : 98, className : "com.gdx.gl.shaders.ColorShader", methodName : "new"});
	this.projMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ProjectionMatrix");
	this.worldMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"WorldMatrix");
	this.viewMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ViewMatrix");
};
$hxClasses["com.gdx.gl.shaders.ColorShader"] = com_gdx_gl_shaders_ColorShader;
com_gdx_gl_shaders_ColorShader.__name__ = true;
com_gdx_gl_shaders_ColorShader.__super__ = com_gdx_gl_shaders_Shader;
com_gdx_gl_shaders_ColorShader.prototype = $extend(com_gdx_gl_shaders_Shader.prototype,{
	__class__: com_gdx_gl_shaders_ColorShader
});
var com_gdx_gl_shaders_ShaderCast = function() {
	com_gdx_gl_shaders_Shader.call(this);
	var sVertexShader = "\r\n\r\n\tattribute vec3 aVertexPosition;\r\n\tuniform mat4 world;\r\n    uniform mat4 viewProjection;\r\n\tvarying vec4 vPosition;\r\n\tvoid main(void) \r\n\t{\r\n\t    vPosition=viewProjection *world  * vec4(aVertexPosition, 1.0);\r\n\t    gl_Position = vPosition;\r\n\t\r\n\t}";
	var sFragmentShader = "precision mediump float;" + "\r\n\r\nvec4 pack(float depth)\r\n{\r\n\tconst vec4 bitOffset = vec4(255. * 255. * 255., 255. * 255., 255., 1.);\r\n\tconst vec4 bitMask = vec4(0., 1. / 255., 1. / 255., 1. / 255.);\r\n\tvec4 comp = mod(depth * bitOffset * vec4(254.), vec4(255.)) / vec4(254.);\r\n\tcomp -= comp.xxyz * bitMask;\r\n\treturn comp;\r\n}\r\nvec4 packDepth(float depth) \r\n{\r\n            float depthFrac = fract(depth * 255.0);\r\n            return vec4(depth - depthFrac / 255.0, depthFrac, 1.0, 1.0);\r\n}\r\n\r\n\r\nvec2 packHalf(float depth) \r\n{ \r\n\tconst vec2 bitOffset = vec2(1.0 / 255., 0.);\r\n\tvec2 color = vec2(depth, fract(depth * 255.));\r\n\treturn color - (color.yy * bitOffset);\r\n}\r\n\r\n\r\n\r\n\tvarying vec4 vPosition;\r\n\r\n\tvoid main()\r\n\t{\t\r\n\t\t\r\n\t//int VSM = 0;\r\n\t\r\n\t//if ( VSM == 1 )\r\n\t//{\r\n\t//VSM\r\n\tfloat moment1 = gl_FragCoord.z / gl_FragCoord.w;\r\n\tfloat moment2 = moment1 * moment1;\r\n\tgl_FragColor = vec4(packHalf(moment1), packHalf(moment2));\r\n\t//}\r\n\t//else\r\n\t//{\r\n\t// float depth = vPosition.z / vPosition.w;\r\n\t// depth = depth * 0.5 + 0.5;\r\n\t// gl_FragColor = pack(depth);\r\n\t\t\r\n\t//}\r\n\t\t//\tgl_FragColor = pack(gl_FragCoord.z);\r\n\t\r\n\t\t\r\n\t   \r\n\t}";
	var vertexShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.VERTEX_SHADER);
	com_gdx_Gdx.gl.shaderSource(vertexShader,sVertexShader);
	com_gdx_Gdx.gl.compileShader(vertexShader);
	if(com_gdx_Gdx.gl.getShaderParameter(vertexShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Vert:" + com_gdx_Gdx.gl.getShaderInfoLog(vertexShader),{ fileName : "ShaderCast.hx", lineNumber : 126, className : "com.gdx.gl.shaders.ShaderCast", methodName : "new"});
		return;
	}
	var fragmentShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.FRAGMENT_SHADER);
	com_gdx_Gdx.gl.shaderSource(fragmentShader,sFragmentShader);
	com_gdx_Gdx.gl.compileShader(fragmentShader);
	if(com_gdx_Gdx.gl.getShaderParameter(fragmentShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Frag:" + com_gdx_Gdx.gl.getShaderInfoLog(fragmentShader),{ fileName : "ShaderCast.hx", lineNumber : 132, className : "com.gdx.gl.shaders.ShaderCast", methodName : "new"});
		return;
	}
	this.shaderProgram = com_gdx_Gdx.gl.createProgram();
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,vertexShader);
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,fragmentShader);
	com_gdx_Gdx.gl.linkProgram(this.shaderProgram);
	if(com_gdx_Gdx.gl.getProgramParameter(this.shaderProgram,com_gdx_Gdx.gl.LINK_STATUS) == 0) {
		haxe_Log.trace("Unable to initialize the shader program.",{ fileName : "ShaderCast.hx", lineNumber : 141, className : "com.gdx.gl.shaders.ShaderCast", methodName : "new"});
		return;
	}
	com_gdx_Gdx.gl.useProgram(this.shaderProgram);
	this.vertexAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"aVertexPosition");
	this.projMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"viewProjection");
	this.wordlMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"world");
};
$hxClasses["com.gdx.gl.shaders.ShaderCast"] = com_gdx_gl_shaders_ShaderCast;
com_gdx_gl_shaders_ShaderCast.__name__ = true;
com_gdx_gl_shaders_ShaderCast.__super__ = com_gdx_gl_shaders_Shader;
com_gdx_gl_shaders_ShaderCast.prototype = $extend(com_gdx_gl_shaders_Shader.prototype,{
	Begin: function() {
		com_gdx_Gdx.gl.useProgram(this.shaderProgram);
	}
	,setMatrix: function(proj,world) {
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(com_gdx_Gdx.gl,this.projMatrixUniform,false,proj.asArray());
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(com_gdx_Gdx.gl,this.wordlMatrixUniform,false,world.asArray());
	}
	,End: function() {
		com_gdx_Gdx.gl.useProgram(null);
	}
	,__class__: com_gdx_gl_shaders_ShaderCast
});
var com_gdx_gl_shaders_ShaderCastShadow = function() {
	com_gdx_gl_shaders_Shader.call(this);
	var sVertexShader = "precision mediump float;" + "\r\n\r\n\r\nattribute vec3 inVertexPosition;\r\nattribute vec3 inVertexNormal;\r\nattribute vec4 inVertexColor;\r\nattribute vec2 inTexCoord0;\r\nattribute vec2 inTexCoord1;\r\n\r\nuniform mat4 WorldMatrix;\r\nuniform mat4 ViewMatrix;\r\nuniform mat4 ProjectionMatrix;\r\nuniform mat4 LightMVMatrix;\r\n\r\nuniform vec3 uLightPosition;\r\nvarying vec4 varVertexColor;\r\nvarying vec2 varTexCoord0;\r\nvarying vec2 varTexCoord1;\r\nvarying vec3 varVertexNormal;\r\n\r\n\r\nvarying  vec4 shadowPosition;\r\n\r\n\r\n\r\nvoid main(void) \r\n{\r\n    varTexCoord0 = inTexCoord0;\r\n\tvarTexCoord1 = inTexCoord1;\r\n\tvarVertexColor = inVertexColor;\r\n\tvarVertexNormal = inVertexNormal;\r\n\r\n\t   vec4 worldPos =  WorldMatrix * vec4(inVertexPosition, 1.0);\r\n       vec4 pos =  ProjectionMatrix * ViewMatrix * worldPos;\r\n \r\n\t    mat4 uShadowBiasMatrix = mat4( 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0);\r\n \t\t\r\n\r\n\t\tshadowPosition =   LightMVMatrix  * worldPos;\r\n\t\tgl_Position = pos;\r\n\t\t\r\n\t\r\n\t\r\n\t\r\n//\tvec4 worldPos =  WorldMatrix * vec4(inVertexPosition, 1.0);\r\n  //  shadowPosition =  LightMVMatrix  * worldPos;\r\n  //  gl_Position = ProjectionMatrix * ViewMatrix * WorldMatrix * worldPos;\r\n \r\n}\r\n";
	var sFragmentShader = "precision mediump float;" + "\r\n#define Solid 0\r\n#define Solid2Layer 1\r\n#define LightMap 2\r\n#define DetailMap 3\r\n#define Reflection2Layer 4\r\n#define TransparentAlphaChannel 5\r\n#define TransparentAlphaChannelRef 6\r\n#define TransparentVertexAlpha 7\r\n#define TransparentReflection2Layer 8\r\n\r\n\r\n\r\nuniform sampler2D uTextureUnit0;\r\nuniform sampler2D uTextureUnit1;\r\nuniform sampler2D uFBOTexture;\r\nuniform int uMaterialType;\r\n\r\nvarying vec2 varTexCoord0;\r\nvarying vec2 varTexCoord1;\r\nvarying vec4 varVertexColor;\r\nvarying vec3 varVertexNormal;\r\n\r\nvarying  vec4 shadowPosition;\r\n\r\n\r\nvec4 renderSolid()\r\n{\r\n\tvec4 Color = varVertexColor;\r\n\tColor *= texture2D(uTextureUnit0, varTexCoord0);\r\n\tColor.a = 1.0;\r\n\treturn Color;\r\n}\r\n\r\nvec4 render2LayerSolid()\r\n{\r\n\tfloat BlendFactor = varVertexColor.a;\r\n\t\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\tvec4 Color = Texel0 * BlendFactor + Texel1 * (1.0 - BlendFactor);\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderLightMap()\r\n{\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\t\r\n\tvec4 Color = Texel0 * Texel1 * 4.0;\r\n\tColor.a = Texel0.a * Texel0.a;\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderDetailMap()\r\n{\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\t//vec4 Color = Texel0 ;\r\n\t//Color += Texel1 - 0.2;\r\n//\tvec4 Color =mix(Texel0, Texel1, 0.4);\r\nvec4 Color = Texel0 ;\r\n\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderReflection2Layer()\r\n{\r\n\tvec4 Color = varVertexColor;\r\n\t\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\tColor *= Texel0 * Texel1;\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderTransparent()\r\n{\r\n\tvec4 Color =  vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n\r\n\t\tColor *= texture2D(uTextureUnit0, varTexCoord0);\r\n\r\n\treturn Color;\r\n}\r\n\r\n\r\n\r\nfloat unpack_depth( const in  vec4 rgba_depth ) \r\n\t {\r\n\t\tconst  vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\r\n\t\t float depth = dot( rgba_depth, bit_shift );\r\n\t\treturn depth;\r\n\t}\r\nfloat unpack(vec4 color)\r\n{\r\n\tconst vec4 bitShift = vec4(1. / (255. * 255. * 255.), 1. / (255. * 255.), 1. / 255., 1.);\r\n\treturn dot(color, bitShift);\r\n}\r\n\r\nfloat unpackHalf(vec2 color)\r\n{\r\n\treturn color.x + (color.y / 255.0);\r\n}\r\n\r\nfloat computeShadow(vec4 vPositionFromLight, sampler2D shadowSampler)\r\n{\r\n\tfloat bias = 0.005;\r\n\tvec3 shadowCoordZDivide = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\t\r\n\tfloat depth = unpack_depth(texture2D(shadowSampler, shadowCoordZDivide.xy));\r\n \r\n\t  if(vPositionFromLight.w > 0.1)\r\n\t\t{\r\n\t\t\tif( (shadowCoordZDivide.z) > (depth - bias) )\r\n\t\t\t{\r\n\t\t\t\treturn  0.5;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\treturn 1.;\r\n}\r\n\r\nfloat computeShadowWithPCF(vec4 vPositionFromLight, sampler2D shadowSampler)\r\n{\r\n\tvec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tvec2 uv = 0.5 * depth.xy + vec2(0.5, 0.5);\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat visibility = 1.;\r\n\r\n\tvec2 poissonDisk[4];\r\n\tpoissonDisk[0] = vec2(-0.94201624, -0.39906216);\r\n\tpoissonDisk[1] = vec2(0.94558609, -0.76890725);\r\n\tpoissonDisk[2] = vec2(-0.094184101, -0.92938870);\r\n\tpoissonDisk[3] = vec2(0.34495938, 0.29387760);\r\n\r\n\t// Poisson Sampling\r\n\tfor (int i = 0; i<4; i++){\r\n\t\tif (unpack(texture2D(shadowSampler, uv + poissonDisk[i] / 1500.0))  <  depth.z){\r\n\t\t\tvisibility -= 0.2;\r\n\t\t}\r\n\t}\r\n\treturn visibility;\r\n}\r\n\r\n// Thanks to http://devmaster.net/\r\nfloat ChebychevInequality(vec2 moments, float t)\r\n{\r\n\tif (t <= moments.x)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tfloat variance = moments.y - (moments.x * moments.x);\r\n\tvariance = max(variance, 0.);\r\n\r\n\tfloat d = t - moments.x;\r\n\treturn variance / (variance + d * d);\r\n}\r\n\r\nfloat computeShadowWithVSM(vec4 vPositionFromLight, sampler2D shadowSampler)\r\n{\r\n    vec3 depth = vPositionFromLight.xyz / vPositionFromLight.w;\r\n\tvec2 uv = 0.5 * depth.xy + vec2(0.5, 0.5);\r\n\r\n\tif (uv.x < 0. || uv.x > 1.0 || uv.y < 0. || uv.y > 1.0)\r\n\t{\r\n\t\treturn 1.0;\r\n\t}\r\n\r\n\tvec4 texel = texture2D(shadowSampler, uv);\r\n\r\n\tvec2 moments = vec2(unpackHalf(texel.xy), unpackHalf(texel.zw));\r\n\treturn clamp(1.3 - ChebychevInequality(moments, depth.z), 0., 1.0);\r\n}\r\n\r\nvoid main(void)\r\n{\r\n\r\n\t vec4 FragColor= vec4(1.0, 1.0, 1.0, 1.0);\r\n\t\r\n if (uMaterialType == Solid)\r\n\t\tFragColor = renderSolid();\r\n\telse if(uMaterialType == Solid2Layer)\r\n\t\tFragColor = render2LayerSolid();\r\n\telse if(uMaterialType == LightMap)\r\n\t\tFragColor = renderLightMap();\r\n\telse if(uMaterialType == DetailMap)\r\n\t\tFragColor = renderDetailMap();\r\n\telse if(uMaterialType == Reflection2Layer)\r\n\t\tFragColor = renderReflection2Layer();\r\n\telse if(uMaterialType == TransparentAlphaChannel)\r\n\t\tFragColor = renderTransparent();\r\n\telse if(uMaterialType == TransparentAlphaChannelRef)\r\n\t{\r\n\t\tvec4 Color = renderTransparent();\r\n\t\t\r\n\t\tif (Color.a < 0.4)\r\n\t\t\tdiscard;\r\n\t\t\r\n\t\tFragColor = Color;\r\n\t}\r\n\telse if(uMaterialType == TransparentVertexAlpha)\r\n\t{\r\n\t\tvec4 Color = renderTransparent();\r\n\t\tColor.a = varVertexColor.a;\r\n\t\t\r\n\t\tFragColor = Color;\r\n\t}\r\n\telse if(uMaterialType == TransparentReflection2Layer)\r\n\t{\r\n\t\tvec4 Color = renderReflection2Layer();\r\n\t\tColor.a = varVertexColor.a;\r\n\t\t\r\n\t\tFragColor = Color;\r\n\t}\r\n\telse\r\n\t\tFragColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n\t\t\r\n   \r\n  // float bias = 0.00000000000001;\r\n  \r\n // float shadow = 1.;\r\n  \r\n\r\n \r\n\t\t\t\t\t\r\n\t\t\r\n\t\t float shadow = 1.0;\r\n\t  \r\n\t\t shadow = computeShadowWithVSM(shadowPosition, uFBOTexture);\r\n\t\t \r\n\t\t\r\n\tvec4 LightColor = vec4(1.0,1.0,1.0,0.0);\r\n\r\n\t\r\n\r\n    gl_FragColor =  shadow * FragColor * LightColor;\r\n\t\r\n\r\n}";
	var vertexShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.VERTEX_SHADER);
	com_gdx_Gdx.gl.shaderSource(vertexShader,sVertexShader);
	com_gdx_Gdx.gl.compileShader(vertexShader);
	if(com_gdx_Gdx.gl.getShaderParameter(vertexShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Vert:" + com_gdx_Gdx.gl.getShaderInfoLog(vertexShader),{ fileName : "ShaderCastShadow.hx", lineNumber : 371, className : "com.gdx.gl.shaders.ShaderCastShadow", methodName : "new"});
		return;
	}
	var fragmentShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.FRAGMENT_SHADER);
	com_gdx_Gdx.gl.shaderSource(fragmentShader,sFragmentShader);
	com_gdx_Gdx.gl.compileShader(fragmentShader);
	if(com_gdx_Gdx.gl.getShaderParameter(fragmentShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Frag:" + com_gdx_Gdx.gl.getShaderInfoLog(fragmentShader),{ fileName : "ShaderCastShadow.hx", lineNumber : 377, className : "com.gdx.gl.shaders.ShaderCastShadow", methodName : "new"});
		return;
	}
	this.shaderProgram = com_gdx_Gdx.gl.createProgram();
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,vertexShader);
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,fragmentShader);
	com_gdx_Gdx.gl.linkProgram(this.shaderProgram);
	if(com_gdx_Gdx.gl.getProgramParameter(this.shaderProgram,com_gdx_Gdx.gl.LINK_STATUS) == 0) {
		haxe_Log.trace("Unable to initialize the shader program.",{ fileName : "ShaderCastShadow.hx", lineNumber : 386, className : "com.gdx.gl.shaders.ShaderCastShadow", methodName : "new"});
		return;
	}
	com_gdx_Gdx.gl.useProgram(this.shaderProgram);
	this.vertexAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexPosition");
	this.texCoord0Attribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inTexCoord0");
	this.texCoord1Attribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inTexCoord1");
	this.colorAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexColor");
	this.normalAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexNormal");
	this.projMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ProjectionMatrix");
	this.worldMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"WorldMatrix");
	this.viewMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ViewMatrix");
	this.LightMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"LightMVMatrix");
	this.texture0Uniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uTextureUnit0");
	this.texture1Uniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uTextureUnit1");
	this.FBOTexture = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uFBOTexture");
	this.MaterialType = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uMaterialType");
	this.setMaterialType(0);
	this.shadow = null;
	haxe_Log.trace(this.vertexAttribute + "," + this.colorAttribute + "," + this.texCoord0Attribute,{ fileName : "ShaderCastShadow.hx", lineNumber : 417, className : "com.gdx.gl.shaders.ShaderCastShadow", methodName : "new"});
};
$hxClasses["com.gdx.gl.shaders.ShaderCastShadow"] = com_gdx_gl_shaders_ShaderCastShadow;
com_gdx_gl_shaders_ShaderCastShadow.__name__ = true;
com_gdx_gl_shaders_ShaderCastShadow.__super__ = com_gdx_gl_shaders_Shader;
com_gdx_gl_shaders_ShaderCastShadow.prototype = $extend(com_gdx_gl_shaders_Shader.prototype,{
	Bind: function(view,proj,world) {
		com_gdx_Gdx.gl.useProgram(this.shaderProgram);
		if(this.shadow != null) {
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(com_gdx_Gdx.gl,this.LightMatrixUniform,false,this.shadow.lightMatrix.asArray());
			this.shadow.bindBuffer(5);
			com_gdx_Gdx.gl.uniform1i(this.FBOTexture,5);
		}
		this.setProjMatrix(proj);
		this.setViewMatrix(view);
		this.setWorldMatrix(world);
	}
	,__class__: com_gdx_gl_shaders_ShaderCastShadow
});
var com_gdx_gl_shaders_ShaderDefault = function() {
	com_gdx_gl_shaders_Shader.call(this);
	var sVertexShader = "\r\nattribute vec3 inVertexPosition;\r\nattribute vec4 inVertexColor;\r\nattribute vec2 inTexCoord0;\r\nattribute vec2 inTexCoord1;\r\n\r\n\r\n\r\nuniform mat4 WorldMatrix;\r\nuniform mat4 ViewMatrix;\r\nuniform mat4 ProjectionMatrix;\r\n\r\n\r\n\r\nvarying vec4 varVertexColor;\r\n\r\nvarying vec2 varTexCoord0;\r\nvarying vec2 varTexCoord1;\r\n\r\n\r\n\r\n\r\nvoid main(void)\r\n{\r\n\r\n\tvarTexCoord0 = inTexCoord0;\r\n\tvarTexCoord1 = inTexCoord1;\r\n\tvarVertexColor = inVertexColor;\r\n    gl_Position =   ProjectionMatrix * ViewMatrix * WorldMatrix * vec4(inVertexPosition, 1.0);\r\n}\r\n";
	var sFragmentShader = "precision mediump float;" + "\r\n\r\n#define Solid 0\r\n#define Solid2Layer 1\r\n#define LightMap 2\r\n#define DetailMap 3\r\n#define Reflection2Layer 4\r\n#define TransparentAlphaChannel 5\r\n#define TransparentAlphaChannelRef 6\r\n#define TransparentVertexAlpha 7\r\n#define TransparentReflection2Layer 8\r\n\r\n\r\n#define FOGMODE_EXP 1.\r\n#define FOGMODE_EXP2 2.\r\n#define FOGMODE_LINEAR 3.\r\n#define E 2.71828\r\n\r\n\r\n\r\n\r\n/* Uniforms */\r\n\r\nuniform int uMaterialType;\r\nuniform int uUseFog;\r\nuniform vec4 uFogInfos;\r\nuniform vec3 uFogColor;\r\n\r\nuniform sampler2D uTextureUnit0;\r\nuniform sampler2D uTextureUnit1;\r\n\r\n\r\n\r\nvarying vec2 varTexCoord0;\r\nvarying vec2 varTexCoord1;\r\nvarying vec4 varVertexColor;\r\n\r\n\r\n vec4 pack_depth( const in  float depth ) {\r\n\t\tconst  vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\r\n\t\tconst  vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\r\n\t\t vec4 res = fract( depth * bit_shift );\r\n\t\tres -= res.xxyz * bit_mask;\r\n\t\treturn res;\r\n\t}\r\n\t\r\n\r\nvec4 renderSolid()\r\n{\r\n\tvec4 Color = varVertexColor;\r\n\tColor *= texture2D(uTextureUnit0, varTexCoord0);\r\n\tColor.a = 1.0;\r\n\treturn Color;\r\n}\r\n\r\nvec4 render2LayerSolid()\r\n{\r\n\tfloat BlendFactor = varVertexColor.a;\r\n\t\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\tvec4 Color = Texel0 * BlendFactor + Texel1 * (1.0 - BlendFactor);\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderLightMap()\r\n{\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\t\r\n\tvec4 Color = Texel0 * Texel1 * 4.0;\r\n\tColor.a = Texel0.a * Texel0.a;\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderDetailMap()\r\n{\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\t//vec4 Color = Texel0 ;\r\n\t//Color += Texel1 - 0.2;\r\n//\tvec4 Color =mix(Texel0, Texel1, 0.4);\r\nvec4 Color = Texel0 * Texel1;\r\n\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderReflection2Layer()\r\n{\r\n\tvec4 Color = varVertexColor;\r\n\t\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\tColor *= Texel0 * Texel1;\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderTransparent()\r\n{\r\n\tvec4 Color =  vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n\r\n\t\tColor *= texture2D(uTextureUnit0, varTexCoord0);\r\n\r\n\treturn Color;\r\n}\r\n\r\nfloat calcFogFactor() {\r\n\r\n    // gets distance from camera to vertex\r\n    float fogDistance = gl_FragCoord.z / gl_FragCoord.w;\r\n\r\n    float fogCoeff = 1.0;\r\n    float fogStart = uFogInfos.y;\r\n    float fogEnd = uFogInfos.z;\r\n    float fogDensity = uFogInfos.w;\r\n\r\n    if (FOGMODE_LINEAR == uFogInfos.x) {\r\n        fogCoeff = (fogEnd - fogDistance) / (fogEnd - fogStart);\r\n    }\r\n    else if (FOGMODE_EXP == uFogInfos.x) {\r\n        fogCoeff = 1.0 / pow(E, fogDistance * fogDensity);\r\n    }\r\n    else if (FOGMODE_EXP2 == uFogInfos.x) {\r\n        fogCoeff = 1.0 / pow(E, fogDistance * fogDistance * fogDensity * fogDensity);\r\n    }\r\n\r\n    return clamp(fogCoeff, 0.0, 1.0);\r\n}\r\nvoid main ()\r\n{\r\n   vec4 FragColor= vec4(1.0, 1.0, 1.0, 1.0);\r\n\t\r\n if (uMaterialType == Solid)\r\n\t\tFragColor = renderSolid();\r\n\telse if(uMaterialType == Solid2Layer)\r\n\t\tFragColor = render2LayerSolid();\r\n\telse if(uMaterialType == LightMap)\r\n\t\tFragColor = renderLightMap();\r\n\telse if(uMaterialType == DetailMap)\r\n\t\tFragColor = renderDetailMap();\r\n\telse if(uMaterialType == Reflection2Layer)\r\n\t\tFragColor = renderReflection2Layer();\r\n\telse if(uMaterialType == TransparentAlphaChannel)\r\n\t\tFragColor = renderTransparent();\r\n\telse if(uMaterialType == TransparentAlphaChannelRef)\r\n\t{\r\n\t\tvec4 Color = renderTransparent();\r\n\t\t\r\n\t\tif (Color.a < 0.4)\r\n\t\t\tdiscard;\r\n\t\t\r\n\t\tFragColor = Color;\r\n\t}\r\n\telse if(uMaterialType == TransparentVertexAlpha)\r\n\t{\r\n\t\tvec4 Color = renderTransparent();\r\n\t\tColor.a = varVertexColor.a;\r\n\t\t\r\n\t\tFragColor = Color;\r\n\t}\r\n\telse if(uMaterialType == TransparentReflection2Layer)\r\n\t{\r\n\t\tvec4 Color = renderReflection2Layer();\r\n\t\tColor.a = varVertexColor.a;\r\n\t\t\r\n\t\tFragColor = Color;\r\n\t}\r\n\telse\r\n\t\tFragColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\t\t\r\n\r\n\t\t\r\n   \t    // vec4 fog_color = FragColor;\r\n       //  float fog = calcFogFactor();\r\n       //  fog_color.rgb = fog * fog_color.rgb + (1.0 - fog) * uFogColor;\r\n\t\r\n\t\t\r\n\t\t\r\n\t\tgl_FragColor = FragColor;// +pack_depth( gl_FragCoord.z );\r\n\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\t}";
	var vertexShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.VERTEX_SHADER);
	com_gdx_Gdx.gl.shaderSource(vertexShader,sVertexShader);
	com_gdx_Gdx.gl.compileShader(vertexShader);
	if(com_gdx_Gdx.gl.getShaderParameter(vertexShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Vert:" + com_gdx_Gdx.gl.getShaderInfoLog(vertexShader),{ fileName : "ShaderDefault.hx", lineNumber : 279, className : "com.gdx.gl.shaders.ShaderDefault", methodName : "new"});
		return;
	}
	var fragmentShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.FRAGMENT_SHADER);
	com_gdx_Gdx.gl.shaderSource(fragmentShader,sFragmentShader);
	com_gdx_Gdx.gl.compileShader(fragmentShader);
	if(com_gdx_Gdx.gl.getShaderParameter(fragmentShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Frag:" + com_gdx_Gdx.gl.getShaderInfoLog(fragmentShader),{ fileName : "ShaderDefault.hx", lineNumber : 285, className : "com.gdx.gl.shaders.ShaderDefault", methodName : "new"});
		return;
	}
	this.shaderProgram = com_gdx_Gdx.gl.createProgram();
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,vertexShader);
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,fragmentShader);
	com_gdx_Gdx.gl.linkProgram(this.shaderProgram);
	if(com_gdx_Gdx.gl.getProgramParameter(this.shaderProgram,com_gdx_Gdx.gl.LINK_STATUS) == 0) {
		haxe_Log.trace("Unable to initialize the shader program.",{ fileName : "ShaderDefault.hx", lineNumber : 294, className : "com.gdx.gl.shaders.ShaderDefault", methodName : "new"});
		return;
	}
	com_gdx_Gdx.gl.useProgram(this.shaderProgram);
	this.vertexAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexPosition");
	this.texCoord0Attribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inTexCoord0");
	this.texCoord1Attribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inTexCoord1");
	this.colorAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexColor");
	this.projMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ProjectionMatrix");
	this.worldMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"WorldMatrix");
	this.viewMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ViewMatrix");
	this.texture0Uniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uTextureUnit0");
	this.texture1Uniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uTextureUnit1");
	this.MaterialType = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uMaterialType");
	this.FogInfos = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uFogInfos");
	this.FogColor = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uFogColor");
	this.UseFog = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uUseFog");
	this.setMaterialType(0);
	this.preSets();
	haxe_Log.trace(this.vertexAttribute + "," + this.colorAttribute + "," + this.texCoord0Attribute,{ fileName : "ShaderDefault.hx", lineNumber : 318, className : "com.gdx.gl.shaders.ShaderDefault", methodName : "new"});
};
$hxClasses["com.gdx.gl.shaders.ShaderDefault"] = com_gdx_gl_shaders_ShaderDefault;
com_gdx_gl_shaders_ShaderDefault.__name__ = true;
com_gdx_gl_shaders_ShaderDefault.__super__ = com_gdx_gl_shaders_Shader;
com_gdx_gl_shaders_ShaderDefault.prototype = $extend(com_gdx_gl_shaders_Shader.prototype,{
	__class__: com_gdx_gl_shaders_ShaderDefault
});
var com_gdx_gl_shaders_ShaderGrass = function() {
	com_gdx_gl_shaders_Shader.call(this);
	var sVertexShader = "\r\n\r\nmat3 mat4Tomat3(mat4 m4) \r\n{\r\n  return mat3(\r\n      m4[0][0], m4[0][1], m4[0][2],\r\n      m4[1][0], m4[1][1], m4[1][2],\r\n      m4[2][0], m4[2][1], m4[2][2]);\r\n}\r\n\r\nattribute vec3 inVertexPosition;\r\nattribute vec4 inVertexColor;\r\nattribute vec2 inTexCoord0;\r\n\r\n\r\n\r\n\r\n\r\n\r\nuniform mat4 WorldMatrix;\r\nuniform mat4 ViewMatrix;\r\nuniform mat4 ProjectionMatrix;\r\n\r\nuniform float time;\r\n\r\n\r\n\r\n\r\nvarying vec4 varVertexColor;\r\nvarying vec2 varTexCoord0;\r\n\r\n\r\n\r\n\r\n\r\n\r\nvoid main(void)\r\n{\r\n\tvarTexCoord0 = inTexCoord0;\r\n\t  \r\n    \r\n\tfloat fadeRange=1000.0;\r\n        float frequency=0.5;\r\n        vec3 direction=vec3(0.0,0.3,0.2);\r\n\r\n        vec3 camPos =  -ViewMatrix[3].xyz * mat4Tomat3(ViewMatrix);\r\n\t\r\n\r\n\t\tvec4 displacedVertex = vec4(inVertexPosition,1.0);\r\n\t\t\r\n\t\t\r\n\t\t\r\n\r\n\tfloat dist = distance(camPos.xz, displacedVertex.xz);\r\n        varVertexColor = inVertexColor;\r\n\tvarVertexColor.a = 2.0 - (2.0 * dist / fadeRange);\r\n\tfloat oldposx = displacedVertex.x;\r\n\tif (varTexCoord0.y == 0.0)\r\n\t{\r\n\t\tfloat offset = sin(time + oldposx * frequency);\r\n\t\tdisplacedVertex.x += direction.x * offset;\r\n\t\tdisplacedVertex.y += direction.y * offset;\r\n\t\tdisplacedVertex.z += direction.z * offset;\r\n\t}\r\n\r\n\r\n\r\n    \r\n\t\r\n\t\r\n   gl_Position =   ProjectionMatrix * ViewMatrix * WorldMatrix * displacedVertex;\r\n\t\r\n}";
	var sFragmentShader = "precision mediump float;" + "\r\n\r\nuniform sampler2D uTextureUnit0;\r\nvarying vec2 varTexCoord0;\r\nvarying vec4 varVertexColor;\r\n\r\n\r\n\r\nvoid main ()\r\n{\r\n\t\t\t\tgl_FragColor = varVertexColor * texture2D(uTextureUnit0, varTexCoord0);\r\n\t\t\t\tif(gl_FragColor.a < 0.5)\r\n                discard;\r\n\t\t\r\n\t\t\r\n\t\r\n\t\r\n}";
	var vertexShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.VERTEX_SHADER);
	com_gdx_Gdx.gl.shaderSource(vertexShader,sVertexShader);
	com_gdx_Gdx.gl.compileShader(vertexShader);
	if(com_gdx_Gdx.gl.getShaderParameter(vertexShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Vert:" + com_gdx_Gdx.gl.getShaderInfoLog(vertexShader),{ fileName : "ShaderGrass.hx", lineNumber : 145, className : "com.gdx.gl.shaders.ShaderGrass", methodName : "new"});
		return;
	}
	var fragmentShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.FRAGMENT_SHADER);
	com_gdx_Gdx.gl.shaderSource(fragmentShader,sFragmentShader);
	com_gdx_Gdx.gl.compileShader(fragmentShader);
	if(com_gdx_Gdx.gl.getShaderParameter(fragmentShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Frag:" + com_gdx_Gdx.gl.getShaderInfoLog(fragmentShader),{ fileName : "ShaderGrass.hx", lineNumber : 151, className : "com.gdx.gl.shaders.ShaderGrass", methodName : "new"});
		return;
	}
	this.shaderProgram = com_gdx_Gdx.gl.createProgram();
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,vertexShader);
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,fragmentShader);
	com_gdx_Gdx.gl.linkProgram(this.shaderProgram);
	if(com_gdx_Gdx.gl.getProgramParameter(this.shaderProgram,com_gdx_Gdx.gl.LINK_STATUS) == 0) {
		haxe_Log.trace("Unable to initialize the shader program.",{ fileName : "ShaderGrass.hx", lineNumber : 160, className : "com.gdx.gl.shaders.ShaderGrass", methodName : "new"});
		return;
	}
	com_gdx_Gdx.gl.useProgram(this.shaderProgram);
	this.vertexAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexPosition");
	this.texCoord0Attribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inTexCoord0");
	this.colorAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexColor");
	this.projMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ProjectionMatrix");
	this.worldMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"WorldMatrix");
	this.viewMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ViewMatrix");
	this.texture0Uniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uTextureUnit0");
	this.timeUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"time");
	this.preSets();
	haxe_Log.trace(this.vertexAttribute + "," + this.colorAttribute + "," + this.texCoord0Attribute,{ fileName : "ShaderGrass.hx", lineNumber : 182, className : "com.gdx.gl.shaders.ShaderGrass", methodName : "new"});
};
$hxClasses["com.gdx.gl.shaders.ShaderGrass"] = com_gdx_gl_shaders_ShaderGrass;
com_gdx_gl_shaders_ShaderGrass.__name__ = true;
com_gdx_gl_shaders_ShaderGrass.__super__ = com_gdx_gl_shaders_Shader;
com_gdx_gl_shaders_ShaderGrass.prototype = $extend(com_gdx_gl_shaders_Shader.prototype,{
	preSets: function() {
		com_gdx_Gdx.gl.uniform1f(this.timeUniform,com_gdx_Gdx.Instance().getTimer() / 1000);
	}
	,__class__: com_gdx_gl_shaders_ShaderGrass
});
var com_gdx_gl_shaders_ShaderLight = function() {
	com_gdx_gl_shaders_Shader.call(this);
	var sVertexShader = "\r\nattribute vec3 inVertexPosition;\r\nattribute vec3 inVertexNormal;\r\nattribute vec4 inVertexColor;\r\nattribute vec2 inTexCoord0;\r\nattribute vec2 inTexCoord1;\r\n\r\n\r\n\r\nuniform mat4 WorldMatrix;\r\nuniform mat4 ViewMatrix;\r\nuniform mat4 ProjectionMatrix;\r\n\r\nuniform mat4 NormalMatrix;\r\n\r\n\r\n\r\nvarying vec4 varVertexColor;\r\nvarying vec3 varVertexNormal;\r\nvarying vec2 varTexCoord0;\r\nvarying vec2 varTexCoord1;\r\nvarying vec3 varWorldPos;\r\n\r\n\r\n\r\n\r\nvoid main(void)\r\n{\r\n\t\r\n\t\r\n\t\r\n\tvarVertexNormal = (WorldMatrix * vec4(inVertexNormal, 0.0)).xyz;\r\n\tvarWorldPos=(WorldMatrix * vec4(inVertexPosition, 1.0)).xyz;\r\n\t\r\n\tvarTexCoord0 = inTexCoord0;\r\n\tvarTexCoord1 = inTexCoord1;\r\n\tvarVertexColor = inVertexColor;\r\n    gl_Position =   ProjectionMatrix * ViewMatrix * vec4(varWorldPos, 1.0); //WorldMatrix * vec4(inVertexPosition, 1.0);\r\n}\r\n";
	var sFragmentShader = "precision mediump float;" + "\r\n\r\n#define Solid 0\r\n#define Solid2Layer 1\r\n#define LightMap 2\r\n#define DetailMap 3\r\n#define Reflection2Layer 4\r\n#define TransparentAlphaChannel 5\r\n#define TransparentAlphaChannelRef 6\r\n#define TransparentVertexAlpha 7\r\n#define TransparentReflection2Layer 8\r\n\r\n\r\n\r\n\r\n\r\n/* Uniforms */\r\n\r\nuniform int uMaterialType;\r\n\r\n\r\nuniform sampler2D uTextureUnit0;\r\nuniform sampler2D uTextureUnit1;\r\n\r\nuniform float specularIntensity;\r\nuniform float specularPower;\r\nuniform vec3  eyePosition;\r\n\r\n\r\n\r\nvarying vec2 varTexCoord0;\r\nvarying vec2 varTexCoord1;\r\nvarying vec4 varVertexColor;\r\nvarying vec3 varVertexNormal;\r\nvarying vec3 varWorldPos;\r\n\r\n\r\nstruct BaseLight\r\n{\r\n\tvec3 color;\r\n\tfloat intensity;\r\n};\r\n\r\nstruct DirectionalLight\r\n{\r\n BaseLight base;\r\n vec3 direction;\r\n};\r\nuniform DirectionalLight directionalLight;\r\nuniform vec3 ambientLight;\r\n\r\n\r\nvec4 calcLight(BaseLight base , vec3 direction, vec3 normal)\r\n{\r\n\tfloat  diffuseFactor = dot (normal, direction);\r\n\t\r\n\tvec4 diffuseColor = vec4(0.0, 0.0, 0.0, 0.0);\r\n\tvec4 specularColor = vec4(0.0, 0.0, 0.0, 0.0);\r\n\t\r\n\tif (diffuseFactor > 0.0)\r\n\t{\r\n\t\tdiffuseColor = vec4 (base.color, 1.0) * base.intensity * diffuseFactor;\r\n\t\tvec3 directionToEye = normalize (eyePosition - varWorldPos);\r\n\t\t//vec3 reflectDirection = normalize(reflect(-direction, normal));\r\n\t\t\r\n\t\t vec3 halfDirection = normalize(directionToEye - (-direction));\r\n\t\t \r\n\t\tfloat specularFactor = dot(halfDirection, normal);\r\n\t\t  \r\n\t\t//float specularFactor = dot (directionToEye, reflectDirection);\r\n\t\t\r\n\t\tspecularFactor = pow(specularFactor, specularPower);\r\n\t\tif (specularFactor > 0.0)\r\n\t\t{\r\n\t\t\tspecularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\treturn diffuseColor   + specularColor;\r\n}\r\nvec4 calDirectionalLight(DirectionalLight directionalLight, vec3 normal)\r\n{\r\n\treturn calcLight(directionalLight.base, directionalLight.direction, normal);\r\n}\r\n\r\n\r\nvec4 renderSolid()\r\n{\r\n\tvec4 Color = varVertexColor;\r\n\tColor *= texture2D(uTextureUnit0, varTexCoord0);\r\n\tColor.a = 1.0;\r\n\treturn Color;\r\n}\r\n\r\nvec4 render2LayerSolid()\r\n{\r\n\tfloat BlendFactor = varVertexColor.a;\r\n\t\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\tvec4 Color = Texel0 * BlendFactor + Texel1 * (1.0 - BlendFactor);\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderLightMap()\r\n{\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\t\r\n\tvec4 Color = Texel0 * Texel1 * 4.0;\r\n\tColor.a = Texel0.a * Texel0.a;\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderDetailMap()\r\n{\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\tvec4 Color = Texel0 ;\r\n\tColor += Texel1 - 0.4;\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderReflection2Layer()\r\n{\r\n\tvec4 Color = varVertexColor;\r\n\t\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\tColor *= Texel0 * Texel1;\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderTransparent()\r\n{\r\n\tvec4 Color = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n\r\n\t\tColor *= texture2D(uTextureUnit0, varTexCoord0);\r\n\r\n\treturn Color;\r\n}\r\n\r\n\r\nvoid main ()\r\n{\r\n   vec4 textureColor= vec4(1.0, 1.0, 1.0, 1.0);\r\n\t\r\n if (uMaterialType == Solid)\r\n\t\ttextureColor = renderSolid();\r\n\telse if(uMaterialType == Solid2Layer)\r\n\t\ttextureColor = render2LayerSolid();\r\n\telse if(uMaterialType == LightMap)\r\n\t\ttextureColor = renderLightMap();\r\n\telse if(uMaterialType == DetailMap)\r\n\t\ttextureColor = renderDetailMap();\r\n\telse if(uMaterialType == Reflection2Layer)\r\n\t\ttextureColor = renderReflection2Layer();\r\n\telse if(uMaterialType == TransparentAlphaChannel)\r\n\t\ttextureColor = renderTransparent();\r\n\telse if(uMaterialType == TransparentAlphaChannelRef)\r\n\t{\r\n\t\tvec4 Color = renderTransparent();\r\n\t\t\r\n\t\tif (Color.a < 0.5)\r\n\t\t\tdiscard;\r\n\t\t\r\n\t\ttextureColor = Color;\r\n\t}\r\n\telse if(uMaterialType == TransparentVertexAlpha)\r\n\t{\r\n\t\tvec4 Color = renderTransparent();\r\n\t\tColor.a = varVertexColor.a;\r\n\t\t\r\n\t\ttextureColor = Color;\r\n\t}\r\n\telse if(uMaterialType == TransparentReflection2Layer)\r\n\t{\r\n\t\tvec4 Color = renderReflection2Layer();\r\n\t\tColor.a = varVertexColor.a;\r\n\t\t\r\n\t\ttextureColor = Color;\r\n\t}\r\n\telse\r\n\t\ttextureColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n\t\t\r\n\t\t\r\n\t    vec4 totalLight = vec4 (ambientLight, 1.0);\r\n\t\r\n\t\tvec3 normal = normalize(varVertexNormal );\r\n\t\t\t\r\n\t\ttotalLight += calDirectionalLight(directionalLight, normal);\r\n\t\t\r\n\t\tgl_FragColor = textureColor * totalLight;\r\n\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\t}";
	var vertexShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.VERTEX_SHADER);
	com_gdx_Gdx.gl.shaderSource(vertexShader,sVertexShader);
	com_gdx_Gdx.gl.compileShader(vertexShader);
	if(com_gdx_Gdx.gl.getShaderParameter(vertexShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Vert:" + com_gdx_Gdx.gl.getShaderInfoLog(vertexShader),{ fileName : "ShaderLight.hx", lineNumber : 322, className : "com.gdx.gl.shaders.ShaderLight", methodName : "new"});
		return;
	}
	var fragmentShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.FRAGMENT_SHADER);
	com_gdx_Gdx.gl.shaderSource(fragmentShader,sFragmentShader);
	com_gdx_Gdx.gl.compileShader(fragmentShader);
	if(com_gdx_Gdx.gl.getShaderParameter(fragmentShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Frag:" + com_gdx_Gdx.gl.getShaderInfoLog(fragmentShader),{ fileName : "ShaderLight.hx", lineNumber : 328, className : "com.gdx.gl.shaders.ShaderLight", methodName : "new"});
		return;
	}
	this.shaderProgram = com_gdx_Gdx.gl.createProgram();
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,vertexShader);
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,fragmentShader);
	com_gdx_Gdx.gl.linkProgram(this.shaderProgram);
	if(com_gdx_Gdx.gl.getProgramParameter(this.shaderProgram,com_gdx_Gdx.gl.LINK_STATUS) == 0) {
		haxe_Log.trace("Unable to initialize the shader program.",{ fileName : "ShaderLight.hx", lineNumber : 337, className : "com.gdx.gl.shaders.ShaderLight", methodName : "new"});
		return;
	}
	com_gdx_Gdx.gl.useProgram(this.shaderProgram);
	this.vertexAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexPosition");
	this.texCoord0Attribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inTexCoord0");
	this.texCoord1Attribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inTexCoord1");
	this.colorAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexColor");
	this.normalAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexNormal");
	this.projMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ProjectionMatrix");
	this.worldMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"WorldMatrix");
	this.viewMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ViewMatrix");
	this.normalMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"NormalMatrix");
	this.texture0Uniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uTextureUnit0");
	this.texture1Uniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uTextureUnit1");
	this.MaterialType = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uMaterialType");
	this.specularIntensityUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"specularIntensity");
	this.specularPowerIntensityUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"specularPower");
	this.eyePositionIntensityUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"eyePosition");
	this.ambientLightUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ambientLight");
	this.colorUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"directionalLight.base.color");
	this.intensityUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"directionalLight.base.intensity");
	this.directionUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"directionalLight.direction");
	this.direction = new com_gdx_math_Vector3(0,-1,0);
	this.intensity = 0.1;
	this.color = new com_gdx_color_Color3(0.1,0.1,0.1);
	this.ambient = new com_gdx_color_Color3(0.01,0.01,0.01);
	this.specularIntensity = 0.2;
	this.specularPower = 1;
	this.camarePosition = com_gdx_math_Vector3.get_zero();
	this.setMaterialType(0);
	haxe_Log.trace(this.vertexAttribute + "," + this.colorAttribute + "," + this.texCoord0Attribute + "," + this.normalAttribute,{ fileName : "ShaderLight.hx", lineNumber : 381, className : "com.gdx.gl.shaders.ShaderLight", methodName : "new"});
};
$hxClasses["com.gdx.gl.shaders.ShaderLight"] = com_gdx_gl_shaders_ShaderLight;
com_gdx_gl_shaders_ShaderLight.__name__ = true;
com_gdx_gl_shaders_ShaderLight.__super__ = com_gdx_gl_shaders_Shader;
com_gdx_gl_shaders_ShaderLight.prototype = $extend(com_gdx_gl_shaders_Shader.prototype,{
	Bind: function(view,proj,world) {
		com_gdx_gl_shaders_Shader.prototype.Bind.call(this,view,proj,world);
		com_gdx_Gdx.gl.uniform3f(this.ambientLightUniform,this.ambient.r,this.ambient.g,this.ambient.b);
		com_gdx_Gdx.gl.uniform3f(this.colorUniform,this.color.r,this.color.g,this.color.b);
		com_gdx_Gdx.gl.uniform1f(this.intensityUniform,this.intensity);
		com_gdx_Gdx.gl.uniform1f(this.specularIntensityUniform,this.specularIntensity);
		com_gdx_Gdx.gl.uniform1f(this.specularPowerIntensityUniform,this.specularPower);
		com_gdx_Gdx.gl.uniform3f(this.eyePositionIntensityUniform,this.camarePosition.x,this.camarePosition.y,this.camarePosition.z);
		this.direction.normalize();
		com_gdx_Gdx.gl.uniform3f(this.directionUniform,this.direction.x,this.direction.y,this.direction.z);
	}
	,__class__: com_gdx_gl_shaders_ShaderLight
});
var com_gdx_gl_shaders_ShaderPointLight = function() {
	this.COLOR_DEPTH = 256;
	com_gdx_gl_shaders_Shader.call(this);
	var sVertexShader = "\r\nattribute vec3 inVertexPosition;\r\nattribute vec3 inVertexNormal;\r\nattribute vec4 inVertexColor;\r\nattribute vec2 inTexCoord0;\r\nattribute vec2 inTexCoord1;\r\n\r\n\r\n\r\nuniform mat4 WorldMatrix;\r\nuniform mat4 ViewMatrix;\r\nuniform mat4 ProjectionMatrix;\r\n\r\nuniform mat4 NormalMatrix;\r\n\r\n\r\n\r\nvarying vec4 varVertexColor;\r\nvarying vec3 varVertexNormal;\r\nvarying vec2 varTexCoord0;\r\nvarying vec2 varTexCoord1;\r\nvarying vec3 varWorldPos;\r\n\r\n\r\n\r\n\r\nvoid main(void)\r\n{\r\n\t\r\n\t\r\n\t\r\n\tvarVertexNormal = (WorldMatrix * vec4(inVertexNormal, 0.0)).xyz;\r\n\tvarWorldPos =(WorldMatrix * vec4(inVertexPosition, 1.0)).xyz;\r\n\t\r\n\tvarTexCoord0 = inTexCoord0;\r\n\tvarTexCoord1 = inTexCoord1;\r\n\tvarVertexColor = inVertexColor;\r\n    gl_Position =   ProjectionMatrix * ViewMatrix * vec4(varWorldPos, 1.0); //WorldMatrix * vec4(inVertexPosition, 1.0);\r\n}\r\n";
	var sFragmentShader = "precision mediump float;" + "\r\n\r\n#define Solid 0\r\n#define Solid2Layer 1\r\n#define LightMap 2\r\n#define DetailMap 3\r\n#define Reflection2Layer 4\r\n#define TransparentAlphaChannel 5\r\n#define TransparentAlphaChannelRef 6\r\n#define TransparentVertexAlpha 7\r\n#define TransparentReflection2Layer 8\r\n\r\n/* Uniforms */\r\n\r\nuniform int uMaterialType;\r\n\r\n\r\nuniform sampler2D uTextureUnit0;\r\nuniform sampler2D uTextureUnit1;\r\n\r\n\r\nuniform vec3  eyePosition;\r\n\r\nuniform float specularIntensity;\r\nuniform float specularPower;\r\n\r\nvarying vec2 varTexCoord0;\r\nvarying vec2 varTexCoord1;\r\nvarying vec4 varVertexColor;\r\nvarying vec3 varVertexNormal;\r\nvarying vec3 varWorldPos;\r\n\r\n\r\nstruct BaseLight\r\n{\r\n\tvec3 color;\r\n\tfloat intensity;\r\n};\r\n\r\n\r\n\r\nstruct Attenuation\r\n{\r\n    float constant;\r\n    float linear;\r\n    float exponent;\r\n};\r\n\r\nstruct PointLight\r\n{\r\n    BaseLight base;\r\n    Attenuation atten;\r\n    vec3 position;\r\n    float range;\r\n};\r\n\r\n\r\n\r\nuniform vec3 ambientLight;\r\nuniform PointLight pointLight;\r\n\r\nvec4 CalcLight(BaseLight base, vec3 direction, vec3 normal, vec3 worldPos)\r\n{\r\n    float diffuseFactor = dot(normal, -direction);\r\n    \r\n    vec4 diffuseColor = vec4(0.0,0.0,0.0,0.0);\r\n    vec4 specularColor = vec4(0.0,0.0,0.0,0.0);\r\n    \r\n    if(diffuseFactor > 0.0)\r\n    {\r\n        diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;\r\n        \r\n        vec3 directionToEye = normalize(eyePosition - worldPos);\r\n        //vec3 reflectDirection = normalize(reflect(direction, normal));\r\n        vec3 halfDirection = normalize(directionToEye - direction);\r\n        \r\n        float specularFactor = dot(halfDirection, normal);\r\n        //float specularFactor = dot(directionToEye, reflectDirection);\r\n        specularFactor = pow(specularFactor, specularPower);\r\n        \r\n        if(specularFactor > 0.0)\r\n        {\r\n            specularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;\r\n        }\r\n    }\r\n    \r\n    return diffuseColor + specularColor;\r\n}\r\n\r\nvec4 CalcPointLight(PointLight pointLight, vec3 normal, vec3 worldPos)\r\n{\r\n    vec3 lightDirection = worldPos - pointLight.position;\r\n    float distanceToPoint = length(lightDirection);\r\n    \r\n    if(distanceToPoint > pointLight.range)\r\n        return vec4(0.0,0.0,0.0,0.0);\r\n    \r\n    lightDirection = normalize(lightDirection);\r\n    \r\n    vec4 color = CalcLight(pointLight.base, lightDirection, normal, worldPos);\r\n    \r\n    float attenuation = pointLight.atten.constant +\r\n                         pointLight.atten.linear * distanceToPoint +\r\n                         pointLight.atten.exponent * distanceToPoint * distanceToPoint +\r\n                         0.0001;\r\n                         \r\n    return color / attenuation;\r\n}\r\n\r\nvec4 renderSolid()\r\n{\r\n\tvec4 Color = varVertexColor;\r\n\tColor *= texture2D(uTextureUnit0, varTexCoord0);\r\n\tColor.a = 1.0;\r\n\treturn Color;\r\n}\r\n\r\nvec4 render2LayerSolid()\r\n{\r\n\tfloat BlendFactor = varVertexColor.a;\r\n\t\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\tvec4 Color = Texel0 * BlendFactor + Texel1 * (1.0 - BlendFactor);\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderLightMap()\r\n{\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\t\r\n\tvec4 Color = Texel0 * Texel1 * 4.0;\r\n\tColor.a = Texel0.a * Texel0.a;\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderDetailMap()\r\n{\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\tvec4 Color = Texel0 ;\r\n\tColor += Texel1 - 0.4;\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderReflection2Layer()\r\n{\r\n\tvec4 Color = varVertexColor;\r\n\t\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\tColor *= Texel0 * Texel1;\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderTransparent()\r\n{\r\n\tvec4 Color = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n\r\n\t\tColor *= texture2D(uTextureUnit0, varTexCoord0);\r\n\r\n\treturn Color;\r\n}\r\n\r\n\r\nvoid main ()\r\n{\r\n   vec4 textureColor= vec4(1.0, 1.0, 1.0, 1.0);\r\n\t\r\n if (uMaterialType == Solid)\r\n\t\ttextureColor = renderSolid();\r\n\telse if(uMaterialType == Solid2Layer)\r\n\t\ttextureColor = render2LayerSolid();\r\n\telse if(uMaterialType == LightMap)\r\n\t\ttextureColor = renderLightMap();\r\n\telse if(uMaterialType == DetailMap)\r\n\t\ttextureColor = renderDetailMap();\r\n\telse if(uMaterialType == Reflection2Layer)\r\n\t\ttextureColor = renderReflection2Layer();\r\n\telse if(uMaterialType == TransparentAlphaChannel)\r\n\t\ttextureColor = renderTransparent();\r\n\telse if(uMaterialType == TransparentAlphaChannelRef)\r\n\t{\r\n\t\tvec4 Color = renderTransparent();\r\n\t\t\r\n\t\tif (Color.a < 0.5)\r\n\t\t\tdiscard;\r\n\t\t\r\n\t\ttextureColor = Color;\r\n\t}\r\n\telse if(uMaterialType == TransparentVertexAlpha)\r\n\t{\r\n\t\tvec4 Color = renderTransparent();\r\n\t\tColor.a = varVertexColor.a;\r\n\t\t\r\n\t\ttextureColor = Color;\r\n\t}\r\n\telse if(uMaterialType == TransparentReflection2Layer)\r\n\t{\r\n\t\tvec4 Color = renderReflection2Layer();\r\n\t\tColor.a = varVertexColor.a;\r\n\t\t\r\n\t\ttextureColor = Color;\r\n\t}\r\n\telse\r\n\t\ttextureColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n\t\t\r\n\t\t\r\n\t    vec4 totalLight = vec4 (ambientLight, 1.0);\r\n\t\r\n\t\tvec3 normal = normalize(varVertexNormal );\r\n\t\t\t\r\n\t\ttotalLight += CalcPointLight(pointLight, normal,varWorldPos);\r\n\t\t\r\n\t\tgl_FragColor = textureColor * totalLight;\r\n\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\t}";
	var vertexShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.VERTEX_SHADER);
	com_gdx_Gdx.gl.shaderSource(vertexShader,sVertexShader);
	com_gdx_Gdx.gl.compileShader(vertexShader);
	if(com_gdx_Gdx.gl.getShaderParameter(vertexShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Vert:" + com_gdx_Gdx.gl.getShaderInfoLog(vertexShader),{ fileName : "ShaderPointLight.hx", lineNumber : 364, className : "com.gdx.gl.shaders.ShaderPointLight", methodName : "new"});
		return;
	}
	var fragmentShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.FRAGMENT_SHADER);
	com_gdx_Gdx.gl.shaderSource(fragmentShader,sFragmentShader);
	com_gdx_Gdx.gl.compileShader(fragmentShader);
	if(com_gdx_Gdx.gl.getShaderParameter(fragmentShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Frag:" + com_gdx_Gdx.gl.getShaderInfoLog(fragmentShader),{ fileName : "ShaderPointLight.hx", lineNumber : 370, className : "com.gdx.gl.shaders.ShaderPointLight", methodName : "new"});
		return;
	}
	this.shaderProgram = com_gdx_Gdx.gl.createProgram();
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,vertexShader);
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,fragmentShader);
	com_gdx_Gdx.gl.linkProgram(this.shaderProgram);
	if(com_gdx_Gdx.gl.getProgramParameter(this.shaderProgram,com_gdx_Gdx.gl.LINK_STATUS) == 0) {
		haxe_Log.trace("Unable to initialize the shader program.",{ fileName : "ShaderPointLight.hx", lineNumber : 379, className : "com.gdx.gl.shaders.ShaderPointLight", methodName : "new"});
		return;
	}
	com_gdx_Gdx.gl.useProgram(this.shaderProgram);
	this.vertexAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexPosition");
	this.texCoord0Attribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inTexCoord0");
	this.texCoord1Attribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inTexCoord1");
	this.colorAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexColor");
	this.normalAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexNormal");
	this.projMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ProjectionMatrix");
	this.worldMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"WorldMatrix");
	this.viewMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ViewMatrix");
	this.normalMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"NormalMatrix");
	this.texture0Uniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uTextureUnit0");
	this.texture1Uniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uTextureUnit1");
	this.MaterialType = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uMaterialType");
	this.specularIntensityUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"specularIntensity");
	this.specularPowerIntensityUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"specularPower");
	this.ambientLightUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ambientLight");
	this.constantUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"pointLight.atten.constant");
	this.linearUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"pointLight.atten.linear");
	this.exponentUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"pointLight.atten.exponent");
	this.colorUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"pointLight.base.color");
	this.intensityUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"pointLight.base.intensity");
	this.positionLightUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"pointLight.position");
	this.rangeUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"pointLight.range");
	this.position = new com_gdx_math_Vector3(0,1,0);
	this.specularIntensity = 1;
	this.specularPower = 8;
	this.intensity = 10.8;
	this.color = new com_gdx_color_Color3(0,0,0);
	this.ambient = new com_gdx_color_Color3(0.1,0.1,0.1);
	this.constant = 0;
	this.linear = 0;
	this.exponent = 1;
	this.camarePosition = com_gdx_math_Vector3.get_zero();
	this.setMaterialType(0);
	haxe_Log.trace(this.vertexAttribute + "," + this.colorAttribute + "," + this.texCoord0Attribute + "," + this.normalAttribute,{ fileName : "ShaderPointLight.hx", lineNumber : 439, className : "com.gdx.gl.shaders.ShaderPointLight", methodName : "new"});
};
$hxClasses["com.gdx.gl.shaders.ShaderPointLight"] = com_gdx_gl_shaders_ShaderPointLight;
com_gdx_gl_shaders_ShaderPointLight.__name__ = true;
com_gdx_gl_shaders_ShaderPointLight.__super__ = com_gdx_gl_shaders_Shader;
com_gdx_gl_shaders_ShaderPointLight.prototype = $extend(com_gdx_gl_shaders_Shader.prototype,{
	Bind: function(view,proj,world) {
		com_gdx_gl_shaders_Shader.prototype.Bind.call(this,view,proj,world);
		com_gdx_Gdx.gl.uniform3f(this.ambientLightUniform,this.ambient.r,this.ambient.g,this.ambient.b);
		com_gdx_Gdx.gl.uniform3f(this.colorUniform,this.color.r,this.color.g,this.color.b);
		com_gdx_Gdx.gl.uniform1f(this.intensityUniform,this.intensity);
		com_gdx_Gdx.gl.uniform1f(this.specularIntensityUniform,this.specularIntensity);
		com_gdx_Gdx.gl.uniform1f(this.specularPowerIntensityUniform,this.specularPower);
		com_gdx_Gdx.gl.uniform1f(this.constantUniform,this.constant);
		com_gdx_Gdx.gl.uniform1f(this.linearUniform,this.linear);
		com_gdx_Gdx.gl.uniform1f(this.exponentUniform,this.exponent);
		var a = this.exponent;
		var b = this.linear;
		var c = this.constant - this.COLOR_DEPTH * this.intensity * this.color.Max();
		this.range = (-b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);
		com_gdx_Gdx.gl.uniform1f(this.rangeUniform,this.range);
		com_gdx_Gdx.gl.uniform3f(this.eyePositionIntensityUniform,this.camarePosition.x,this.camarePosition.y,this.camarePosition.z);
		com_gdx_Gdx.gl.uniform3f(this.positionLightUniform,this.position.x,this.position.y,this.position.z);
	}
	,setLightData: function(light,camPos) {
		this.specularIntensity = light.specularIntensity;
		this.specularPower = light.specularPower;
		this.position = light.local_pos;
		this.color = light.color;
		this.ambient = light.ambient;
		this.intensity = light.intensity;
		this.camarePosition = camPos;
		this.exponent = light.exponent;
		this.linear = light.linear;
		this.constant = light.constant;
	}
	,__class__: com_gdx_gl_shaders_ShaderPointLight
});
var com_gdx_gl_shaders_ShaderSkin = function() {
	com_gdx_gl_shaders_Shader.call(this);
	var maxbones = 80;
	var sVertexShader = "\r\nattribute vec3 inVertexPosition;\r\nattribute vec3 inVertexNormal;\r\nattribute vec4 inVertexColor;\r\nattribute vec2 inTexCoord0;\r\n\r\nattribute vec4  BoneIDs;\r\nattribute vec4  Weights;\r\n\r\nuniform mat4 WorldMatrix;\r\nuniform mat4 ViewMatrix;\r\nuniform mat4 ProjectionMatrix;\r\nuniform mat4 gBones[" + maxbones + "];\r\n\r\n\r\nvarying vec3 varVertexNormal;\r\nvarying vec2 varTexCoord0;\r\nvarying vec4 varVertexColor;\r\n\r\nvarying vec4 varWSVertex;\r\n\r\nvoid main(void)\r\n{\r\n\tvarTexCoord0 = inTexCoord0;\r\n    varVertexColor = inVertexColor;\r\n\r\n\t int  \tindex0 = int(BoneIDs[0]);\r\n\t int  \tindex1 = int(BoneIDs[1]);\r\n\t int  \tindex2 = int(BoneIDs[2]);\r\n\t int  \tindex3 = int(BoneIDs[3]);\r\n\t \r\n\r\n\tmat4 BoneTransform = gBones[index0]  * Weights.x;\r\n\t// BoneTransform      += gBones[index1] * Weights.y;\r\n\t// BoneTransform      += gBones[index2] * Weights.z;\r\n\t// BoneTransform      += gBones[index3] * Weights.w;\t\t  \r\n\t \r\n  \r\n\t if (index1 != -1)\r\n\t {\r\n\t   BoneTransform      += gBones[index1] * Weights.y;\r\n\t    \r\n\t   if (index2 != -1)\r\n\t   {\r\n\t\t   BoneTransform      += gBones[index2] * Weights.z;\r\n\t\t   \r\n\t\t   if (index3 != -1)\r\n\t\t   {\r\n\t\t\t     BoneTransform      += gBones[index3] * Weights.w;\t\t  \r\n\t\t   }\r\n\t\t   \r\n\t   }\r\n\t   \r\n\t } \r\n\t\r\n\tvec4 PosL    = BoneTransform * vec4(inVertexPosition, 1.0);\r\n     gl_Position =   ProjectionMatrix * ViewMatrix * WorldMatrix * PosL;\r\n}\r\n";
	var sFragmentShader = "precision mediump float;" + "\r\n\r\n#define Solid 0\r\n#define TransparentAlphaChannel 5\r\n#define TransparentAlphaChannelRef 6\r\n#define TransparentVertexAlpha 7\r\n#define TransparentReflection2Layer 8\r\n\r\nuniform sampler2D uTextureUnit0;\r\n\r\nvarying vec2 varTexCoord0;\r\nvarying vec4 varVertexColor;\r\nvarying vec3 varVertexNormal;\r\n\r\n\r\nuniform int uMaterialType;\r\n\r\n\r\n\r\nvec4 renderSolid()\r\n{\r\n\tvec4 Color = varVertexColor;\r\n\tColor *= texture2D(uTextureUnit0, varTexCoord0);\r\n\tColor.a = 1.0;\r\n\treturn Color;\r\n}\r\n\r\n\r\nvec4 renderTransparent()\r\n{\r\n\tvec4 Color = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n\r\n\t\tColor *= texture2D(uTextureUnit0, varTexCoord0);\r\n\r\n\treturn Color;\r\n}\r\n\r\nvoid main ()\r\n{\r\n   vec4 FragColor= vec4(1.0, 1.0, 1.0, 1.0);\r\n\t\r\n if (uMaterialType == Solid)\r\n\t\tFragColor = renderSolid();\r\n\telse if(uMaterialType == TransparentAlphaChannel)\r\n\t\tFragColor = renderTransparent();\r\n\telse if(uMaterialType == TransparentAlphaChannelRef)\r\n\t{\r\n\t\tvec4 Color = renderTransparent();\r\n\t\t\r\n\t\tif (Color.a < 0.5)\r\n\t\t\tdiscard;\r\n\t\t\r\n\t\tFragColor = Color;\r\n\t}\r\n\telse if(uMaterialType == TransparentVertexAlpha)\r\n\t{\r\n\t\tvec4 Color = renderTransparent();\r\n\t\tColor.a = varVertexColor.a;\r\n\t\t\r\n\t\tFragColor = Color;\r\n\t}\r\n\telse\r\n\t\tFragColor = vec4(1.0, 1.0, 1.0, 1.0);\r\ngl_FragColor = FragColor;\r\n}";
	var vertexShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.VERTEX_SHADER);
	com_gdx_Gdx.gl.shaderSource(vertexShader,sVertexShader);
	com_gdx_Gdx.gl.compileShader(vertexShader);
	if(com_gdx_Gdx.gl.getShaderParameter(vertexShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Vert:" + com_gdx_Gdx.gl.getShaderInfoLog(vertexShader),{ fileName : "ShaderSkin.hx", lineNumber : 178, className : "com.gdx.gl.shaders.ShaderSkin", methodName : "new"});
		return;
	}
	var fragmentShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.FRAGMENT_SHADER);
	com_gdx_Gdx.gl.shaderSource(fragmentShader,sFragmentShader);
	com_gdx_Gdx.gl.compileShader(fragmentShader);
	if(com_gdx_Gdx.gl.getShaderParameter(fragmentShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Frag:" + com_gdx_Gdx.gl.getShaderInfoLog(fragmentShader),{ fileName : "ShaderSkin.hx", lineNumber : 184, className : "com.gdx.gl.shaders.ShaderSkin", methodName : "new"});
		return;
	}
	this.shaderProgram = com_gdx_Gdx.gl.createProgram();
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,vertexShader);
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,fragmentShader);
	com_gdx_Gdx.gl.linkProgram(this.shaderProgram);
	if(com_gdx_Gdx.gl.getProgramParameter(this.shaderProgram,com_gdx_Gdx.gl.LINK_STATUS) == 0) {
		haxe_Log.trace("Unable to initialize the shader program.",{ fileName : "ShaderSkin.hx", lineNumber : 193, className : "com.gdx.gl.shaders.ShaderSkin", methodName : "new"});
		return;
	}
	com_gdx_Gdx.gl.useProgram(this.shaderProgram);
	this.vertexAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexPosition");
	this.texCoord0Attribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inTexCoord0");
	this.colorAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexColor");
	this.projMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ProjectionMatrix");
	this.worldMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"WorldMatrix");
	this.viewMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ViewMatrix");
	this.texture0Uniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uTextureUnit0");
	this.MaterialType = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uMaterialType");
	this.setMaterialType(0);
	this.bonesAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"BoneIDs");
	this.wighsAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"Weights");
	this.boneMatrixUniform = [];
	var _g1 = 0;
	var _g = maxbones;
	while(_g1 < _g) {
		var i = _g1++;
		var name = "gBones[" + i + "]";
		this.boneMatrixUniform.push(com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,name));
		var result = new com_gdx_math_Matrix();
		result.m11 = 1.0;
		result.m12 = 0;
		result.m13 = 0;
		result.m14 = 0;
		result.m21 = 0;
		result.m22 = 1.0;
		result.m23 = 0;
		result.m24 = 0;
		result.m31 = 0;
		result.m32 = 0;
		result.m33 = 1.0;
		result.m34 = 0;
		result.m41 = 0;
		result.m42 = 0;
		result.m43 = 0;
		result.m44 = 1.0;
		this.setBoneMatrix(i,result);
	}
	haxe_Log.trace(this.bonesAttribute + "," + this.wighsAttribute,{ fileName : "ShaderSkin.hx", lineNumber : 229, className : "com.gdx.gl.shaders.ShaderSkin", methodName : "new"});
};
$hxClasses["com.gdx.gl.shaders.ShaderSkin"] = com_gdx_gl_shaders_ShaderSkin;
com_gdx_gl_shaders_ShaderSkin.__name__ = true;
com_gdx_gl_shaders_ShaderSkin.__super__ = com_gdx_gl_shaders_Shader;
com_gdx_gl_shaders_ShaderSkin.prototype = $extend(com_gdx_gl_shaders_Shader.prototype,{
	__class__: com_gdx_gl_shaders_ShaderSkin
});
var com_gdx_gl_shaders_ShaderSkyBox = function() {
	com_gdx_gl_shaders_Shader.call(this);
	var SkyBoxVertexShader = "\r\nattribute vec3 inVertexPosition;\r\nuniform mat4 uProjMatrix;\r\nuniform mat4 uWorldMatrix;\r\nuniform mat4 uViewMatrix;\r\nvarying  vec3 vTextureCoord;\r\n\r\n\r\nvoid main(void) {\r\n\t\r\n\tgl_Position = uProjMatrix * uViewMatrix* uWorldMatrix * vec4(inVertexPosition, 1.0);\r\n\tvTextureCoord.xyz = inVertexPosition.xyz;\r\n\t\r\n}\r\n";
	var SkyBoxFragmentShader = "precision mediump float;" + "\r\nuniform samplerCube uCubeSampler;\r\nvarying vec3 vTextureCoord;\r\n\r\n\r\nvoid main(void)\r\n{\t\r\n    vec3 cube = vec3(textureCube(uCubeSampler, vTextureCoord.xyz));\r\n\tgl_FragColor = vec4(cube, 1.0);\r\n\t\t\r\n\r\n}";
	var vertexShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.VERTEX_SHADER);
	com_gdx_Gdx.gl.shaderSource(vertexShader,SkyBoxVertexShader);
	com_gdx_Gdx.gl.compileShader(vertexShader);
	if(com_gdx_Gdx.gl.getShaderParameter(vertexShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Vert:" + com_gdx_Gdx.gl.getShaderInfoLog(vertexShader),{ fileName : "ShaderSkyBox.hx", lineNumber : 79, className : "com.gdx.gl.shaders.ShaderSkyBox", methodName : "new"});
	}
	var fragmentShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.FRAGMENT_SHADER);
	com_gdx_Gdx.gl.shaderSource(fragmentShader,SkyBoxFragmentShader);
	com_gdx_Gdx.gl.compileShader(fragmentShader);
	if(com_gdx_Gdx.gl.getShaderParameter(fragmentShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Frag:" + com_gdx_Gdx.gl.getShaderInfoLog(fragmentShader),{ fileName : "ShaderSkyBox.hx", lineNumber : 85, className : "com.gdx.gl.shaders.ShaderSkyBox", methodName : "new"});
	}
	this.shaderProgram = com_gdx_Gdx.gl.createProgram();
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,vertexShader);
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,fragmentShader);
	com_gdx_Gdx.gl.linkProgram(this.shaderProgram);
	if(com_gdx_Gdx.gl.getProgramParameter(this.shaderProgram,com_gdx_Gdx.gl.LINK_STATUS) == 0) {
		haxe_Log.trace("Unable to initialize the shader program.",{ fileName : "ShaderSkyBox.hx", lineNumber : 93, className : "com.gdx.gl.shaders.ShaderSkyBox", methodName : "new"});
	}
	com_gdx_Gdx.gl.useProgram(this.shaderProgram);
	this.projMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uProjMatrix");
	this.worldMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uWorldMatrix");
	this.viewMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uViewMatrix");
	this.textureCubeUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uCubeSampler");
	this.vertexAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexPosition");
	haxe_Log.trace(Std.string(this.projMatrixUniform) + "," + Std.string(this.worldMatrixUniform) + "," + Std.string(this.textureCubeUniform) + "," + this.vertexAttribute,{ fileName : "ShaderSkyBox.hx", lineNumber : 102, className : "com.gdx.gl.shaders.ShaderSkyBox", methodName : "new"});
};
$hxClasses["com.gdx.gl.shaders.ShaderSkyBox"] = com_gdx_gl_shaders_ShaderSkyBox;
com_gdx_gl_shaders_ShaderSkyBox.__name__ = true;
com_gdx_gl_shaders_ShaderSkyBox.__super__ = com_gdx_gl_shaders_Shader;
com_gdx_gl_shaders_ShaderSkyBox.prototype = $extend(com_gdx_gl_shaders_Shader.prototype,{
	setCubeMap: function(tex) {
		if(this.shaderProgram == null) {
			return;
		}
		if(tex != null) {
			if(tex != com_gdx_Gdx.Instance().currentBaseTextures[0]) {
				com_gdx_Gdx.Instance().currentBaseTextures[0] = tex;
				tex.Bind();
				com_gdx_Gdx.gl.uniform1i(this.textureCubeUniform,0);
				com_gdx_Gdx.Instance().numTextures += 1;
			}
		}
	}
	,__class__: com_gdx_gl_shaders_ShaderSkyBox
});
var com_gdx_gl_shaders_ShaderSpotLight = function() {
	this.COLOR_DEPTH = 256;
	com_gdx_gl_shaders_Shader.call(this);
	var sVertexShader = "\r\nattribute vec3 inVertexPosition;\r\nattribute vec3 inVertexNormal;\r\nattribute vec4 inVertexColor;\r\nattribute vec2 inTexCoord0;\r\nattribute vec2 inTexCoord1;\r\n\r\n\r\n\r\nuniform mat4 WorldMatrix;\r\nuniform mat4 ViewMatrix;\r\nuniform mat4 ProjectionMatrix;\r\n\r\nuniform mat4 NormalMatrix;\r\n\r\n\r\n\r\nvarying vec4 varVertexColor;\r\nvarying vec3 varVertexNormal;\r\nvarying vec2 varTexCoord0;\r\nvarying vec2 varTexCoord1;\r\nvarying vec3 varWorldPos;\r\n\r\n\r\n\r\n\r\nvoid main(void)\r\n{\r\n\t\r\n\t\r\n\t\r\n\tvarVertexNormal = (WorldMatrix * vec4(inVertexNormal, 0.0)).xyz;\r\n\tvarWorldPos =(WorldMatrix * vec4(inVertexPosition, 1.0)).xyz;\r\n\t\r\n\tvarTexCoord0 = inTexCoord0;\r\n\tvarTexCoord1 = inTexCoord1;\r\n\tvarVertexColor = inVertexColor;\r\n    gl_Position =   ProjectionMatrix * ViewMatrix * vec4(varWorldPos, 1.0); //WorldMatrix * vec4(inVertexPosition, 1.0);\r\n}\r\n";
	var sFragmentShader = "precision mediump float;" + "\r\n\r\n#define Solid 0\r\n#define Solid2Layer 1\r\n#define LightMap 2\r\n#define DetailMap 3\r\n#define Reflection2Layer 4\r\n#define TransparentAlphaChannel 5\r\n#define TransparentAlphaChannelRef 6\r\n#define TransparentVertexAlpha 7\r\n#define TransparentReflection2Layer 8\r\n\r\n\r\n\r\n\r\n\r\n/* Uniforms */\r\n\r\nuniform int uMaterialType;\r\n\r\n\r\nuniform sampler2D uTextureUnit0;\r\nuniform sampler2D uTextureUnit1;\r\n\r\n\r\nuniform vec3  eyePosition;\r\n\r\nuniform float specularIntensity;\r\nuniform float specularPower;\r\n\r\nvarying vec2 varTexCoord0;\r\nvarying vec2 varTexCoord1;\r\nvarying vec4 varVertexColor;\r\nvarying vec3 varVertexNormal;\r\nvarying vec3 varWorldPos;\r\n\r\n\r\nstruct BaseLight\r\n{\r\n\tvec3 color;\r\n\tfloat intensity;\r\n};\r\n\r\n\r\n\r\nstruct Attenuation\r\n{\r\n    float constant;\r\n    float linear;\r\n    float exponent;\r\n};\r\n\r\nstruct PointLight\r\n{\r\n    BaseLight base;\r\n    Attenuation atten;\r\n    vec3 position;\r\n    float range;\r\n};\r\nstruct SpotLight\r\n{\r\n    PointLight pointLight;\r\n    vec3 direction;\r\n    float cutoff;\r\n};\r\n\r\n\r\nuniform vec3 ambientLight;\r\nuniform SpotLight spotLight;\r\n\r\nvec4 CalcLight(BaseLight base, vec3 direction, vec3 normal, vec3 worldPos)\r\n{\r\n    float diffuseFactor = dot(normal, -direction);\r\n    \r\n    vec4 diffuseColor = vec4(0.0,0.0,0.0,0.0);\r\n    vec4 specularColor = vec4(0.0,0.0,0.0,0.0);\r\n    \r\n    if(diffuseFactor > 0.0)\r\n    {\r\n        diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;\r\n        \r\n        vec3 directionToEye = normalize(eyePosition - worldPos);\r\n        //vec3 reflectDirection = normalize(reflect(direction, normal));\r\n        vec3 halfDirection = normalize(directionToEye - direction);\r\n        \r\n        float specularFactor = dot(halfDirection, normal);\r\n        //float specularFactor = dot(directionToEye, reflectDirection);\r\n        specularFactor = pow(specularFactor, specularPower);\r\n        \r\n        if(specularFactor > 0.0)\r\n        {\r\n            specularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;\r\n        }\r\n    }\r\n    \r\n    return diffuseColor + specularColor;\r\n}\r\n\r\nvec4 CalcPointLight(PointLight pointLight, vec3 normal, vec3 worldPos)\r\n{\r\n    vec3 lightDirection = worldPos - pointLight.position;\r\n    float distanceToPoint = length(lightDirection);\r\n    \r\n    if(distanceToPoint > pointLight.range)\r\n        return vec4(0.0,0.0,0.0,0.0);\r\n    \r\n    lightDirection = normalize(lightDirection);\r\n    \r\n    vec4 color = CalcLight(pointLight.base, lightDirection, normal, worldPos);\r\n    \r\n    float attenuation = pointLight.atten.constant +\r\n                         pointLight.atten.linear * distanceToPoint +\r\n                         pointLight.atten.exponent * distanceToPoint * distanceToPoint +\r\n                         0.0001;\r\n                         \r\n    return color / attenuation;\r\n}\r\n\r\nvec4 CalcSpotLight(SpotLight spotLight, vec3 normal, vec3 worldPos)\r\n{\r\n    vec3 lightDirection = normalize(worldPos - spotLight.pointLight.position);\r\n    float spotFactor = dot(lightDirection, spotLight.direction);\r\n    \r\n    vec4 color = vec4(0.0,0.0,0.0,0.0);\r\n    \r\n    if(spotFactor > spotLight.cutoff)\r\n    {\r\n        color = CalcPointLight(spotLight.pointLight, normal, worldPos) *\r\n                (1.0 - (1.0 - spotFactor)/(1.0 - spotLight.cutoff));\r\n    }\r\n    \r\n    return color;\r\n}\r\n\r\nvec4 renderSolid()\r\n{\r\n\tvec4 Color = varVertexColor;\r\n\tColor *= texture2D(uTextureUnit0, varTexCoord0);\r\n\tColor.a = 1.0;\r\n\treturn Color;\r\n}\r\n\r\nvec4 render2LayerSolid()\r\n{\r\n\tfloat BlendFactor = varVertexColor.a;\r\n\t\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\tvec4 Color = Texel0 * BlendFactor + Texel1 * (1.0 - BlendFactor);\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderLightMap()\r\n{\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\t\r\n\tvec4 Color = Texel0 * Texel1 * 4.0;\r\n\tColor.a = Texel0.a * Texel0.a;\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderDetailMap()\r\n{\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\tvec4 Color = Texel0 ;\r\n\tColor += Texel1 - 0.4;\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderReflection2Layer()\r\n{\r\n\tvec4 Color = varVertexColor;\r\n\t\r\n\tvec4 Texel0 = texture2D(uTextureUnit0, varTexCoord0);\r\n\tvec4 Texel1 = texture2D(uTextureUnit1, varTexCoord1);\r\n\t\r\n\tColor *= Texel0 * Texel1;\r\n\t\r\n\treturn Color;\r\n}\r\n\r\nvec4 renderTransparent()\r\n{\r\n\tvec4 Color = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n\r\n\t\tColor *= texture2D(uTextureUnit0, varTexCoord0);\r\n\r\n\treturn Color;\r\n}\r\n\r\n\r\nvoid main ()\r\n{\r\n   vec4 textureColor= vec4(1.0, 1.0, 1.0, 1.0);\r\n\t\r\n if (uMaterialType == Solid)\r\n\t\ttextureColor = renderSolid();\r\n\telse if(uMaterialType == Solid2Layer)\r\n\t\ttextureColor = render2LayerSolid();\r\n\telse if(uMaterialType == LightMap)\r\n\t\ttextureColor = renderLightMap();\r\n\telse if(uMaterialType == DetailMap)\r\n\t\ttextureColor = renderDetailMap();\r\n\telse if(uMaterialType == Reflection2Layer)\r\n\t\ttextureColor = renderReflection2Layer();\r\n\telse if(uMaterialType == TransparentAlphaChannel)\r\n\t\ttextureColor = renderTransparent();\r\n\telse if(uMaterialType == TransparentAlphaChannelRef)\r\n\t{\r\n\t\tvec4 Color = renderTransparent();\r\n\t\t\r\n\t\tif (Color.a < 0.5)\r\n\t\t\tdiscard;\r\n\t\t\r\n\t\ttextureColor = Color;\r\n\t}\r\n\telse if(uMaterialType == TransparentVertexAlpha)\r\n\t{\r\n\t\tvec4 Color = renderTransparent();\r\n\t\tColor.a = varVertexColor.a;\r\n\t\t\r\n\t\ttextureColor = Color;\r\n\t}\r\n\telse if(uMaterialType == TransparentReflection2Layer)\r\n\t{\r\n\t\tvec4 Color = renderReflection2Layer();\r\n\t\tColor.a = varVertexColor.a;\r\n\t\t\r\n\t\ttextureColor = Color;\r\n\t}\r\n\telse\r\n\t\ttextureColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n\t\t\r\n\t\t\r\n\t    vec4 totalLight = vec4 (ambientLight, 1.0);\r\n\t\r\n\t\tvec3 normal = normalize(varVertexNormal );\r\n\t\t\t\r\n\t\ttotalLight += CalcSpotLight(spotLight, normal,varWorldPos);\r\n\t\t\r\n\t\tgl_FragColor = textureColor * totalLight;\r\n\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\t}";
	var vertexShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.VERTEX_SHADER);
	com_gdx_Gdx.gl.shaderSource(vertexShader,sVertexShader);
	com_gdx_Gdx.gl.compileShader(vertexShader);
	if(com_gdx_Gdx.gl.getShaderParameter(vertexShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Vert:" + com_gdx_Gdx.gl.getShaderInfoLog(vertexShader),{ fileName : "ShaderSpotLight.hx", lineNumber : 395, className : "com.gdx.gl.shaders.ShaderSpotLight", methodName : "new"});
		return;
	}
	var fragmentShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.FRAGMENT_SHADER);
	com_gdx_Gdx.gl.shaderSource(fragmentShader,sFragmentShader);
	com_gdx_Gdx.gl.compileShader(fragmentShader);
	if(com_gdx_Gdx.gl.getShaderParameter(fragmentShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Frag:" + com_gdx_Gdx.gl.getShaderInfoLog(fragmentShader),{ fileName : "ShaderSpotLight.hx", lineNumber : 401, className : "com.gdx.gl.shaders.ShaderSpotLight", methodName : "new"});
		return;
	}
	this.shaderProgram = com_gdx_Gdx.gl.createProgram();
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,vertexShader);
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,fragmentShader);
	com_gdx_Gdx.gl.linkProgram(this.shaderProgram);
	if(com_gdx_Gdx.gl.getProgramParameter(this.shaderProgram,com_gdx_Gdx.gl.LINK_STATUS) == 0) {
		haxe_Log.trace("Unable to initialize the shader program.",{ fileName : "ShaderSpotLight.hx", lineNumber : 410, className : "com.gdx.gl.shaders.ShaderSpotLight", methodName : "new"});
		return;
	}
	com_gdx_Gdx.gl.useProgram(this.shaderProgram);
	this.vertexAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexPosition");
	this.texCoord0Attribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inTexCoord0");
	this.texCoord1Attribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inTexCoord1");
	this.colorAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexColor");
	this.normalAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexNormal");
	this.projMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ProjectionMatrix");
	this.worldMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"WorldMatrix");
	this.viewMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ViewMatrix");
	this.normalMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"NormalMatrix");
	this.texture0Uniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uTextureUnit0");
	this.texture1Uniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uTextureUnit1");
	this.MaterialType = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uMaterialType");
	this.specularIntensityUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"specularIntensity");
	this.specularPowerIntensityUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"specularPower");
	this.ambientLightUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ambientLight");
	this.constantUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"spotLight.pointLight.atten.constant");
	this.linearUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"spotLight.pointLight.atten.linear");
	this.exponentUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"spotLight.pointLight.atten.exponent");
	this.colorUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"spotLight.pointLight.base.color");
	this.intensityUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"spotLight.pointLight.base.intensity");
	this.positionLightUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"spotLight.pointLight.position");
	this.rangeUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"spotLight.pointLight.range");
	this.directionUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"spotLight.direction");
	this.cutoffUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"spotLight.cutoff");
	this.direction = new com_gdx_math_Vector3(0,-1,0);
	this.position = new com_gdx_math_Vector3(0,0,0);
	this.cutoff = 0.7;
	this.specularIntensity = 1;
	this.specularPower = 8;
	this.intensity = 10;
	this.color = new com_gdx_color_Color3(1,1,1);
	this.ambient = new com_gdx_color_Color3(0,0,0);
	this.camarePosition = com_gdx_math_Vector3.get_zero();
	this.setMaterialType(0);
	haxe_Log.trace("ShaderSpotlight:",{ fileName : "ShaderSpotLight.hx", lineNumber : 474, className : "com.gdx.gl.shaders.ShaderSpotLight", methodName : "new", customParams : [this.vertexAttribute + "," + this.colorAttribute + "," + this.texCoord0Attribute + "," + this.normalAttribute]});
};
$hxClasses["com.gdx.gl.shaders.ShaderSpotLight"] = com_gdx_gl_shaders_ShaderSpotLight;
com_gdx_gl_shaders_ShaderSpotLight.__name__ = true;
com_gdx_gl_shaders_ShaderSpotLight.__super__ = com_gdx_gl_shaders_Shader;
com_gdx_gl_shaders_ShaderSpotLight.prototype = $extend(com_gdx_gl_shaders_Shader.prototype,{
	Bind: function(view,proj,world) {
		com_gdx_gl_shaders_Shader.prototype.Bind.call(this,view,proj,world);
		com_gdx_Gdx.gl.uniform3f(this.ambientLightUniform,this.ambient.r,this.ambient.g,this.ambient.b);
		com_gdx_Gdx.gl.uniform3f(this.colorUniform,this.color.r,this.color.g,this.color.b);
		com_gdx_Gdx.gl.uniform1f(this.intensityUniform,this.intensity);
		com_gdx_Gdx.gl.uniform1f(this.specularIntensityUniform,this.specularIntensity);
		com_gdx_Gdx.gl.uniform1f(this.specularPowerIntensityUniform,this.specularPower);
		var a = this.exponent;
		var b = this.linear;
		var c = this.constant - this.COLOR_DEPTH * this.intensity * this.color.Max();
		this.range = (-b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);
		com_gdx_Gdx.gl.uniform1f(this.rangeUniform,this.range);
		com_gdx_Gdx.gl.uniform1f(this.constantUniform,this.constant);
		com_gdx_Gdx.gl.uniform1f(this.linearUniform,this.linear);
		com_gdx_Gdx.gl.uniform1f(this.exponentUniform,this.exponent);
		com_gdx_Gdx.gl.uniform1f(this.cutoffUniform,this.cutoff);
		com_gdx_Gdx.gl.uniform3f(this.eyePositionIntensityUniform,this.camarePosition.x,this.camarePosition.y,this.camarePosition.z);
		this.direction.normalize();
		com_gdx_Gdx.gl.uniform3f(this.directionUniform,this.direction.x,this.direction.y,this.direction.z);
		com_gdx_Gdx.gl.uniform3f(this.positionLightUniform,this.position.x,this.position.y,this.position.z);
	}
	,setLightData: function(light,camPos) {
		this.specularIntensity = light.specularIntensity;
		this.specularPower = light.specularPower;
		this.position = light.local_pos;
		this.direction = light.direction;
		this.cutoff = light.cutOff;
		this.color = light.color;
		this.ambient = light.ambient;
		this.intensity = light.intensity;
		this.camarePosition = camPos;
		this.exponent = light.exponent;
		this.linear = light.linear;
		this.constant = light.constant;
	}
	,__class__: com_gdx_gl_shaders_ShaderSpotLight
});
var com_gdx_gl_shaders_ShaderTexture = function() {
	com_gdx_gl_shaders_Shader.call(this);
	var sVertexShader = "\r\nattribute vec3 inVertexPosition;\r\nattribute vec4 inVertexColor;\r\nattribute vec2 inTexCoord0;\r\n\r\n\r\nuniform mat4 WorldMatrix;\r\nuniform mat4 ViewMatrix;\r\nuniform mat4 ProjectionMatrix;\r\nvarying vec4 varVertexColor;\r\nvarying vec2 varTexCoord0;\r\n\r\nvoid main(void)\r\n{\r\n\tvarTexCoord0 = inTexCoord0;\r\n\tvarVertexColor = inVertexColor;\r\n    gl_Position =   ProjectionMatrix * ViewMatrix * WorldMatrix * vec4(inVertexPosition, 1.0);\r\n}\r\n";
	var sFragmentShader = "precision mediump float;" + "\r\n\r\nuniform sampler2D uTextureUnit0;\r\nvarying vec2 varTexCoord0;\r\nvarying vec4 varVertexColor;\r\n\r\n\r\n\r\nvoid main ()\r\n{\r\n\t\t\t\tgl_FragColor = varVertexColor * texture2D(uTextureUnit0, varTexCoord0);\r\n\t\t\t\tif(gl_FragColor.a < 0.2)\r\n                discard;\r\n\t\t\r\n\t\t\r\n\t\r\n\t\r\n}";
	var vertexShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.VERTEX_SHADER);
	com_gdx_Gdx.gl.shaderSource(vertexShader,sVertexShader);
	com_gdx_Gdx.gl.compileShader(vertexShader);
	if(com_gdx_Gdx.gl.getShaderParameter(vertexShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Vert:" + com_gdx_Gdx.gl.getShaderInfoLog(vertexShader),{ fileName : "ShaderTexture.hx", lineNumber : 91, className : "com.gdx.gl.shaders.ShaderTexture", methodName : "new"});
		return;
	}
	var fragmentShader = com_gdx_Gdx.gl.createShader(com_gdx_Gdx.gl.FRAGMENT_SHADER);
	com_gdx_Gdx.gl.shaderSource(fragmentShader,sFragmentShader);
	com_gdx_Gdx.gl.compileShader(fragmentShader);
	if(com_gdx_Gdx.gl.getShaderParameter(fragmentShader,com_gdx_Gdx.gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Load Frag:" + com_gdx_Gdx.gl.getShaderInfoLog(fragmentShader),{ fileName : "ShaderTexture.hx", lineNumber : 97, className : "com.gdx.gl.shaders.ShaderTexture", methodName : "new"});
		return;
	}
	this.shaderProgram = com_gdx_Gdx.gl.createProgram();
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,vertexShader);
	com_gdx_Gdx.gl.attachShader(this.shaderProgram,fragmentShader);
	com_gdx_Gdx.gl.linkProgram(this.shaderProgram);
	if(com_gdx_Gdx.gl.getProgramParameter(this.shaderProgram,com_gdx_Gdx.gl.LINK_STATUS) == 0) {
		haxe_Log.trace("Unable to initialize the shader program.",{ fileName : "ShaderTexture.hx", lineNumber : 106, className : "com.gdx.gl.shaders.ShaderTexture", methodName : "new"});
		return;
	}
	com_gdx_Gdx.gl.useProgram(this.shaderProgram);
	this.vertexAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexPosition");
	this.texCoord0Attribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inTexCoord0");
	this.colorAttribute = com_gdx_Gdx.gl.getAttribLocation(this.shaderProgram,"inVertexColor");
	this.projMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ProjectionMatrix");
	this.worldMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"WorldMatrix");
	this.viewMatrixUniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"ViewMatrix");
	this.texture0Uniform = com_gdx_Gdx.gl.getUniformLocation(this.shaderProgram,"uTextureUnit0");
	this.preSets();
	haxe_Log.trace(this.vertexAttribute + "," + this.colorAttribute + "," + this.texCoord0Attribute,{ fileName : "ShaderTexture.hx", lineNumber : 128, className : "com.gdx.gl.shaders.ShaderTexture", methodName : "new"});
};
$hxClasses["com.gdx.gl.shaders.ShaderTexture"] = com_gdx_gl_shaders_ShaderTexture;
com_gdx_gl_shaders_ShaderTexture.__name__ = true;
com_gdx_gl_shaders_ShaderTexture.__super__ = com_gdx_gl_shaders_Shader;
com_gdx_gl_shaders_ShaderTexture.prototype = $extend(com_gdx_gl_shaders_Shader.prototype,{
	__class__: com_gdx_gl_shaders_ShaderTexture
});
var com_gdx_math_Vector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["com.gdx.math.Vector3"] = com_gdx_math_Vector3;
com_gdx_math_Vector3.__name__ = true;
com_gdx_math_Vector3.get_zero = function() {
	return new com_gdx_math_Vector3(0,0,0);
};
com_gdx_math_Vector3.prototype = {
	toString: function() {
		return "{X:" + this.x + " Y:" + this.y + " Z:" + this.z + "}";
	}
	,normalize: function() {
		var len = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(len == 0) {
			return this;
		}
		var num = 1.0 / len;
		this.x *= num;
		this.y *= num;
		this.z *= num;
		return this;
	}
	,__class__: com_gdx_math_Vector3
};
var com_gdx_math_BoundingBox = function(minimum,maximum) {
	this.vectorsWorld = [];
	this.vectors = [];
	com_gdx_Buffer.call(this);
	this.minimum = minimum;
	this.maximum = maximum;
	var _this = this.minimum;
	this.vectors.push(new com_gdx_math_Vector3(_this.x,_this.y,_this.z));
	var _this1 = this.maximum;
	this.vectors.push(new com_gdx_math_Vector3(_this1.x,_this1.y,_this1.z));
	var _this2 = this.minimum;
	this.vectors.push(new com_gdx_math_Vector3(_this2.x,_this2.y,_this2.z));
	this.vectors[2].x = this.maximum.x;
	var _this3 = this.minimum;
	this.vectors.push(new com_gdx_math_Vector3(_this3.x,_this3.y,_this3.z));
	this.vectors[3].y = this.maximum.y;
	var _this4 = this.minimum;
	this.vectors.push(new com_gdx_math_Vector3(_this4.x,_this4.y,_this4.z));
	this.vectors[4].z = this.maximum.z;
	var _this5 = this.maximum;
	this.vectors.push(new com_gdx_math_Vector3(_this5.x,_this5.y,_this5.z));
	this.vectors[5].z = this.minimum.z;
	var _this6 = this.maximum;
	this.vectors.push(new com_gdx_math_Vector3(_this6.x,_this6.y,_this6.z));
	this.vectors[6].x = this.minimum.x;
	var _this7 = this.maximum;
	this.vectors.push(new com_gdx_math_Vector3(_this7.x,_this7.y,_this7.z));
	this.vectors[7].y = this.minimum.y;
	var _this8 = this.maximum;
	var otherVector = this.minimum;
	var _this9 = new com_gdx_math_Vector3(_this8.x + otherVector.x,_this8.y + otherVector.y,_this8.z + otherVector.z);
	this.center = new com_gdx_math_Vector3(_this9.x * 0.5,_this9.y * 0.5,_this9.z * 0.5);
	var _this10 = this.maximum;
	var otherVector1 = this.minimum;
	var _this11 = new com_gdx_math_Vector3(_this10.x - otherVector1.x,_this10.y - otherVector1.y,_this10.z - otherVector1.z);
	this.extendSize = new com_gdx_math_Vector3(_this11.x * 0.5,_this11.y * 0.5,_this11.z * 0.5);
	this.directions = [new com_gdx_math_Vector3(0,0,0),new com_gdx_math_Vector3(0,0,0),new com_gdx_math_Vector3(0,0,0)];
	var _g1 = 0;
	var _g = this.vectors.length;
	while(_g1 < _g) {
		var index = _g1++;
		this.vectorsWorld[index] = new com_gdx_math_Vector3(0,0,0);
	}
	this.minimumWorld = new com_gdx_math_Vector3(0,0,0);
	this.maximumWorld = new com_gdx_math_Vector3(0,0,0);
	var result = new com_gdx_math_Matrix();
	result.m11 = 1.0;
	result.m12 = 0;
	result.m13 = 0;
	result.m14 = 0;
	result.m21 = 0;
	result.m22 = 1.0;
	result.m23 = 0;
	result.m24 = 0;
	result.m31 = 0;
	result.m32 = 0;
	result.m33 = 1.0;
	result.m34 = 0;
	result.m41 = 0;
	result.m42 = 0;
	result.m43 = 0;
	result.m44 = 1.0;
	this.update(result);
};
$hxClasses["com.gdx.math.BoundingBox"] = com_gdx_math_BoundingBox;
com_gdx_math_BoundingBox.__name__ = true;
com_gdx_math_BoundingBox.IsInFrustum = function(boundingVectors,frustumPlanes) {
	var _g = 0;
	while(_g < 6) {
		var p = _g++;
		var inCount = 8;
		var _g1 = 0;
		while(_g1 < 8) {
			var i = _g1++;
			var _this = frustumPlanes[p];
			var point = boundingVectors[i];
			if(_this.normal.x * point.x + _this.normal.y * point.y + _this.normal.z * point.z + _this.d < 0) {
				--inCount;
			} else {
				break;
			}
		}
		if(inCount == 0) {
			return false;
		}
	}
	return true;
};
com_gdx_math_BoundingBox.__super__ = com_gdx_Buffer;
com_gdx_math_BoundingBox.prototype = $extend(com_gdx_Buffer.prototype,{
	initFloats: function(min,max) {
		var _this = this.minimum;
		_this.x = min;
		_this.y = min;
		_this.z = min;
		var _this1 = this.maximum;
		_this1.x = max;
		_this1.y = max;
		_this1.z = max;
	}
	,reset: function(v) {
		var _this = this.maximum;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		var _this1 = this.minimum;
		_this1.x = v.x;
		_this1.y = v.y;
		_this1.z = v.z;
	}
	,calculate: function() {
		var aMinX;
		var aMaxX;
		var aMinY;
		var aMaxY;
		var aMinZ;
		var aMaxZ;
		aMinX = this.minimum.x;
		aMinY = this.minimum.y;
		aMinZ = this.minimum.z;
		aMaxX = this.maximum.x;
		aMaxY = this.maximum.y;
		aMaxZ = this.maximum.z;
		var _this = this.vectors[0];
		_this.x = aMinX;
		_this.y = aMinY;
		_this.z = aMaxZ;
		var _this1 = this.vectors[1];
		_this1.x = aMaxX;
		_this1.y = aMinY;
		_this1.z = aMaxZ;
		var _this2 = this.vectors[2];
		_this2.x = aMaxX;
		_this2.y = aMaxY;
		_this2.z = aMaxZ;
		var _this3 = this.vectors[3];
		_this3.x = aMinX;
		_this3.y = aMaxY;
		_this3.z = aMaxZ;
		var _this4 = this.vectors[4];
		_this4.x = aMinX;
		_this4.y = aMinY;
		_this4.z = aMinZ;
		var _this5 = this.vectors[5];
		_this5.x = aMinX;
		_this5.y = aMaxY;
		_this5.z = aMinZ;
		var _this6 = this.vectors[6];
		_this6.x = aMaxX;
		_this6.y = aMaxY;
		_this6.z = aMinZ;
		var _this7 = this.vectors[7];
		_this7.x = aMaxX;
		_this7.y = aMinY;
		_this7.z = aMinZ;
		var _this8 = this.maximum;
		var otherVector = this.minimum;
		var _this9 = new com_gdx_math_Vector3(_this8.x + otherVector.x,_this8.y + otherVector.y,_this8.z + otherVector.z);
		this.center = new com_gdx_math_Vector3(_this9.x * 0.5,_this9.y * 0.5,_this9.z * 0.5);
		var _this10 = this.maximum;
		var otherVector1 = this.minimum;
		var _this11 = new com_gdx_math_Vector3(_this10.x - otherVector1.x,_this10.y - otherVector1.y,_this10.z - otherVector1.z);
		this.extendSize = new com_gdx_math_Vector3(_this11.x * 0.5,_this11.y * 0.5,_this11.z * 0.5);
	}
	,isFullInside: function(other) {
		if(this.minimum.x >= other.minimum.x && this.minimum.y >= other.minimum.y && this.minimum.z >= other.minimum.z && this.maximum.x <= other.maximum.x && this.maximum.y <= other.maximum.y) {
			return this.maximum.z <= other.maximum.z;
		} else {
			return false;
		}
	}
	,addInternalVector: function(v) {
		this.addInternalPoint(v.x,v.y,v.z);
	}
	,addInternalBox: function(b) {
		this.addInternalVector(b.maximum);
		this.addInternalVector(b.minimum);
	}
	,addInternalPoint: function(x,y,z) {
		if(x > this.maximum.x) {
			this.maximum.x = x;
		}
		if(y > this.maximum.y) {
			this.maximum.y = y;
		}
		if(z > this.maximum.z) {
			this.maximum.z = z;
		}
		if(x < this.minimum.x) {
			this.minimum.x = x;
		}
		if(y < this.minimum.y) {
			this.minimum.y = y;
		}
		if(z < this.minimum.z) {
			this.minimum.z = z;
		}
	}
	,getCenter: function() {
		var v = new com_gdx_math_Vector3((this.minimum.x + this.maximum.x) / 2,(this.minimum.y + this.maximum.y) / 2,(this.minimum.z + this.maximum.z) / 2);
		return v;
	}
	,isEmpty: function() {
		var _this = this.minimum;
		var otherVector = this.maximum;
		if(otherVector != null && _this.x == otherVector.x && _this.y == otherVector.y) {
			return _this.z == otherVector.z;
		} else {
			return false;
		}
	}
	,getEdges: function(edges) {
		var _this = this.center;
		var otherVector = this.maximum;
		var diag = new com_gdx_math_Vector3(_this.x - otherVector.x,_this.y - otherVector.y,_this.z - otherVector.z);
		edges.push(new com_gdx_math_Vector3(this.center.x + diag.x,this.center.y + diag.y,this.center.z + diag.z));
		edges.push(new com_gdx_math_Vector3(this.center.x + diag.x,this.center.y - diag.y,this.center.z + diag.z));
		edges.push(new com_gdx_math_Vector3(this.center.x + diag.x,this.center.y + diag.y,this.center.z - diag.z));
		edges.push(new com_gdx_math_Vector3(this.center.x + diag.x,this.center.y - diag.y,this.center.z - diag.z));
		edges.push(new com_gdx_math_Vector3(this.center.x - diag.x,this.center.y + diag.y,this.center.z + diag.z));
		edges.push(new com_gdx_math_Vector3(this.center.x - diag.x,this.center.y - diag.y,this.center.z + diag.z));
		edges.push(new com_gdx_math_Vector3(this.center.x - diag.x,this.center.y + diag.y,this.center.z - diag.z));
		edges.push(new com_gdx_math_Vector3(this.center.x - diag.x,this.center.y - diag.y,this.center.z - diag.z));
	}
	,update: function(world) {
		var result = this.minimumWorld;
		result.x = Infinity;
		result.y = Infinity;
		result.z = Infinity;
		var result1 = this.maximumWorld;
		result1.x = -Infinity;
		result1.y = -Infinity;
		result1.z = -Infinity;
		var _g1 = 0;
		var _g = this.vectors.length;
		while(_g1 < _g) {
			var index = _g1++;
			var v = this.vectorsWorld[index];
			var vector = this.vectors[index];
			var x = vector.x * world.m11 + vector.y * world.m21 + vector.z * world.m31 + world.m41;
			var y = vector.x * world.m12 + vector.y * world.m22 + vector.z * world.m32 + world.m42;
			var z = vector.x * world.m13 + vector.y * world.m23 + vector.z * world.m33 + world.m43;
			var w = vector.x * world.m14 + vector.y * world.m24 + vector.z * world.m34 + world.m44;
			v.x = x / w;
			v.y = y / w;
			v.z = z / w;
			if(v.x < this.minimumWorld.x) {
				this.minimumWorld.x = v.x;
			}
			if(v.y < this.minimumWorld.y) {
				this.minimumWorld.y = v.y;
			}
			if(v.z < this.minimumWorld.z) {
				this.minimumWorld.z = v.z;
			}
			if(v.x > this.maximumWorld.x) {
				this.maximumWorld.x = v.x;
			}
			if(v.y > this.maximumWorld.y) {
				this.maximumWorld.y = v.y;
			}
			if(v.z > this.maximumWorld.z) {
				this.maximumWorld.z = v.z;
			}
		}
		var _this = this.maximumWorld;
		var otherVector = this.minimumWorld;
		var result2 = this.center;
		result2.x = _this.x + otherVector.x;
		result2.y = _this.y + otherVector.y;
		result2.z = _this.z + otherVector.z;
		var _this1 = this.center;
		_this1.x *= 0.5;
		_this1.y *= 0.5;
		_this1.z *= 0.5;
		var array = world.getFloats();
		var result3 = this.directions[0];
		result3.x = array[0];
		result3.y = array[1];
		result3.z = array[2];
		var array1 = world.getFloats();
		var result4 = this.directions[1];
		result4.x = array1[4];
		result4.y = array1[5];
		result4.z = array1[6];
		var array2 = world.getFloats();
		var result5 = this.directions[2];
		result5.x = array2[8];
		result5.y = array2[9];
		result5.z = array2[10];
		this._worldMatrix = world;
	}
	,dispose: function() {
		com_gdx_Buffer.prototype.dispose.call(this);
	}
	,__class__: com_gdx_math_BoundingBox
});
var com_gdx_math_BoundingInfo = function(minimum,maximum) {
	this.minimum = minimum;
	this.maximum = maximum;
	this.boundingBox = new com_gdx_math_BoundingBox(minimum,maximum);
	this.boundingSphere = new com_gdx_math_BoundingSphere(minimum,maximum);
};
$hxClasses["com.gdx.math.BoundingInfo"] = com_gdx_math_BoundingInfo;
com_gdx_math_BoundingInfo.__name__ = true;
com_gdx_math_BoundingInfo.prototype = {
	isInFrustum: function(frustumPlanes) {
		if(!this.boundingSphere.isInFrustum(frustumPlanes)) {
			return false;
		}
		return com_gdx_math_BoundingBox.IsInFrustum(this.boundingBox.vectorsWorld,frustumPlanes);
	}
	,__class__: com_gdx_math_BoundingInfo
};
var com_gdx_math_BoundingSphere = function(minimum,maximum) {
	this._tempRadiusVector = new com_gdx_math_Vector3(0,0,0);
	this.minimum = minimum;
	this.maximum = maximum;
	var x = minimum.x - maximum.x;
	var y = minimum.y - maximum.y;
	var z = minimum.z - maximum.z;
	var distance = Math.sqrt(x * x + y * y + z * z);
	var x1 = minimum.x + (maximum.x - minimum.x) * 0.5;
	var y1 = minimum.y + (maximum.y - minimum.y) * 0.5;
	var z1 = minimum.z + (maximum.z - minimum.z) * 0.5;
	this.center = new com_gdx_math_Vector3(x1,y1,z1);
	this.radius = distance * 0.5;
	this.centerWorld = new com_gdx_math_Vector3(0,0,0);
	var result = new com_gdx_math_Matrix();
	result.m11 = 1.0;
	result.m12 = 0;
	result.m13 = 0;
	result.m14 = 0;
	result.m21 = 0;
	result.m22 = 1.0;
	result.m23 = 0;
	result.m24 = 0;
	result.m31 = 0;
	result.m32 = 0;
	result.m33 = 1.0;
	result.m34 = 0;
	result.m41 = 0;
	result.m42 = 0;
	result.m43 = 0;
	result.m44 = 1.0;
	var world = result;
	var vector = this.center;
	var result1 = this.centerWorld;
	var x2 = vector.x * world.m11 + vector.y * world.m21 + vector.z * world.m31 + world.m41;
	var y2 = vector.x * world.m12 + vector.y * world.m22 + vector.z * world.m32 + world.m42;
	var z2 = vector.x * world.m13 + vector.y * world.m23 + vector.z * world.m33 + world.m43;
	var w = vector.x * world.m14 + vector.y * world.m24 + vector.z * world.m34 + world.m44;
	result1.x = x2 / w;
	result1.y = y2 / w;
	result1.z = z2 / w;
	var result2 = this._tempRadiusVector;
	result2.x = world.m11 + world.m21 + world.m31;
	result2.y = world.m12 + world.m22 + world.m32;
	result2.z = world.m13 + world.m23 + world.m33;
	var f = this._tempRadiusVector.x;
	var a = f < 0 ? -f : f;
	var f1 = this._tempRadiusVector.y;
	var b = f1 < 0 ? -f1 : f1;
	var a1 = a < b ? b : a;
	var f2 = this._tempRadiusVector.z;
	var b1 = f2 < 0 ? -f2 : f2;
	this.radiusWorld = (a1 < b1 ? b1 : a1) * this.radius;
};
$hxClasses["com.gdx.math.BoundingSphere"] = com_gdx_math_BoundingSphere;
com_gdx_math_BoundingSphere.__name__ = true;
com_gdx_math_BoundingSphere.prototype = {
	isInFrustum: function(frustumPlanes) {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var _this = frustumPlanes[i];
			var point = this.centerWorld;
			if(_this.normal.x * point.x + _this.normal.y * point.y + _this.normal.z * point.z + _this.d <= -this.radiusWorld) {
				return false;
			}
		}
		return true;
	}
	,__class__: com_gdx_math_BoundingSphere
};
var com_gdx_math_Quaternion = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["com.gdx.math.Quaternion"] = com_gdx_math_Quaternion;
com_gdx_math_Quaternion.__name__ = true;
com_gdx_math_Quaternion.prototype = {
	__class__: com_gdx_math_Quaternion
};
var com_gdx_math_Matrix = function() {
};
$hxClasses["com.gdx.math.Matrix"] = com_gdx_math_Matrix;
com_gdx_math_Matrix.__name__ = true;
com_gdx_math_Matrix.FromValuesToRef = function(initialM11,initialM12,initialM13,initialM14,initialM21,initialM22,initialM23,initialM24,initialM31,initialM32,initialM33,initialM34,initialM41,initialM42,initialM43,initialM44,result) {
	result.m11 = initialM11;
	result.m12 = initialM12;
	result.m13 = initialM13;
	result.m14 = initialM14;
	result.m21 = initialM21;
	result.m22 = initialM22;
	result.m23 = initialM23;
	result.m24 = initialM24;
	result.m31 = initialM31;
	result.m32 = initialM32;
	result.m33 = initialM33;
	result.m34 = initialM34;
	result.m41 = initialM41;
	result.m42 = initialM42;
	result.m43 = initialM43;
	result.m44 = initialM44;
};
com_gdx_math_Matrix.TranslationToRef = function(x,y,z,result) {
	com_gdx_math_Matrix.FromValuesToRef(1.0,0,0,0,0,1.0,0,0,0,0,1.0,0,x,y,z,1.0,result);
};
com_gdx_math_Matrix.LookAtLHToRef = function(eye,target,up,result) {
	var result1 = com_gdx_math_Matrix._zAxis;
	result1.x = target.x - eye.x;
	result1.y = target.y - eye.y;
	result1.z = target.z - eye.z;
	com_gdx_math_Matrix._zAxis.normalize();
	var right = com_gdx_math_Matrix._zAxis;
	var result2 = com_gdx_math_Matrix._xAxis;
	result2.x = up.y * right.z - up.z * right.y;
	result2.y = up.z * right.x - up.x * right.z;
	result2.z = up.x * right.y - up.y * right.x;
	com_gdx_math_Matrix._xAxis.normalize();
	var left = com_gdx_math_Matrix._zAxis;
	var right1 = com_gdx_math_Matrix._xAxis;
	var result3 = com_gdx_math_Matrix._yAxis;
	result3.x = left.y * right1.z - left.z * right1.y;
	result3.y = left.z * right1.x - left.x * right1.z;
	result3.z = left.x * right1.y - left.y * right1.x;
	com_gdx_math_Matrix._yAxis.normalize();
	var left1 = com_gdx_math_Matrix._xAxis;
	var ex = -(left1.x * eye.x + left1.y * eye.y + left1.z * eye.z);
	var left2 = com_gdx_math_Matrix._yAxis;
	var ey = -(left2.x * eye.x + left2.y * eye.y + left2.z * eye.z);
	var left3 = com_gdx_math_Matrix._zAxis;
	var ez = -(left3.x * eye.x + left3.y * eye.y + left3.z * eye.z);
	com_gdx_math_Matrix.FromValuesToRef(com_gdx_math_Matrix._xAxis.x,com_gdx_math_Matrix._yAxis.x,com_gdx_math_Matrix._zAxis.x,0,com_gdx_math_Matrix._xAxis.y,com_gdx_math_Matrix._yAxis.y,com_gdx_math_Matrix._zAxis.y,0,com_gdx_math_Matrix._xAxis.z,com_gdx_math_Matrix._yAxis.z,com_gdx_math_Matrix._zAxis.z,0,ex,ey,ez,1,result);
	return;
};
com_gdx_math_Matrix.OrthoOffCenterLHToRef = function(left,right,bottom,top,znear,zfar,result) {
	result.m11 = 2.0 / (right - left);
	result.m12 = result.m13 = result.m14 = 0;
	result.m22 = 2.0 / (top - bottom);
	result.m21 = result.m23 = result.m24 = 0;
	result.m33 = -1.0 / (znear - zfar);
	result.m31 = result.m32 = result.m34 = 0;
	result.m41 = (left + right) / (left - right);
	result.m42 = (top + bottom) / (bottom - top);
	result.m43 = znear / (znear - zfar);
	result.m44 = 1.0;
};
com_gdx_math_Matrix.PerspectiveFovLHToRef = function(fov,aspect,znear,zfar,result,fovMode) {
	var tan = 1.0 / Math.tan(fov * 0.5);
	var v_fixed = fovMode == null || fovMode == 0;
	var h_fixed = fovMode == 1;
	if(v_fixed) {
		result.m11 = tan / aspect;
	} else if(h_fixed) {
		result.m11 = tan;
	}
	result.m12 = result.m13 = result.m14 = 0.0;
	if(v_fixed) {
		result.m22 = tan;
	} else if(h_fixed) {
		result.m22 = tan * aspect;
	}
	result.m21 = result.m23 = result.m24 = 0.0;
	result.m31 = result.m32 = 0.0;
	result.m33 = -zfar / (znear - zfar);
	result.m34 = 1.0;
	result.m41 = result.m42 = result.m44 = 0.0;
	result.m43 = znear * zfar / (znear - zfar);
};
com_gdx_math_Matrix.prototype = {
	getRotationDegrees: function() {
		var Y = -Math.asin(this.m13);
		var C = Math.cos(Y);
		Y *= com_gdx_util_Util.Rad2Deg;
		var rotx;
		var roty;
		var X;
		var Z;
		if((C < 0 ? -C : C) > 0.00000001) {
			var invC = 1.0 / C;
			rotx = this.m33 * invC;
			roty = this.m23 * invC;
			X = Math.atan2(roty,rotx) * com_gdx_util_Util.Rad2Deg;
			rotx = this.m11 * invC;
			roty = this.m12 * invC;
			Z = Math.atan2(roty,rotx) * com_gdx_util_Util.Rad2Deg;
		} else {
			X = 0.0;
			rotx = this.m22;
			roty = -this.m21;
			Z = Math.atan2(roty,rotx) * com_gdx_util_Util.Rad2Deg;
		}
		if(X < 0.0) {
			X += 360.0;
		}
		if(Y < 0.0) {
			Y += 360.0;
		}
		if(Z < 0.0) {
			Z += 360.0;
		}
		return new com_gdx_math_Vector3(X,Y,Z);
	}
	,getFloats: function() {
		return [this.m11,this.m12,this.m13,this.m14,this.m21,this.m22,this.m23,this.m24,this.m31,this.m32,this.m33,this.m34,this.m41,this.m42,this.m43,this.m44];
	}
	,toArray: function() {
		var array = this.getFloats();
		var this1;
		if(array != null) {
			this1 = new Float32Array(array);
		} else {
			this1 = null;
		}
		return this1;
	}
	,asArray: function() {
		return this.toArray();
	}
	,invert: function() {
		var l1 = this.m11;
		var l2 = this.m12;
		var l3 = this.m13;
		var l4 = this.m14;
		var l5 = this.m21;
		var l6 = this.m22;
		var l7 = this.m23;
		var l8 = this.m24;
		var l9 = this.m31;
		var l10 = this.m32;
		var l11 = this.m33;
		var l12 = this.m34;
		var l13 = this.m41;
		var l14 = this.m42;
		var l15 = this.m43;
		var l16 = this.m44;
		var l17 = l11 * l16 - l12 * l15;
		var l18 = l10 * l16 - l12 * l14;
		var l19 = l10 * l15 - l11 * l14;
		var l20 = l9 * l16 - l12 * l13;
		var l21 = l9 * l15 - l11 * l13;
		var l22 = l9 * l14 - l10 * l13;
		var l23 = l6 * l17 - l7 * l18 + l8 * l19;
		var l24 = -(l5 * l17 - l7 * l20 + l8 * l21);
		var l25 = l5 * l18 - l6 * l20 + l8 * l22;
		var l26 = -(l5 * l19 - l6 * l21 + l7 * l22);
		var l27 = 1.0 / (l1 * l23 + l2 * l24 + l3 * l25 + l4 * l26);
		var l28 = l7 * l16 - l8 * l15;
		var l29 = l6 * l16 - l8 * l14;
		var l30 = l6 * l15 - l7 * l14;
		var l31 = l5 * l16 - l8 * l13;
		var l32 = l5 * l15 - l7 * l13;
		var l33 = l5 * l14 - l6 * l13;
		var l34 = l7 * l12 - l8 * l11;
		var l35 = l6 * l12 - l8 * l10;
		var l36 = l6 * l11 - l7 * l10;
		var l37 = l5 * l12 - l8 * l9;
		var l38 = l5 * l11 - l7 * l9;
		var l39 = l5 * l10 - l6 * l9;
		this.m11 = l23 * l27;
		this.m21 = l24 * l27;
		this.m31 = l25 * l27;
		this.m41 = l26 * l27;
		this.m12 = -(l2 * l17 - l3 * l18 + l4 * l19) * l27;
		this.m22 = (l1 * l17 - l3 * l20 + l4 * l21) * l27;
		this.m32 = -(l1 * l18 - l2 * l20 + l4 * l22) * l27;
		this.m42 = (l1 * l19 - l2 * l21 + l3 * l22) * l27;
		this.m13 = (l2 * l28 - l3 * l29 + l4 * l30) * l27;
		this.m23 = -(l1 * l28 - l3 * l31 + l4 * l32) * l27;
		this.m33 = (l1 * l29 - l2 * l31 + l4 * l33) * l27;
		this.m43 = -(l1 * l30 - l2 * l32 + l3 * l33) * l27;
		this.m14 = -(l2 * l34 - l3 * l35 + l4 * l36) * l27;
		this.m24 = (l1 * l34 - l3 * l37 + l4 * l38) * l27;
		this.m34 = -(l1 * l35 - l2 * l37 + l4 * l39) * l27;
		this.m44 = (l1 * l36 - l2 * l38 + l3 * l39) * l27;
		return this;
	}
	,multiplyToRef: function(other,result) {
		result.m11 = this.m11 * other.m11 + this.m12 * other.m21 + this.m13 * other.m31 + this.m14 * other.m41;
		result.m12 = this.m11 * other.m12 + this.m12 * other.m22 + this.m13 * other.m32 + this.m14 * other.m42;
		result.m13 = this.m11 * other.m13 + this.m12 * other.m23 + this.m13 * other.m33 + this.m14 * other.m43;
		result.m14 = this.m11 * other.m14 + this.m12 * other.m24 + this.m13 * other.m34 + this.m14 * other.m44;
		result.m21 = this.m21 * other.m11 + this.m22 * other.m21 + this.m23 * other.m31 + this.m24 * other.m41;
		result.m22 = this.m21 * other.m12 + this.m22 * other.m22 + this.m23 * other.m32 + this.m24 * other.m42;
		result.m23 = this.m21 * other.m13 + this.m22 * other.m23 + this.m23 * other.m33 + this.m24 * other.m43;
		result.m24 = this.m21 * other.m14 + this.m22 * other.m24 + this.m23 * other.m34 + this.m24 * other.m44;
		result.m31 = this.m31 * other.m11 + this.m32 * other.m21 + this.m33 * other.m31 + this.m34 * other.m41;
		result.m32 = this.m31 * other.m12 + this.m32 * other.m22 + this.m33 * other.m32 + this.m34 * other.m42;
		result.m33 = this.m31 * other.m13 + this.m32 * other.m23 + this.m33 * other.m33 + this.m34 * other.m43;
		result.m34 = this.m31 * other.m14 + this.m32 * other.m24 + this.m33 * other.m34 + this.m34 * other.m44;
		result.m41 = this.m41 * other.m11 + this.m42 * other.m21 + this.m43 * other.m31 + this.m44 * other.m41;
		result.m42 = this.m41 * other.m12 + this.m42 * other.m22 + this.m43 * other.m32 + this.m44 * other.m42;
		result.m43 = this.m41 * other.m13 + this.m42 * other.m23 + this.m43 * other.m33 + this.m44 * other.m43;
		result.m44 = this.m41 * other.m14 + this.m42 * other.m24 + this.m43 * other.m34 + this.m44 * other.m44;
	}
	,__class__: com_gdx_math_Matrix
};
var com_gdx_math_Plane = function(a,b,c,d) {
	this.normal = new com_gdx_math_Vector3(a,b,c);
	this.d = d;
};
$hxClasses["com.gdx.math.Plane"] = com_gdx_math_Plane;
com_gdx_math_Plane.__name__ = true;
com_gdx_math_Plane.prototype = {
	__class__: com_gdx_math_Plane
};
var com_gdx_math_Ray = function(origin,direction,length) {
	this.origin = origin;
	this.direction = direction;
	this.length = length != null ? length : Infinity;
};
$hxClasses["com.gdx.math.Ray"] = com_gdx_math_Ray;
com_gdx_math_Ray.__name__ = true;
com_gdx_math_Ray.CreateNew = function(x,y,viewportWidth,viewportHeight,world,view,projection) {
	var source = new com_gdx_math_Vector3(x,y,0);
	var result = new com_gdx_math_Matrix();
	result.m11 = world.m11 * view.m11 + world.m12 * view.m21 + world.m13 * view.m31 + world.m14 * view.m41;
	result.m12 = world.m11 * view.m12 + world.m12 * view.m22 + world.m13 * view.m32 + world.m14 * view.m42;
	result.m13 = world.m11 * view.m13 + world.m12 * view.m23 + world.m13 * view.m33 + world.m14 * view.m43;
	result.m14 = world.m11 * view.m14 + world.m12 * view.m24 + world.m13 * view.m34 + world.m14 * view.m44;
	result.m21 = world.m21 * view.m11 + world.m22 * view.m21 + world.m23 * view.m31 + world.m24 * view.m41;
	result.m22 = world.m21 * view.m12 + world.m22 * view.m22 + world.m23 * view.m32 + world.m24 * view.m42;
	result.m23 = world.m21 * view.m13 + world.m22 * view.m23 + world.m23 * view.m33 + world.m24 * view.m43;
	result.m24 = world.m21 * view.m14 + world.m22 * view.m24 + world.m23 * view.m34 + world.m24 * view.m44;
	result.m31 = world.m31 * view.m11 + world.m32 * view.m21 + world.m33 * view.m31 + world.m34 * view.m41;
	result.m32 = world.m31 * view.m12 + world.m32 * view.m22 + world.m33 * view.m32 + world.m34 * view.m42;
	result.m33 = world.m31 * view.m13 + world.m32 * view.m23 + world.m33 * view.m33 + world.m34 * view.m43;
	result.m34 = world.m31 * view.m14 + world.m32 * view.m24 + world.m33 * view.m34 + world.m34 * view.m44;
	result.m41 = world.m41 * view.m11 + world.m42 * view.m21 + world.m43 * view.m31 + world.m44 * view.m41;
	result.m42 = world.m41 * view.m12 + world.m42 * view.m22 + world.m43 * view.m32 + world.m44 * view.m42;
	result.m43 = world.m41 * view.m13 + world.m42 * view.m23 + world.m43 * view.m33 + world.m44 * view.m43;
	result.m44 = world.m41 * view.m14 + world.m42 * view.m24 + world.m43 * view.m34 + world.m44 * view.m44;
	var _this = result;
	var result1 = new com_gdx_math_Matrix();
	result1.m11 = _this.m11 * projection.m11 + _this.m12 * projection.m21 + _this.m13 * projection.m31 + _this.m14 * projection.m41;
	result1.m12 = _this.m11 * projection.m12 + _this.m12 * projection.m22 + _this.m13 * projection.m32 + _this.m14 * projection.m42;
	result1.m13 = _this.m11 * projection.m13 + _this.m12 * projection.m23 + _this.m13 * projection.m33 + _this.m14 * projection.m43;
	result1.m14 = _this.m11 * projection.m14 + _this.m12 * projection.m24 + _this.m13 * projection.m34 + _this.m14 * projection.m44;
	result1.m21 = _this.m21 * projection.m11 + _this.m22 * projection.m21 + _this.m23 * projection.m31 + _this.m24 * projection.m41;
	result1.m22 = _this.m21 * projection.m12 + _this.m22 * projection.m22 + _this.m23 * projection.m32 + _this.m24 * projection.m42;
	result1.m23 = _this.m21 * projection.m13 + _this.m22 * projection.m23 + _this.m23 * projection.m33 + _this.m24 * projection.m43;
	result1.m24 = _this.m21 * projection.m14 + _this.m22 * projection.m24 + _this.m23 * projection.m34 + _this.m24 * projection.m44;
	result1.m31 = _this.m31 * projection.m11 + _this.m32 * projection.m21 + _this.m33 * projection.m31 + _this.m34 * projection.m41;
	result1.m32 = _this.m31 * projection.m12 + _this.m32 * projection.m22 + _this.m33 * projection.m32 + _this.m34 * projection.m42;
	result1.m33 = _this.m31 * projection.m13 + _this.m32 * projection.m23 + _this.m33 * projection.m33 + _this.m34 * projection.m43;
	result1.m34 = _this.m31 * projection.m14 + _this.m32 * projection.m24 + _this.m33 * projection.m34 + _this.m34 * projection.m44;
	result1.m41 = _this.m41 * projection.m11 + _this.m42 * projection.m21 + _this.m43 * projection.m31 + _this.m44 * projection.m41;
	result1.m42 = _this.m41 * projection.m12 + _this.m42 * projection.m22 + _this.m43 * projection.m32 + _this.m44 * projection.m42;
	result1.m43 = _this.m41 * projection.m13 + _this.m42 * projection.m23 + _this.m43 * projection.m33 + _this.m44 * projection.m43;
	result1.m44 = _this.m41 * projection.m14 + _this.m42 * projection.m24 + _this.m43 * projection.m34 + _this.m44 * projection.m44;
	var matrix = result1;
	matrix.invert();
	source.x = source.x / viewportWidth * 2 - 1;
	source.y = -(source.y / viewportHeight * 2 - 1);
	var result2 = new com_gdx_math_Vector3(0,0,0);
	var x1 = source.x * matrix.m11 + source.y * matrix.m21 + source.z * matrix.m31 + matrix.m41;
	var y1 = source.x * matrix.m12 + source.y * matrix.m22 + source.z * matrix.m32 + matrix.m42;
	var z = source.x * matrix.m13 + source.y * matrix.m23 + source.z * matrix.m33 + matrix.m43;
	var w = source.x * matrix.m14 + source.y * matrix.m24 + source.z * matrix.m34 + matrix.m44;
	result2.x = x1 / w;
	result2.y = y1 / w;
	result2.z = z / w;
	var vector = result2;
	var num = source.x * matrix.m14 + source.y * matrix.m24 + source.z * matrix.m34 + matrix.m44;
	var num1 = num - 1.0;
	if(-1.401298e-045 <= num1 && num1 <= 1.401298E-45) {
		var scale = 1.0 / num;
		vector = new com_gdx_math_Vector3(vector.x * scale,vector.y * scale,vector.z * scale);
	}
	var start = vector;
	var source1 = new com_gdx_math_Vector3(x,y,1);
	var result3 = new com_gdx_math_Matrix();
	result3.m11 = world.m11 * view.m11 + world.m12 * view.m21 + world.m13 * view.m31 + world.m14 * view.m41;
	result3.m12 = world.m11 * view.m12 + world.m12 * view.m22 + world.m13 * view.m32 + world.m14 * view.m42;
	result3.m13 = world.m11 * view.m13 + world.m12 * view.m23 + world.m13 * view.m33 + world.m14 * view.m43;
	result3.m14 = world.m11 * view.m14 + world.m12 * view.m24 + world.m13 * view.m34 + world.m14 * view.m44;
	result3.m21 = world.m21 * view.m11 + world.m22 * view.m21 + world.m23 * view.m31 + world.m24 * view.m41;
	result3.m22 = world.m21 * view.m12 + world.m22 * view.m22 + world.m23 * view.m32 + world.m24 * view.m42;
	result3.m23 = world.m21 * view.m13 + world.m22 * view.m23 + world.m23 * view.m33 + world.m24 * view.m43;
	result3.m24 = world.m21 * view.m14 + world.m22 * view.m24 + world.m23 * view.m34 + world.m24 * view.m44;
	result3.m31 = world.m31 * view.m11 + world.m32 * view.m21 + world.m33 * view.m31 + world.m34 * view.m41;
	result3.m32 = world.m31 * view.m12 + world.m32 * view.m22 + world.m33 * view.m32 + world.m34 * view.m42;
	result3.m33 = world.m31 * view.m13 + world.m32 * view.m23 + world.m33 * view.m33 + world.m34 * view.m43;
	result3.m34 = world.m31 * view.m14 + world.m32 * view.m24 + world.m33 * view.m34 + world.m34 * view.m44;
	result3.m41 = world.m41 * view.m11 + world.m42 * view.m21 + world.m43 * view.m31 + world.m44 * view.m41;
	result3.m42 = world.m41 * view.m12 + world.m42 * view.m22 + world.m43 * view.m32 + world.m44 * view.m42;
	result3.m43 = world.m41 * view.m13 + world.m42 * view.m23 + world.m43 * view.m33 + world.m44 * view.m43;
	result3.m44 = world.m41 * view.m14 + world.m42 * view.m24 + world.m43 * view.m34 + world.m44 * view.m44;
	var _this1 = result3;
	var result4 = new com_gdx_math_Matrix();
	result4.m11 = _this1.m11 * projection.m11 + _this1.m12 * projection.m21 + _this1.m13 * projection.m31 + _this1.m14 * projection.m41;
	result4.m12 = _this1.m11 * projection.m12 + _this1.m12 * projection.m22 + _this1.m13 * projection.m32 + _this1.m14 * projection.m42;
	result4.m13 = _this1.m11 * projection.m13 + _this1.m12 * projection.m23 + _this1.m13 * projection.m33 + _this1.m14 * projection.m43;
	result4.m14 = _this1.m11 * projection.m14 + _this1.m12 * projection.m24 + _this1.m13 * projection.m34 + _this1.m14 * projection.m44;
	result4.m21 = _this1.m21 * projection.m11 + _this1.m22 * projection.m21 + _this1.m23 * projection.m31 + _this1.m24 * projection.m41;
	result4.m22 = _this1.m21 * projection.m12 + _this1.m22 * projection.m22 + _this1.m23 * projection.m32 + _this1.m24 * projection.m42;
	result4.m23 = _this1.m21 * projection.m13 + _this1.m22 * projection.m23 + _this1.m23 * projection.m33 + _this1.m24 * projection.m43;
	result4.m24 = _this1.m21 * projection.m14 + _this1.m22 * projection.m24 + _this1.m23 * projection.m34 + _this1.m24 * projection.m44;
	result4.m31 = _this1.m31 * projection.m11 + _this1.m32 * projection.m21 + _this1.m33 * projection.m31 + _this1.m34 * projection.m41;
	result4.m32 = _this1.m31 * projection.m12 + _this1.m32 * projection.m22 + _this1.m33 * projection.m32 + _this1.m34 * projection.m42;
	result4.m33 = _this1.m31 * projection.m13 + _this1.m32 * projection.m23 + _this1.m33 * projection.m33 + _this1.m34 * projection.m43;
	result4.m34 = _this1.m31 * projection.m14 + _this1.m32 * projection.m24 + _this1.m33 * projection.m34 + _this1.m34 * projection.m44;
	result4.m41 = _this1.m41 * projection.m11 + _this1.m42 * projection.m21 + _this1.m43 * projection.m31 + _this1.m44 * projection.m41;
	result4.m42 = _this1.m41 * projection.m12 + _this1.m42 * projection.m22 + _this1.m43 * projection.m32 + _this1.m44 * projection.m42;
	result4.m43 = _this1.m41 * projection.m13 + _this1.m42 * projection.m23 + _this1.m43 * projection.m33 + _this1.m44 * projection.m43;
	result4.m44 = _this1.m41 * projection.m14 + _this1.m42 * projection.m24 + _this1.m43 * projection.m34 + _this1.m44 * projection.m44;
	var matrix1 = result4;
	matrix1.invert();
	source1.x = source1.x / viewportWidth * 2 - 1;
	source1.y = -(source1.y / viewportHeight * 2 - 1);
	var result5 = new com_gdx_math_Vector3(0,0,0);
	var x2 = source1.x * matrix1.m11 + source1.y * matrix1.m21 + source1.z * matrix1.m31 + matrix1.m41;
	var y2 = source1.x * matrix1.m12 + source1.y * matrix1.m22 + source1.z * matrix1.m32 + matrix1.m42;
	var z1 = source1.x * matrix1.m13 + source1.y * matrix1.m23 + source1.z * matrix1.m33 + matrix1.m43;
	var w1 = source1.x * matrix1.m14 + source1.y * matrix1.m24 + source1.z * matrix1.m34 + matrix1.m44;
	result5.x = x2 / w1;
	result5.y = y2 / w1;
	result5.z = z1 / w1;
	var vector1 = result5;
	var num2 = source1.x * matrix1.m14 + source1.y * matrix1.m24 + source1.z * matrix1.m34 + matrix1.m44;
	var num3 = num2 - 1.0;
	if(-1.401298e-045 <= num3 && num3 <= 1.401298E-45) {
		var scale1 = 1.0 / num2;
		vector1 = new com_gdx_math_Vector3(vector1.x * scale1,vector1.y * scale1,vector1.z * scale1);
	}
	var end = vector1;
	var direction = new com_gdx_math_Vector3(end.x - start.x,end.y - start.y,end.z - start.z);
	direction.normalize();
	return new com_gdx_math_Ray(start,direction);
};
com_gdx_math_Ray.prototype = {
	intersectsBoxMinMax: function(minimum,maximum) {
		var d = 0.0;
		var maxValue = Infinity;
		var f = this.direction.x;
		if((f < 0 ? -f : f) < 0.0000001) {
			if(this.origin.x < minimum.x || this.origin.x > maximum.x) {
				return false;
			}
		} else {
			var inv = 1.0 / this.direction.x;
			var min = (minimum.x - this.origin.x) * inv;
			var max = (maximum.x - this.origin.x) * inv;
			if(max == -Infinity) {
				max = Infinity;
			}
			if(min > max) {
				var temp = min;
				min = max;
				max = temp;
			}
			if(min < d) {
				d = d;
			} else {
				d = min;
			}
			if(max > maxValue) {
				maxValue = maxValue;
			} else {
				maxValue = max;
			}
			if(d > maxValue) {
				return false;
			}
		}
		var f1 = this.direction.y;
		if((f1 < 0 ? -f1 : f1) < 0.0000001) {
			if(this.origin.y < minimum.y || this.origin.y > maximum.y) {
				return false;
			}
		} else {
			var inv1 = 1.0 / this.direction.y;
			var min1 = (minimum.y - this.origin.y) * inv1;
			var max1 = (maximum.y - this.origin.y) * inv1;
			if(max1 == -Infinity) {
				max1 = Infinity;
			}
			if(min1 > max1) {
				var temp1 = min1;
				min1 = max1;
				max1 = temp1;
			}
			if(min1 < d) {
				d = d;
			} else {
				d = min1;
			}
			if(max1 > maxValue) {
				maxValue = maxValue;
			} else {
				maxValue = max1;
			}
			if(d > maxValue) {
				return false;
			}
		}
		var f2 = this.direction.z;
		if((f2 < 0 ? -f2 : f2) < 0.0000001) {
			if(this.origin.z < minimum.z || this.origin.z > maximum.z) {
				return false;
			}
		} else {
			var inv2 = 1.0 / this.direction.z;
			var min2 = (minimum.z - this.origin.z) * inv2;
			var max2 = (maximum.z - this.origin.z) * inv2;
			if(max2 == -Infinity) {
				max2 = Infinity;
			}
			if(min2 > max2) {
				var temp2 = min2;
				min2 = max2;
				max2 = temp2;
			}
			if(min2 < d) {
				d = d;
			} else {
				d = min2;
			}
			if(max2 > maxValue) {
				maxValue = maxValue;
			} else {
				maxValue = max2;
			}
			if(d > maxValue) {
				return false;
			}
		}
		return true;
	}
	,intersectsTriangle: function(vertex0,vertex1,vertex2) {
		if(this._edge1 == null) {
			this._edge1 = new com_gdx_math_Vector3(0,0,0);
			this._edge2 = new com_gdx_math_Vector3(0,0,0);
			this._pvec = new com_gdx_math_Vector3(0,0,0);
			this._tvec = new com_gdx_math_Vector3(0,0,0);
			this._qvec = new com_gdx_math_Vector3(0,0,0);
		}
		var result = this._edge1;
		result.x = vertex1.x - vertex0.x;
		result.y = vertex1.y - vertex0.y;
		result.z = vertex1.z - vertex0.z;
		var result1 = this._edge2;
		result1.x = vertex2.x - vertex0.x;
		result1.y = vertex2.y - vertex0.y;
		result1.z = vertex2.z - vertex0.z;
		var left = this.direction;
		var right = this._edge2;
		var result2 = this._pvec;
		result2.x = left.y * right.z - left.z * right.y;
		result2.y = left.z * right.x - left.x * right.z;
		result2.z = left.x * right.y - left.y * right.x;
		var left1 = this._edge1;
		var right1 = this._pvec;
		var det = left1.x * right1.x + left1.y * right1.y + left1.z * right1.z;
		if(det == 0) {
			return 0;
		}
		var invdet = 1 / det;
		var _this = this.origin;
		var result3 = this._tvec;
		result3.x = _this.x - vertex0.x;
		result3.y = _this.y - vertex0.y;
		result3.z = _this.z - vertex0.z;
		var left2 = this._tvec;
		var right2 = this._pvec;
		var bu = (left2.x * right2.x + left2.y * right2.y + left2.z * right2.z) * invdet;
		if(bu < 0 || bu > 1.0) {
			return 0;
		}
		var left3 = this._tvec;
		var right3 = this._edge1;
		var result4 = this._qvec;
		result4.x = left3.y * right3.z - left3.z * right3.y;
		result4.y = left3.z * right3.x - left3.x * right3.z;
		result4.z = left3.x * right3.y - left3.y * right3.x;
		var left4 = this.direction;
		var right4 = this._qvec;
		var bv = (left4.x * right4.x + left4.y * right4.y + left4.z * right4.z) * invdet;
		if(bv < 0 || bu + bv > 1.0) {
			return 0;
		}
		var left5 = this._edge2;
		var right5 = this._qvec;
		var t = (left5.x * right5.x + left5.y * right5.y + left5.z * right5.z) * invdet;
		return t;
	}
	,__class__: com_gdx_math_Ray
};
var com_gdx_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["com.gdx.math.Rectangle"] = com_gdx_math_Rectangle;
com_gdx_math_Rectangle.__name__ = true;
com_gdx_math_Rectangle.prototype = {
	setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,__class__: com_gdx_math_Rectangle
};
var com_gdx_math_Vector2 = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["com.gdx.math.Vector2"] = com_gdx_math_Vector2;
com_gdx_math_Vector2.__name__ = true;
com_gdx_math_Vector2.prototype = {
	normalize: function() {
		var len = Math.sqrt(this.x * this.x + this.y * this.y);
		if(len == 0) {
			return this;
		}
		var num = 1.0 / len;
		this.x *= num;
		this.y *= num;
		return this;
	}
	,__class__: com_gdx_math_Vector2
};
var com_gdx_scene2d_Graphic = function() {
	com_gdx_Buffer.call(this);
	this.active = true;
	this.x = 0;
	this.y = 0;
	this.blendMode = 0;
	this._color = 16777215;
	this._red = this._green = this._blue = 1;
	this.set_alpha(1);
	this.scaleX = this.scaleY = 1;
};
$hxClasses["com.gdx.scene2d.Graphic"] = com_gdx_scene2d_Graphic;
com_gdx_scene2d_Graphic.__name__ = true;
com_gdx_scene2d_Graphic.__super__ = com_gdx_Buffer;
com_gdx_scene2d_Graphic.prototype = $extend(com_gdx_Buffer.prototype,{
	get_alpha: function() {
		return this._alpha;
	}
	,set_alpha: function(value) {
		if(value < 0) {
			value = 0;
		} else if(value > 1) {
			value = 1;
		} else {
			value = value;
		}
		if(this._alpha == value) {
			return value;
		}
		this._alpha = value;
		return this._alpha;
	}
	,render: function(batch) {
	}
	,__class__: com_gdx_scene2d_Graphic
});
var com_gdx_scene2d_render_SpriteBatch = function(c,capacity) {
	this.invTexHeight = 0;
	this.invTexWidth = 0;
	this.shader = js_Boot.__cast(com_gdx_Gdx.Instance().materials[3] , com_gdx_gl_shaders_ShaderTexture);
	this.camera = c;
	var result = new com_gdx_math_Matrix();
	result.m11 = 1.0;
	result.m12 = 0;
	result.m13 = 0;
	result.m14 = 0;
	result.m21 = 0;
	result.m22 = 1.0;
	result.m23 = 0;
	result.m24 = 0;
	result.m31 = 0;
	result.m32 = 0;
	result.m33 = 1.0;
	result.m34 = 0;
	result.m41 = 0;
	result.m42 = 0;
	result.m43 = 0;
	result.m44 = 1.0;
	this.transform = result;
	this.capacity = capacity;
	this.vertexStrideSize = 36;
	this.numVerts = capacity * this.vertexStrideSize;
	this.numIndices = capacity * 6;
	var elements = this.numVerts;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else {
		this1 = null;
	}
	this.vertices = this1;
	this.index = 0;
	this.left = this.right = this.top = this.bottom = 0;
	var indices = [];
	var index = 0;
	var _g1 = 0;
	var _g = this.numIndices;
	while(_g1 < _g) {
		var count = _g1++;
		indices.push(index);
		indices.push(index + 1);
		indices.push(index + 2);
		indices.push(index);
		indices.push(index + 2);
		indices.push(index + 3);
		index += 4;
	}
	this.drawing = false;
	this.currentBatchSize = 0;
	this.currentBlendMode = 0;
	this.currentBaseTexture = null;
	this.vertexBuffer = com_gdx_Gdx.gl.createBuffer();
	this.indexBuffer = com_gdx_Gdx.gl.createBuffer();
	com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
	var tmp = com_gdx_Gdx.gl;
	var tmp1 = com_gdx_Gdx.gl.ELEMENT_ARRAY_BUFFER;
	var this2;
	if(indices != null) {
		this2 = new Int16Array(indices);
	} else {
		this2 = null;
	}
	lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(tmp,tmp1,this2,com_gdx_Gdx.gl.STATIC_DRAW);
	indices = null;
	com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.vertexBuffer);
	lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(com_gdx_Gdx.gl,com_gdx_Gdx.gl.ARRAY_BUFFER,this.vertices,com_gdx_Gdx.gl.STATIC_DRAW);
};
$hxClasses["com.gdx.scene2d.render.SpriteBatch"] = com_gdx_scene2d_render_SpriteBatch;
com_gdx_scene2d_render_SpriteBatch.__name__ = true;
com_gdx_scene2d_render_SpriteBatch.prototype = {
	Begin: function() {
		com_gdx_Gdx.Instance().setCullFace(false);
		com_gdx_Gdx.Instance().setBlend(true);
		com_gdx_Gdx.Instance().setDepthTest(true);
		com_gdx_Gdx.Instance().setDepthMask(false);
		this.currentBatchSize = 0;
		this.currentBaseTexture = null;
		this.currentBlendMode = -1;
		this.shader.Bind(this.camera.viewMatrix,this.camera.projMatrix,this.transform);
		com_gdx_Gdx.gl.enableVertexAttribArray(this.shader.vertexAttribute);
		com_gdx_Gdx.gl.enableVertexAttribArray(this.shader.texCoord0Attribute);
		com_gdx_Gdx.gl.enableVertexAttribArray(this.shader.colorAttribute);
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.vertexBuffer);
		com_gdx_Gdx.gl.vertexAttribPointer(this.shader.vertexAttribute,3,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,0);
		com_gdx_Gdx.gl.vertexAttribPointer(this.shader.texCoord0Attribute,2,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,12);
		com_gdx_Gdx.gl.vertexAttribPointer(this.shader.colorAttribute,4,com_gdx_Gdx.gl.FLOAT,false,this.vertexStrideSize,20);
		if(this.currentBlendMode != 0) {
			this.setBlendMode(this.currentBlendMode);
		}
	}
	,End: function() {
		this.flush();
	}
	,flush: function() {
		if(this.currentBatchSize == 0) {
			return;
		}
		this.shader.setTexture0(this.currentBaseTexture);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(com_gdx_Gdx.gl,com_gdx_Gdx.gl.ARRAY_BUFFER,this.vertices,com_gdx_Gdx.gl.STATIC_DRAW);
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		com_gdx_Gdx.gl.drawElements(com_gdx_Gdx.gl.TRIANGLES,this.currentBatchSize * 6,com_gdx_Gdx.gl.UNSIGNED_SHORT,0);
		this.currentBatchSize = 0;
	}
	,switchTexture: function(texture) {
		this.flush();
		this.currentBaseTexture = texture;
		this.invTexWidth = 1.0 / texture.width;
		this.invTexHeight = 1.0 / texture.height;
	}
	,setBlendMode: function(blendMode) {
		this.flush();
		this.currentBlendMode = blendMode;
		com_gdx_gl_BlendMode.setBlend(this.currentBlendMode);
	}
	,dispose: function() {
		this.vertices = null;
		com_gdx_Gdx.gl.deleteBuffer(this.indexBuffer);
		com_gdx_Gdx.gl.deleteBuffer(this.vertexBuffer);
	}
	,__class__: com_gdx_scene2d_render_SpriteBatch
};
var com_gdx_scene2d_ui_ImageFont = function(tex,SpacingX,trim) {
	if(trim == null) {
		trim = 0;
	}
	if(SpacingX == null) {
		SpacingX = -8;
	}
	com_gdx_scene2d_Graphic.call(this);
	this._caption = "";
	this._align = 0;
	this.customSpacingX = SpacingX;
	this.customSpacingY = 0;
	this.image = tex;
	this.characterWidth = this.image.width / 16 | 0;
	this.characterHeight = this.image.height / 16 | 0;
	this.characterSpacingX = 0;
	this.characterSpacingY = 0;
	this.characterPerRow = this.image.width / this.characterWidth | 0;
	this.offsetX = 0;
	this.offsetY = 0;
	this.glyphs = [];
	var currentX = this.offsetX;
	var currentY = this.offsetY;
	var r = 0;
	var index = 0;
	var _g = 30;
	while(_g < 200) {
		var c = _g++;
		this.glyphs[index++] = new com_gdx_util_Clip(currentX,currentY,this.characterWidth,this.characterHeight);
		++r;
		if(r == this.characterPerRow) {
			r = 0;
			currentX = this.offsetX;
			currentY += this.characterHeight + this.characterSpacingY;
		} else {
			currentX += this.characterWidth + this.characterSpacingX;
		}
	}
};
$hxClasses["com.gdx.scene2d.ui.ImageFont"] = com_gdx_scene2d_ui_ImageFont;
com_gdx_scene2d_ui_ImageFont.__name__ = true;
com_gdx_scene2d_ui_ImageFont.__super__ = com_gdx_scene2d_Graphic;
com_gdx_scene2d_ui_ImageFont.prototype = $extend(com_gdx_scene2d_Graphic.prototype,{
	set_caption: function(value) {
		this._caption = value;
		return this._caption;
	}
	,getTextWidth: function(caption) {
		var w = 0;
		var textLength = caption.length;
		var _g1 = 0;
		var _g = textLength;
		while(_g1 < _g) {
			var i = _g1++;
			var glyph = this.glyphs[HxOverrides.cca(caption,i)];
			if(glyph != null) {
				w += this.characterWidth + this.customSpacingX;
			}
			w = Math.round(w * this.scaleX);
		}
		return w;
	}
	,render: function(batch) {
		this.print(batch,this._caption,this.x,this.y);
	}
	,print: function(batch,caption,x,y) {
		var cx = 0;
		var cy = 0;
		var X = x;
		var Y = y;
		var newLine = this.characterHeight + this.characterSpacingY;
		var _g = this._align;
		switch(_g) {
		case 0:
			cx = 0;
			break;
		case 1:
			cx = this.getTextWidth(caption);
			break;
		case 2:
			cx = this.getTextWidth(caption) / 2 | 0;
			break;
		default:
			cx = 0;
		}
		var _g2 = 0;
		var _g1 = caption.length;
		while(_g2 < _g1) {
			var c = _g2++;
			if(caption.charAt(c) == " ") {
				X += this.characterWidth + this.customSpacingX;
			} else if(caption.charAt(c) == "\n") {
				Y += newLine;
				X = x - this.characterWidth + this.customSpacingX;
			} else {
				var glyph = this.glyphs[HxOverrides.cca(caption,c)];
				X += this.characterWidth + this.customSpacingX;
				if(glyph != null) {
					var texture = this.image;
					var x1 = X - cx - this.characterWidth;
					var scaleX = this.scaleX;
					var scaleY = this.scaleY;
					var r = this._red;
					var g = this._green;
					var b = this._blue;
					var a = this.get_alpha();
					var blendMode = this.blendMode;
					if(texture != batch.currentBaseTexture || batch.currentBatchSize >= batch.capacity) {
						batch.switchTexture(texture);
					}
					if(blendMode != batch.currentBlendMode) {
						batch.setBlendMode(blendMode);
					}
					var fx = x1;
					var fy = Y;
					var fx2 = x1 + glyph.width;
					var fy2 = Y + glyph.height;
					if(scaleX != 1 || scaleY != 1) {
						fx *= scaleX;
						fy *= scaleY;
						fx2 *= scaleX;
						fy2 *= scaleY;
					}
					var widthTex = texture.width;
					var heightTex = texture.height;
					if(com_gdx_scene2d_render_SpriteBatch.FIX_ARTIFACTS_BY_STRECHING_TEXEL) {
						batch.left = (2 * glyph.x + 1) / (2 * widthTex);
						batch.right = batch.left + (glyph.width * 2 - 2) / (2 * widthTex);
						batch.top = (2 * glyph.y + 1) / (2 * heightTex);
						batch.bottom = batch.top + (glyph.height * 2 - 2) / (2 * heightTex);
					} else {
						batch.left = glyph.x / widthTex;
						batch.right = (glyph.x + glyph.width) / widthTex;
						batch.top = glyph.y / heightTex;
						batch.bottom = (glyph.y + glyph.height) / heightTex;
					}
					var index = batch.currentBatchSize * batch.vertexStrideSize;
					batch.vertices[index++] = fx;
					batch.vertices[index++] = fy;
					batch.vertices[index++] = 0;
					batch.vertices[index++] = batch.left;
					batch.vertices[index++] = batch.top;
					batch.vertices[index++] = r;
					batch.vertices[index++] = g;
					batch.vertices[index++] = b;
					batch.vertices[index++] = a;
					batch.vertices[index++] = fx;
					batch.vertices[index++] = fy2;
					batch.vertices[index++] = 0;
					batch.vertices[index++] = batch.left;
					batch.vertices[index++] = batch.bottom;
					batch.vertices[index++] = r;
					batch.vertices[index++] = g;
					batch.vertices[index++] = b;
					batch.vertices[index++] = a;
					batch.vertices[index++] = fx2;
					batch.vertices[index++] = fy2;
					batch.vertices[index++] = 0;
					batch.vertices[index++] = batch.right;
					batch.vertices[index++] = batch.bottom;
					batch.vertices[index++] = r;
					batch.vertices[index++] = g;
					batch.vertices[index++] = b;
					batch.vertices[index++] = a;
					batch.vertices[index++] = fx2;
					batch.vertices[index++] = fy;
					batch.vertices[index++] = 0;
					batch.vertices[index++] = batch.right;
					batch.vertices[index++] = batch.top;
					batch.vertices[index++] = r;
					batch.vertices[index++] = g;
					batch.vertices[index++] = b;
					batch.vertices[index++] = a;
					batch.currentBatchSize++;
				}
			}
		}
	}
	,dispose: function() {
		com_gdx_scene2d_Graphic.prototype.dispose.call(this);
		var _g1 = 0;
		var _g = this.glyphs.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.glyphs[i] = null;
		}
		this.glyphs = null;
	}
	,__class__: com_gdx_scene2d_ui_ImageFont
});
var com_gdx_scene3d_Mesh = function() {
	com_gdx_Buffer.call(this);
	this.pipline = com_gdx_Gdx.Instance().materials[1];
	this.surfaces = [];
	this.debugFlags = 0;
	this.ContactPoint = new com_gdx_math_Vector3(0,0,0);
	this.ContactNormal = new com_gdx_math_Vector3(0,0,0);
	this.ContactPlane = new com_gdx_math_Plane(0,0,0,0);
	this.ContactDistance = 0;
};
$hxClasses["com.gdx.scene3d.Mesh"] = com_gdx_scene3d_Mesh;
com_gdx_scene3d_Mesh.__name__ = true;
com_gdx_scene3d_Mesh.__super__ = com_gdx_Buffer;
com_gdx_scene3d_Mesh.prototype = $extend(com_gdx_Buffer.prototype,{
	setShader: function(i) {
		var max = com_gdx_Gdx.Instance().materials.length;
		if(i <= 0) {
			i = 0;
		}
		if(i >= max) {
			i = max;
		}
		this.setShaderEx(com_gdx_Gdx.Instance().materials[i]);
	}
	,setShaderEx: function(s) {
		this.pipline = s;
		var _g1 = 0;
		var _g = this.surfaces.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.surfaces[i].setShader(this.pipline);
		}
	}
	,createSurface: function() {
		var surf = new com_gdx_gl_MeshBuffer(this.pipline);
		this.surfaces.push(surf);
		return surf;
	}
	,renderTo: function(newShader,cam,cullSubMesh,setMaterial) {
		if(newShader == null) {
			return;
		}
		var _g1 = 0;
		var _g = this.surfaces.length;
		while(_g1 < _g) {
			var i = _g1++;
			var surf = this.surfaces[i];
			if(surf == null) {
				continue;
			}
			if(cullSubMesh) {
				if(cam.BoundingInFrustum(surf.Bounding)) {
					surf.renderTo(newShader,setMaterial);
				}
			} else {
				surf.renderTo(newShader,setMaterial);
			}
		}
	}
	,render: function(mat,cam,cullSubMesh) {
		com_gdx_Gdx.Instance().numMesh += 1;
		this.pipline.Bind(cam.viewMatrix,cam.projMatrix,mat);
		var _g1 = 0;
		var _g = this.surfaces.length;
		while(_g1 < _g) {
			var i = _g1++;
			var surf = this.surfaces[i];
			if(cullSubMesh) {
				if(cam.BoundingInFrustum(surf.Bounding)) {
					surf.render();
				}
			} else {
				surf.render();
			}
		}
		this.pipline.unBind();
	}
	,sortMaterial: function() {
		this.surfaces.sort($bind(this,this.materialIndex));
	}
	,materialIndex: function(a,b) {
		if(a.materialIndex < b.materialIndex) {
			return -1;
		}
		if(a.materialIndex > b.materialIndex) {
			return 1;
		}
		return 0;
	}
	,TransformBoundingBox: function(m) {
		var _g1 = 0;
		var _g = this.surfaces.length;
		while(_g1 < _g) {
			var i = _g1++;
			var surf = this.surfaces[i];
			var _this = surf.Bounding;
			_this.boundingBox.update(m);
			var _this1 = _this.boundingSphere;
			var vector = _this1.center;
			var result = _this1.centerWorld;
			var x = vector.x * m.m11 + vector.y * m.m21 + vector.z * m.m31 + m.m41;
			var y = vector.x * m.m12 + vector.y * m.m22 + vector.z * m.m32 + m.m42;
			var z = vector.x * m.m13 + vector.y * m.m23 + vector.z * m.m33 + m.m43;
			var w = vector.x * m.m14 + vector.y * m.m24 + vector.z * m.m34 + m.m44;
			result.x = x / w;
			result.y = y / w;
			result.z = z / w;
			var result1 = _this1._tempRadiusVector;
			result1.x = m.m11 + m.m21 + m.m31;
			result1.y = m.m12 + m.m22 + m.m32;
			result1.z = m.m13 + m.m23 + m.m33;
			var f = _this1._tempRadiusVector.x;
			var a = f < 0 ? -f : f;
			var f1 = _this1._tempRadiusVector.y;
			var b = f1 < 0 ? -f1 : f1;
			var a1 = a < b ? b : a;
			var f2 = _this1._tempRadiusVector.z;
			var b1 = f2 < 0 ? -f2 : f2;
			_this1.radiusWorld = (a1 < b1 ? b1 : a1) * _this1.radius;
		}
	}
	,debug: function(lines) {
		if((this.debugFlags & 110) == 110) {
			var _g1 = 0;
			var _g = this.surfaces.length;
			while(_g1 < _g) {
				var i = _g1++;
				var surf = this.surfaces[i];
				lines.drawOBBox(surf.Bounding.boundingBox,0,1,1);
			}
		}
	}
	,getContactPoint: function() {
		return this.ContactPoint;
	}
	,getContactNormal: function() {
		return this.ContactNormal;
	}
	,rayTrace: function(ray) {
		var distance = Infinity;
		var _g1 = 0;
		var _g = this.surfaces.length;
		while(_g1 < _g) {
			var i = _g1++;
			var surf = this.surfaces[i];
			var box = surf.Bounding.boundingBox;
			if(ray.intersectsBoxMinMax(box.minimum,box.maximum)) {
				var _g3 = 0;
				var _g2 = surf.CountTriangles() | 0;
				while(_g3 < _g2) {
					var index = _g3++;
					var p0 = surf.getFace(index,2);
					var p1 = surf.getFace(index,1);
					var p2 = surf.getFace(index,0);
					var _this = this.ContactPlane;
					var x1 = p1.x - p0.x;
					var y1 = p1.y - p0.y;
					var z1 = p1.z - p0.z;
					var x2 = p2.x - p0.x;
					var y2 = p2.y - p0.y;
					var z2 = p2.z - p0.z;
					var yz = y1 * z2 - z1 * y2;
					var xz = z1 * x2 - x1 * z2;
					var xy = x1 * y2 - y1 * x2;
					var pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);
					var invPyth;
					if(pyth != 0) {
						invPyth = 1.0 / pyth;
					} else {
						invPyth = 0;
					}
					_this.normal.x = yz * invPyth;
					_this.normal.y = xz * invPyth;
					_this.normal.z = xy * invPyth;
					_this.d = -(_this.normal.x * p0.x + _this.normal.y * p0.y + _this.normal.z * p0.z);
					var direction = ray.direction;
					var left = this.ContactPlane.normal;
					var dot = left.x * direction.x + left.y * direction.y + left.z * direction.z;
					if(!(dot <= 0)) {
						continue;
					}
					var currentDistance = ray.intersectsTriangle(p0,p1,p2);
					if(currentDistance > 0) {
						distance = currentDistance;
						this.ContactPoint.x = ray.origin.x + ray.direction.x * distance;
						this.ContactPoint.y = ray.origin.y + ray.direction.y * distance;
						this.ContactPoint.z = ray.origin.z + ray.direction.z * distance;
						var _this1 = this.ContactNormal;
						var source = this.ContactPlane.normal;
						_this1.x = source.x;
						_this1.y = source.y;
						_this1.z = source.z;
						this.ContactDistance = distance;
						return true;
					}
				}
				break;
			}
		}
		return false;
	}
	,getMeshBuffer: function(index) {
		return this.surfaces[index];
	}
	,numMeshBuffer: function() {
		return this.surfaces.length;
	}
	,Scale: function(x,y,z) {
		var _g1 = 0;
		var _g = this.surfaces.length;
		while(_g1 < _g) {
			var i = _g1++;
			var surf = this.surfaces[i];
			surf.scale(x,y,z);
		}
	}
	,ScaleEx: function(v) {
		this.Scale(v,v,v);
	}
	,dispose: function() {
		var _g1 = 0;
		var _g = this.surfaces.length;
		while(_g1 < _g) {
			var i = _g1++;
			var surf = this.surfaces[i];
			surf.dispose();
		}
		this.surfaces = null;
		com_gdx_Buffer.prototype.dispose.call(this);
	}
	,__class__: com_gdx_scene3d_Mesh
});
var com_gdx_scene3d_Node = function(p,Name,id) {
	if(id == null) {
		id = -1;
	}
	if(Name == null) {
		Name = "Node";
	}
	com_gdx_Buffer.call(this);
	this.debugFlags = 0;
	this._enableLighting = false;
	var min = new com_gdx_math_Vector3(Infinity,Infinity,Infinity);
	var max = new com_gdx_math_Vector3(-Infinity,-Infinity,-Infinity);
	this.Bounding = new com_gdx_math_BoundingBox(min,max);
	this.active = true;
	this.visible = true;
	var result = new com_gdx_math_Matrix();
	result.m11 = 1.0;
	result.m12 = 0;
	result.m13 = 0;
	result.m14 = 0;
	result.m21 = 0;
	result.m22 = 1.0;
	result.m23 = 0;
	result.m24 = 0;
	result.m31 = 0;
	result.m32 = 0;
	result.m33 = 1.0;
	result.m34 = 0;
	result.m41 = 0;
	result.m42 = 0;
	result.m43 = 0;
	result.m44 = 1.0;
	this.localinv_tform = result;
	var result1 = new com_gdx_math_Matrix();
	result1.m11 = 1.0;
	result1.m12 = 0;
	result1.m13 = 0;
	result1.m14 = 0;
	result1.m21 = 0;
	result1.m22 = 1.0;
	result1.m23 = 0;
	result1.m24 = 0;
	result1.m31 = 0;
	result1.m32 = 0;
	result1.m33 = 1.0;
	result1.m34 = 0;
	result1.m41 = 0;
	result1.m42 = 0;
	result1.m43 = 0;
	result1.m44 = 1.0;
	this.worldinv_tform = result1;
	var result2 = new com_gdx_math_Matrix();
	result2.m11 = 1.0;
	result2.m12 = 0;
	result2.m13 = 0;
	result2.m14 = 0;
	result2.m21 = 0;
	result2.m22 = 1.0;
	result2.m23 = 0;
	result2.m24 = 0;
	result2.m31 = 0;
	result2.m32 = 0;
	result2.m33 = 1.0;
	result2.m34 = 0;
	result2.m41 = 0;
	result2.m42 = 0;
	result2.m43 = 0;
	result2.m44 = 1.0;
	this.local_rotTform = result2;
	var result3 = new com_gdx_math_Matrix();
	result3.m11 = 1.0;
	result3.m12 = 0;
	result3.m13 = 0;
	result3.m14 = 0;
	result3.m21 = 0;
	result3.m22 = 1.0;
	result3.m23 = 0;
	result3.m24 = 0;
	result3.m31 = 0;
	result3.m32 = 0;
	result3.m33 = 1.0;
	result3.m34 = 0;
	result3.m41 = 0;
	result3.m42 = 0;
	result3.m43 = 0;
	result3.m44 = 1.0;
	this.local_tform = result3;
	this.local_rot = new com_gdx_math_Quaternion(0,0,0,1);
	this.local_pos = new com_gdx_math_Vector3(0,0,0);
	this.local_scl = new com_gdx_math_Vector3(1,1,1);
	var result4 = new com_gdx_math_Matrix();
	result4.m11 = 1.0;
	result4.m12 = 0;
	result4.m13 = 0;
	result4.m14 = 0;
	result4.m21 = 0;
	result4.m22 = 1.0;
	result4.m23 = 0;
	result4.m24 = 0;
	result4.m31 = 0;
	result4.m32 = 0;
	result4.m33 = 1.0;
	result4.m34 = 0;
	result4.m41 = 0;
	result4.m42 = 0;
	result4.m43 = 0;
	result4.m44 = 1.0;
	this.world_tform = result4;
	this.world_rot = new com_gdx_math_Quaternion(0,0,0,1);
	this.world_pos = new com_gdx_math_Vector3(0,0,0);
	this.world_scl = new com_gdx_math_Vector3(1,1,1);
	this.parent = p;
	this.name = Name;
	this.Id = id;
	this.boundChanged = true;
	this.childs = [];
	if(this.parent != null) {
		this.parent.addChild(this);
	}
	this.onUpdate = null;
};
$hxClasses["com.gdx.scene3d.Node"] = com_gdx_scene3d_Node;
com_gdx_scene3d_Node.__name__ = true;
com_gdx_scene3d_Node.__super__ = com_gdx_Buffer;
com_gdx_scene3d_Node.prototype = $extend(com_gdx_Buffer.prototype,{
	get_Position: function() {
		return this.local_pos;
	}
	,addChild: function(o) {
		this.addChildAt(o,this.childs.length);
	}
	,addChildAt: function(o,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.childs.length) {
			pos = this.childs.length;
		}
		var p = this;
		while(p != null) {
			if(p == o) {
				throw new js__$Boot_HaxeError("Recursive addChild");
			}
			p = p.parent;
		}
		if(o.parent != null) {
			o.parent.removeChild(o);
		}
		this.childs.splice(pos,0,o);
		o.posChanged = true;
	}
	,removeChild: function(o) {
		if(HxOverrides.remove(this.childs,o)) {
			o.parent = null;
		}
	}
	,setLocalPosition: function(v) {
		var _this = this.local_pos;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		this.posChanged = true;
	}
	,getWorldTform: function() {
		if(this.parent != null) {
			this.getLocalTform().multiplyToRef(this.parent.getWorldTform(),this.world_tform);
		} else {
			var _this = this.world_tform;
			var m = this.getLocalTform();
			_this.m11 = m.m11;
			_this.m12 = m.m12;
			_this.m13 = m.m13;
			_this.m14 = m.m14;
			_this.m21 = m.m21;
			_this.m22 = m.m22;
			_this.m23 = m.m23;
			_this.m24 = m.m24;
			_this.m31 = m.m31;
			_this.m32 = m.m32;
			_this.m33 = m.m33;
			_this.m34 = m.m34;
			_this.m41 = m.m41;
			_this.m42 = m.m42;
			_this.m43 = m.m43;
			_this.m44 = m.m44;
		}
		this.Bounding.update(this.world_tform);
		return this.world_tform;
	}
	,getLocalTform: function() {
		if(this.posChanged) {
			this.boundChanged = true;
			var _this = this.local_rot;
			var result = this.local_rotTform;
			var xx = _this.x * _this.x;
			var yy = _this.y * _this.y;
			var zz = _this.z * _this.z;
			var xy = _this.x * _this.y;
			var zw = _this.z * _this.w;
			var zx = _this.z * _this.x;
			var yw = _this.y * _this.w;
			var yz = _this.y * _this.z;
			var xw = _this.x * _this.w;
			result.m11 = 1.0 - 2.0 * (yy + zz);
			result.m12 = 2.0 * (xy + zw);
			result.m13 = 2.0 * (zx - yw);
			result.m14 = 0;
			result.m21 = 2.0 * (xy - zw);
			result.m22 = 1.0 - 2.0 * (zz + xx);
			result.m23 = 2.0 * (yz + xw);
			result.m24 = 0;
			result.m31 = 2.0 * (zx + yw);
			result.m32 = 2.0 * (yz - xw);
			result.m33 = 1.0 - 2.0 * (yy + xx);
			result.m34 = 0;
			result.m41 = 0;
			result.m42 = 0;
			result.m43 = 0;
			result.m44 = 1.0;
			var _this1 = this.local_rot;
			var result1 = this.local_tform;
			var xx1 = _this1.x * _this1.x;
			var yy1 = _this1.y * _this1.y;
			var zz1 = _this1.z * _this1.z;
			var xy1 = _this1.x * _this1.y;
			var zw1 = _this1.z * _this1.w;
			var zx1 = _this1.z * _this1.x;
			var yw1 = _this1.y * _this1.w;
			var yz1 = _this1.y * _this1.z;
			var xw1 = _this1.x * _this1.w;
			result1.m11 = 1.0 - 2.0 * (yy1 + zz1);
			result1.m12 = 2.0 * (xy1 + zw1);
			result1.m13 = 2.0 * (zx1 - yw1);
			result1.m14 = 0;
			result1.m21 = 2.0 * (xy1 - zw1);
			result1.m22 = 1.0 - 2.0 * (zz1 + xx1);
			result1.m23 = 2.0 * (yz1 + xw1);
			result1.m24 = 0;
			result1.m31 = 2.0 * (zx1 + yw1);
			result1.m32 = 2.0 * (yz1 - xw1);
			result1.m33 = 1.0 - 2.0 * (yy1 + xx1);
			result1.m34 = 0;
			result1.m41 = 0;
			result1.m42 = 0;
			result1.m43 = 0;
			result1.m44 = 1.0;
			this.local_tform.m11 *= this.local_scl.x;
			this.local_tform.m12 *= this.local_scl.x;
			this.local_tform.m13 *= this.local_scl.x;
			this.local_tform.m21 *= this.local_scl.y;
			this.local_tform.m22 *= this.local_scl.y;
			this.local_tform.m23 *= this.local_scl.y;
			this.local_tform.m31 *= this.local_scl.z;
			this.local_tform.m32 *= this.local_scl.z;
			this.local_tform.m33 *= this.local_scl.z;
			this.local_tform.m41 = this.local_pos.x;
			this.local_tform.m42 = this.local_pos.y;
			this.local_tform.m43 = this.local_pos.z;
			var _g = 0;
			var _g1 = this.childs;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		return this.local_tform;
	}
	,syncRec: function() {
		var p = 0;
		var len = this.childs.length;
		while(p < len) {
			var c = this.childs[p];
			if(c == null) {
				break;
			}
			c.syncRec();
			if(this.childs[p] != c) {
				p = 0;
				len = this.childs.length;
			} else {
				++p;
			}
		}
	}
	,onAnimate: function() {
	}
	,getTransformBox: function() {
		this.Bounding.update(this.getWorldTform());
		return this.Bounding;
	}
	,update: function() {
		if(this.onUpdate != null) {
			this.onUpdate();
		}
		this.syncRec();
		var _g = 0;
		var _g1 = this.childs;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.update();
		}
	}
	,render: function(cam) {
		var _g = 0;
		var _g1 = this.childs;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.render(cam);
		}
	}
	,debug: function(lines) {
		if(this.debugFlags == 0) {
			return;
		}
		if((this.debugFlags & 200) == 200) {
			var vector = com_gdx_math_Vector3.get_zero();
			var parentvector = com_gdx_math_Vector3.get_zero();
			var _this = this.world_tform;
			var ix = vector.x;
			var iy = vector.y;
			var iz = vector.z;
			var result = com_gdx_math_Vector3.get_zero();
			result.x = _this.m11 * ix + _this.m21 * iy + _this.m31 * iz + _this.m41;
			result.y = _this.m12 * ix + _this.m22 * iy + _this.m32 * iz + _this.m42;
			result.z = _this.m13 * ix + _this.m23 * iy + _this.m33 * iz + _this.m43;
			vector = result;
			if(this.parent != null) {
				var _this1 = this.parent.world_tform;
				var ix1 = parentvector.x;
				var iy1 = parentvector.y;
				var iz1 = parentvector.z;
				var result1 = com_gdx_math_Vector3.get_zero();
				result1.x = _this1.m11 * ix1 + _this1.m21 * iy1 + _this1.m31 * iz1 + _this1.m41;
				result1.y = _this1.m12 * ix1 + _this1.m22 * iy1 + _this1.m32 * iz1 + _this1.m42;
				result1.z = _this1.m13 * ix1 + _this1.m23 * iy1 + _this1.m33 * iz1 + _this1.m43;
				parentvector = result1;
				lines.lineVector(vector,parentvector,1,1,1,1);
			} else {
				lines.lineVector(vector,vector,1,1,1,1);
			}
		}
		var _g = 0;
		var _g1 = this.childs;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.debug(lines);
		}
	}
	,dispose: function() {
		com_gdx_Buffer.prototype.dispose.call(this);
		var _g = 0;
		var _g1 = this.childs;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.dispose();
		}
	}
	,__class__: com_gdx_scene3d_Node
});
var com_gdx_scene3d_SceneNode = function(mesh,parent,id,Name) {
	if(Name == null) {
		Name = "Node";
	}
	if(id == null) {
		id = 0;
	}
	com_gdx_scene3d_Node.call(this,parent,Name,id);
	this.mesh = mesh;
	this._cullMeshBuffers = false;
	var _g1 = 0;
	var _g = mesh.surfaces.length;
	while(_g1 < _g) {
		var i = _g1++;
		var surf = mesh.surfaces[i];
		this.Bounding.addInternalBox(surf.Bounding.boundingBox);
	}
	this.Bounding.calculate();
};
$hxClasses["com.gdx.scene3d.SceneNode"] = com_gdx_scene3d_SceneNode;
com_gdx_scene3d_SceneNode.__name__ = true;
com_gdx_scene3d_SceneNode.__super__ = com_gdx_scene3d_Node;
com_gdx_scene3d_SceneNode.prototype = $extend(com_gdx_scene3d_Node.prototype,{
	getMaterial: function(index) {
		if(this.mesh != null) {
			return this.mesh.getMeshBuffer(index).material;
		}
		return null;
	}
	,renderTo: function(newShader,cam,setMaterial) {
		if(com_gdx_math_BoundingBox.IsInFrustum(this.Bounding.vectorsWorld,cam.frustumPlanes)) {
			this.mesh.renderTo(newShader,cam,this._cullMeshBuffers,setMaterial);
		}
	}
	,render: function(cam) {
		if(!this.visible) {
			return;
		}
		var mat = this.getWorldTform();
		this.Bounding.update(mat);
		if(com_gdx_math_BoundingBox.IsInFrustum(this.Bounding.vectorsWorld,cam.frustumPlanes)) {
			if(this._cullMeshBuffers) {
				if(this.posChanged) {
					this.mesh.TransformBoundingBox(mat);
				}
			}
			this.mesh.render(mat,cam,this._cullMeshBuffers);
			this.onAnimate();
			com_gdx_scene3d_Node.prototype.render.call(this,cam);
		}
	}
	,debug: function(lines) {
		if((this.debugFlags & 101) == 101) {
			lines.drawOBBox(this.Bounding,1,0,0);
		}
		if(this.mesh != null) {
			this.mesh.debug(lines);
		}
		com_gdx_scene3d_Node.prototype.debug.call(this,lines);
	}
	,setTexture: function(tex,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(this.mesh == null) {
			return;
		}
		var _g1 = 0;
		var _g = this.mesh.surfaces.length;
		while(_g1 < _g) {
			var i = _g1++;
			var surf = this.mesh.surfaces[i];
			surf.material.setTexture(tex,layer);
		}
	}
	,setShader: function(i) {
		if(this.mesh == null) {
			return;
		}
		this.mesh.setShader(i);
	}
	,__class__: com_gdx_scene3d_SceneNode
});
var com_gdx_scene3d__$GeoTerrain_SPatch = function() {
	this.CurrentLOD = -1;
	this.Top = null;
	this.Bottom = null;
	this.Left = null;
	this.Right = null;
	this.Center = new com_gdx_math_Vector3(0,0,0);
	this.boundingBox = new com_gdx_math_BoundingBox(new com_gdx_math_Vector3(999999.9,999999.9,999999.9),new com_gdx_math_Vector3(-999999.9,-999999.9,-999999.9));
};
$hxClasses["com.gdx.scene3d._GeoTerrain.SPatch"] = com_gdx_scene3d__$GeoTerrain_SPatch;
com_gdx_scene3d__$GeoTerrain_SPatch.__name__ = true;
com_gdx_scene3d__$GeoTerrain_SPatch.prototype = {
	__class__: com_gdx_scene3d__$GeoTerrain_SPatch
};
var com_gdx_scene3d__$GeoTerrain_STerrainData = function() {
	this.Patches = [];
	this.LODDistanceThreshold = [];
	this.Size = this.PatchSize = this.CalcPatchSize = this.PatchCount = this.MaxLOD = 0;
	this.Position = new com_gdx_math_Vector3(0,0,0);
	this.Scale = new com_gdx_math_Vector3(1,1,1);
	this.Center = new com_gdx_math_Vector3(0,0,0);
};
$hxClasses["com.gdx.scene3d._GeoTerrain.STerrainData"] = com_gdx_scene3d__$GeoTerrain_STerrainData;
com_gdx_scene3d__$GeoTerrain_STerrainData.__name__ = true;
com_gdx_scene3d__$GeoTerrain_STerrainData.prototype = {
	__class__: com_gdx_scene3d__$GeoTerrain_STerrainData
};
var com_gdx_scene3d_GeoTerrain = function(maxLOD,patchSize,scale,position,parent,id,Name) {
	if(Name == null) {
		Name = "ParticlesSystem";
	}
	if(id == null) {
		id = 0;
	}
	com_gdx_scene3d_Node.call(this,parent,this.name,id);
	this.TerrainData = new com_gdx_scene3d__$GeoTerrain_STerrainData();
	this.TerrainData.PatchSize = patchSize;
	this.TerrainData.CalcPatchSize = patchSize - 1;
	this.TerrainData.MaxLOD = maxLOD;
	this.TerrainData.Scale = scale;
	this.TerrainData.Position = position;
	this.OverrideDistanceThreshold = false;
	this.OldCameraPosition = new com_gdx_math_Vector3(-99999.9,-99999.9,-99999.9);
	this.OldCameraRotation = new com_gdx_math_Vector3(-99999.9,-99999.9,-99999.9);
	this.CameraMovementDelta = 1.0;
	this.CameraRotationDelta = 0.5 * com_gdx_util_Util.Deg2Rad;
	this.meshBuffer = new com_gdx_gl_MeshBuffer(com_gdx_Gdx.Instance().materials[1]);
	this.meshBuffer.material.setMaterialType(3);
};
$hxClasses["com.gdx.scene3d.GeoTerrain"] = com_gdx_scene3d_GeoTerrain;
com_gdx_scene3d_GeoTerrain.__name__ = true;
com_gdx_scene3d_GeoTerrain.__super__ = com_gdx_scene3d_Node;
com_gdx_scene3d_GeoTerrain.prototype = $extend(com_gdx_scene3d_Node.prototype,{
	setTexture: function(tex,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(this.meshBuffer == null) {
			return;
		}
		this.meshBuffer.material.setTexture(tex,layer);
	}
	,getMeshBuffer: function() {
		return this.meshBuffer;
	}
	,loadTerrain: function(img,heightScale) {
		var startTimer = com_gdx_Gdx.Instance().getTimer();
		var image = lime_utils_Assets.getImage(img);
		this.TerrainData.Size = image.width;
		this.correctMaxLOD();
		var _g1 = 0;
		var _g = this.TerrainData.Size;
		while(_g1 < _g) {
			var x = _g1++;
			var _g3 = 0;
			var _g2 = this.TerrainData.Size;
			while(_g3 < _g2) {
				var z = _g3++;
				var color = image.getPixel32(x,z);
				var hi = ((color >> 16 & 255) / 255 + (color >> 8 & 255) / 255 + (color & 255) / 255) / 3.0 * heightScale;
				var v = new com_gdx_math_Vector3(x,hi,z);
				v.x = v.x * this.TerrainData.Scale.x + this.TerrainData.Position.x;
				v.y = v.y * this.TerrainData.Scale.y + this.TerrainData.Position.y;
				v.z = v.z * this.TerrainData.Scale.z + this.TerrainData.Position.z;
				this.meshBuffer.AddVertex(v.x,v.y,v.z,x / (this.TerrainData.Size - 1),z / (this.TerrainData.Size - 1));
			}
		}
		this.calculateDistanceThresholds();
		this.createPatches();
		this.calculatePatchNeighbors();
		var endTimer = com_gdx_Gdx.Instance().getTimer();
		haxe_Log.trace("Generated terrain data(" + this.TerrainData.Size + "," + this.TerrainData.Size + ") in " + (endTimer - startTimer) / 1000.0 + "seconds",{ fileName : "GeoTerrain.hx", lineNumber : 313, className : "com.gdx.scene3d.GeoTerrain", methodName : "loadTerrain"});
	}
	,preRenderIndicesCalculations: function() {
		var index11 = 0;
		var index21 = 0;
		var index12 = 0;
		var index22 = 0;
		this.meshBuffer.tris = [];
		this.meshBuffer.no_tris = 0;
		var _g1 = 0;
		var _g = this.TerrainData.PatchCount;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = this.TerrainData.PatchCount;
			while(_g3 < _g2) {
				var j = _g3++;
				var index = i * this.TerrainData.PatchCount + j;
				if(this.TerrainData.Patches[index].CurrentLOD >= 0) {
					var x = 0;
					var z = 0;
					var step = 1 << this.TerrainData.Patches[index].CurrentLOD;
					while(z < this.TerrainData.CalcPatchSize) {
						index11 = this.getIndex(j,i,index,x,z);
						index21 = this.getIndex(j,i,index,x + step,z);
						index12 = this.getIndex(j,i,index,x,z + step);
						index22 = this.getIndex(j,i,index,x + step,z + step);
						this.meshBuffer.AddTriangle(index22,index12,index11);
						this.meshBuffer.AddTriangle(index21,index22,index11);
						x += step;
						if(x >= this.TerrainData.CalcPatchSize) {
							x = 0;
							z += step;
						}
					}
				}
			}
		}
	}
	,calculateDistanceThresholds: function(scalechanged) {
		if(scalechanged == null) {
			scalechanged = false;
		}
		if(!this.OverrideDistanceThreshold) {
			this.TerrainData.LODDistanceThreshold = [];
			var _g1 = 0;
			var _g = this.TerrainData.MaxLOD;
			while(_g1 < _g) {
				var i = _g1++;
				this.TerrainData.LODDistanceThreshold[i] = this.TerrainData.PatchSize * this.TerrainData.PatchSize * (this.TerrainData.Scale.x * this.TerrainData.Scale.z) * ((i + 1 + i / 2) * (i + 1 + i / 2));
				this.TerrainData.LODDistanceThreshold[i] *= 1.1;
			}
		}
	}
	,calculatePatchNeighbors: function() {
		var _g1 = 0;
		var _g = this.TerrainData.PatchCount;
		while(_g1 < _g) {
			var x = _g1++;
			var _g3 = 0;
			var _g2 = this.TerrainData.PatchCount;
			while(_g3 < _g2) {
				var z = _g3++;
				var index = x * this.TerrainData.PatchCount + z;
				if(x > 0) {
					this.TerrainData.Patches[index].Top = this.TerrainData.Patches[(x - 1) * this.TerrainData.PatchCount + z];
				} else {
					this.TerrainData.Patches[index].Top = null;
				}
				if(x < this.TerrainData.PatchCount - 1) {
					this.TerrainData.Patches[index].Bottom = this.TerrainData.Patches[(x + 1) * this.TerrainData.PatchCount + z];
				} else {
					this.TerrainData.Patches[index].Bottom = null;
				}
				if(z > 0) {
					this.TerrainData.Patches[index].Left = this.TerrainData.Patches[x * this.TerrainData.PatchCount + z - 1];
				} else {
					this.TerrainData.Patches[index].Left = null;
				}
				if(z < this.TerrainData.PatchCount - 1) {
					this.TerrainData.Patches[index].Right = this.TerrainData.Patches[x * this.TerrainData.PatchCount + z + 1];
				} else {
					this.TerrainData.Patches[index].Right = null;
				}
				this.TerrainData.Patches[index].CurrentLOD = 0;
				var xstart = x * this.TerrainData.CalcPatchSize;
				var xend = xstart + 1 + this.TerrainData.CalcPatchSize;
				var zstart = z * this.TerrainData.CalcPatchSize;
				var zend = zstart + 1 + this.TerrainData.CalcPatchSize;
				var min = new com_gdx_math_Vector3(Infinity,Infinity,Infinity);
				var max = new com_gdx_math_Vector3(-Infinity,-Infinity,-Infinity);
				var _g5 = xstart;
				var _g4 = xend;
				while(_g5 < _g4) {
					var xx = _g5++;
					var _g7 = zstart;
					var _g6 = zend;
					while(_g7 < _g6) {
						var zz = _g7++;
						var v = this.meshBuffer.getVertex(xx * this.TerrainData.Size + zz | 0);
						if(v.x < min.x) {
							min.x = v.x;
						}
						if(v.y < min.y) {
							min.y = v.y;
						}
						if(v.z < min.z) {
							min.z = v.z;
						}
						if(v.x > max.x) {
							max.x = v.x;
						}
						if(v.y > max.y) {
							max.y = v.y;
						}
						if(v.z > max.z) {
							max.z = v.z;
						}
					}
				}
				this.TerrainData.Patches[index].boundingBox = new com_gdx_math_BoundingBox(min,max);
				var _this = this.TerrainData.Patches[index].Center;
				var source = this.TerrainData.Patches[index].boundingBox.center;
				_this.x = source.x;
				_this.y = source.y;
				_this.z = source.z;
				this.Bounding.addInternalBox(this.TerrainData.Patches[index].boundingBox);
			}
		}
		this.Bounding.calculate();
		var tmp = this.Bounding;
		var result = new com_gdx_math_Matrix();
		result.m11 = 1.0;
		result.m12 = 0;
		result.m13 = 0;
		result.m14 = 0;
		result.m21 = 0;
		result.m22 = 1.0;
		result.m23 = 0;
		result.m24 = 0;
		result.m31 = 0;
		result.m32 = 0;
		result.m33 = 1.0;
		result.m34 = 0;
		result.m41 = 0;
		result.m42 = 0;
		result.m43 = 0;
		result.m44 = 1.0;
		tmp.update(result);
		var _this1 = this.TerrainData.Center;
		var source1 = this.Bounding.center;
		_this1.x = source1.x;
		_this1.y = source1.y;
		_this1.z = source1.z;
	}
	,createPatches: function() {
		this.TerrainData.PatchCount = (this.TerrainData.Size - 1) / this.TerrainData.CalcPatchSize | 0;
		haxe_Log.trace("Num patches :" + this.TerrainData.PatchCount,{ fileName : "GeoTerrain.hx", lineNumber : 703, className : "com.gdx.scene3d.GeoTerrain", methodName : "createPatches"});
		if(this.TerrainData.Patches != null) {
			this.TerrainData.Patches = null;
		}
		this.TerrainData.Patches = [];
		var _g1 = 0;
		var _g = this.TerrainData.PatchCount * this.TerrainData.PatchCount;
		while(_g1 < _g) {
			var i = _g1++;
			this.TerrainData.Patches.push(new com_gdx_scene3d__$GeoTerrain_SPatch());
		}
	}
	,getIndex: function(PatchX,PatchZ,PatchIndex,x,z) {
		var vX = 0;
		var vZ = 0;
		vX = x;
		vZ = z;
		if(vZ == 0) {
			if(this.TerrainData.Patches[PatchIndex].Top != null && this.TerrainData.Patches[PatchIndex].CurrentLOD < this.TerrainData.Patches[PatchIndex].Top.CurrentLOD && vX % (1 << this.TerrainData.Patches[PatchIndex].Top.CurrentLOD) != 0) {
				vX -= vX % (1 << this.TerrainData.Patches[PatchIndex].Top.CurrentLOD);
			}
		} else if(vZ == this.TerrainData.CalcPatchSize) {
			if(this.TerrainData.Patches[PatchIndex].Bottom != null && this.TerrainData.Patches[PatchIndex].CurrentLOD < this.TerrainData.Patches[PatchIndex].Bottom.CurrentLOD && vX % (1 << this.TerrainData.Patches[PatchIndex].Bottom.CurrentLOD) != 0) {
				vX -= vX % (1 << this.TerrainData.Patches[PatchIndex].Bottom.CurrentLOD);
			}
		}
		if(vX == 0) {
			if(this.TerrainData.Patches[PatchIndex].Left != null && this.TerrainData.Patches[PatchIndex].CurrentLOD < this.TerrainData.Patches[PatchIndex].Left.CurrentLOD && vZ % (1 << this.TerrainData.Patches[PatchIndex].Left.CurrentLOD) != 0) {
				vZ -= vZ % (1 << this.TerrainData.Patches[PatchIndex].Left.CurrentLOD);
			}
		} else if(vX == this.TerrainData.CalcPatchSize) {
			if(this.TerrainData.Patches[PatchIndex].Right != null && this.TerrainData.Patches[PatchIndex].CurrentLOD < this.TerrainData.Patches[PatchIndex].Right.CurrentLOD && vZ % (1 << this.TerrainData.Patches[PatchIndex].Right.CurrentLOD) != 0) {
				vZ -= vZ % (1 << this.TerrainData.Patches[PatchIndex].Right.CurrentLOD);
			}
		}
		if(vZ >= this.TerrainData.PatchSize) {
			vZ = this.TerrainData.CalcPatchSize;
		}
		if(vX >= this.TerrainData.PatchSize) {
			vX = this.TerrainData.CalcPatchSize;
		}
		return (vZ + this.TerrainData.CalcPatchSize * PatchZ) * this.TerrainData.Size + (vX + this.TerrainData.CalcPatchSize * PatchX);
	}
	,correctMaxLOD: function() {
		var _g = this.TerrainData.PatchSize;
		switch(_g) {
		case 9:
			if(this.TerrainData.MaxLOD > 3) {
				this.TerrainData.MaxLOD = 3;
				haxe_Log.trace("WARNING! Terrain Patch Size is less than or equal to 9 and MaxLOD was greater than 3!  Forcing MaxLOD to 3!",{ fileName : "GeoTerrain.hx", lineNumber : 801, className : "com.gdx.scene3d.GeoTerrain", methodName : "correctMaxLOD"});
			}
			break;
		case 17:
			if(this.TerrainData.MaxLOD > 4) {
				this.TerrainData.MaxLOD = 4;
				haxe_Log.trace("WARNING! Terrain Patch Size is less than or equal to 17 and MaxLOD was greater than 4!  Forcing MaxLOD to 4!",{ fileName : "GeoTerrain.hx", lineNumber : 808, className : "com.gdx.scene3d.GeoTerrain", methodName : "correctMaxLOD"});
			}
			break;
		case 33:
			if(this.TerrainData.MaxLOD > 5) {
				this.TerrainData.MaxLOD = 5;
				haxe_Log.trace("WARNING! Terrain Patch Size is less than or equal to 33 and MaxLOD was greater than 5!  Forcing MaxLOD to 5!",{ fileName : "GeoTerrain.hx", lineNumber : 815, className : "com.gdx.scene3d.GeoTerrain", methodName : "correctMaxLOD"});
			}
			break;
		case 65:
			if(this.TerrainData.MaxLOD > 6) {
				this.TerrainData.MaxLOD = 6;
				haxe_Log.trace("WARNING! Terrain Patch Size is less than or equal to 65 and MaxLOD was greater than 6!  Forcing MaxLOD to 6!",{ fileName : "GeoTerrain.hx", lineNumber : 822, className : "com.gdx.scene3d.GeoTerrain", methodName : "correctMaxLOD"});
			}
			break;
		case 129:
			if(this.TerrainData.MaxLOD > 7) {
				this.TerrainData.MaxLOD = 7;
				haxe_Log.trace("WARNING! Terrain Patch Size is less than or equal to 129 and MaxLOD was greater than 7!  Forcing MaxLOD to 7!",{ fileName : "GeoTerrain.hx", lineNumber : 829, className : "com.gdx.scene3d.GeoTerrain", methodName : "correctMaxLOD"});
			}
			break;
		}
	}
	,debug: function(lines) {
		if((this.debugFlags & 101) == 101) {
			lines.drawABBox(this.Bounding,1,0,0);
		}
		if((this.debugFlags & 110) == 110) {
			if(this.TerrainData.PatchCount * this.TerrainData.PatchCount < 0) {
				return;
			}
			var count = this.TerrainData.PatchCount * this.TerrainData.PatchCount;
			var _g1 = 0;
			var _g = count;
			while(_g1 < _g) {
				var j = _g1++;
				var patchBox = this.TerrainData.Patches[j].boundingBox;
				if(this.TerrainData.Patches[j].CurrentLOD == 0) {
					lines.drawABBox(patchBox,1,1,1);
				} else if(this.TerrainData.Patches[j].CurrentLOD == 1) {
					lines.drawABBox(patchBox,1,0,0);
				} else if(this.TerrainData.Patches[j].CurrentLOD == 2) {
					lines.drawABBox(patchBox,0,1,0);
				} else if(this.TerrainData.Patches[j].CurrentLOD == 3) {
					lines.drawABBox(patchBox,0,0,1);
				} else if(this.TerrainData.Patches[j].CurrentLOD == 4) {
					lines.drawABBox(patchBox,1,0,1);
				} else if(this.TerrainData.Patches[j].CurrentLOD == 5) {
					lines.drawABBox(patchBox,0,1,1);
				} else {
					lines.drawABBox(patchBox,1,0,1);
				}
			}
		}
	}
	,render: function(cam) {
		var mat = this.getWorldTform();
		if(!cam.BoundingBoxInFrustum(this.Bounding)) {
			return;
		}
		com_gdx_Gdx.Instance().numMesh += 1;
		var m = cam.viewMatrix;
		if(this.preRenderLODCalculations(cam)) {
			this.preRenderIndicesCalculations();
		}
		this.meshBuffer.shaderUse.Bind(cam.viewMatrix,cam.projMatrix,mat);
		this.meshBuffer.render();
	}
	,preRenderLODCalculations: function(cam) {
		var cameraRotation = cam.viewMatrix.getRotationDegrees();
		var cameraPosition = cam.local_pos;
		if(Math.abs(cameraRotation.x - this.OldCameraRotation.x) < this.CameraRotationDelta && Math.abs(cameraRotation.y - this.OldCameraRotation.y) < this.CameraRotationDelta && Math.abs(cameraRotation.z - this.OldCameraRotation.z) < this.CameraRotationDelta) {
			if(Math.abs(cameraPosition.x - this.OldCameraPosition.x) < this.CameraMovementDelta && Math.abs(cameraPosition.y - this.OldCameraPosition.y) < this.CameraMovementDelta && Math.abs(cameraPosition.z - this.OldCameraPosition.z) < this.CameraMovementDelta) {
				return false;
			}
		}
		var _this = this.OldCameraPosition;
		var source = cam.local_pos;
		_this.x = source.x;
		_this.y = source.y;
		_this.z = source.z;
		var _this1 = this.OldCameraRotation;
		_this1.x = cameraRotation.x;
		_this1.y = cameraRotation.y;
		_this1.z = cameraRotation.z;
		var render = 0;
		var _g1 = 0;
		var _g = this.TerrainData.PatchCount * this.TerrainData.PatchCount;
		while(_g1 < _g) {
			var j = _g1++;
			var patchBox = this.TerrainData.Patches[j].boundingBox;
			if(com_gdx_math_BoundingBox.IsInFrustum(patchBox.vectorsWorld,cam.frustumPlanes)) {
				com_gdx_Gdx.Instance().numSurfaces += 1;
				var distance = (cameraPosition.x - this.TerrainData.Patches[j].Center.x) * (cameraPosition.x - this.TerrainData.Patches[j].Center.x) + (cameraPosition.y - this.TerrainData.Patches[j].Center.y) * (cameraPosition.y - this.TerrainData.Patches[j].Center.y) + (cameraPosition.z - this.TerrainData.Patches[j].Center.z) * (cameraPosition.z - this.TerrainData.Patches[j].Center.z);
				this.TerrainData.Patches[j].CurrentLOD = 0;
				var l = this.TerrainData.MaxLOD - 1;
				while(l > 0) {
					var temp = this.TerrainData.LODDistanceThreshold[l];
					if(distance >= temp) {
						this.TerrainData.Patches[j].CurrentLOD = l;
						break;
					} else if(l == 0) {
						this.TerrainData.Patches[j].CurrentLOD = 0;
					}
					--l;
				}
			} else {
				this.TerrainData.Patches[j].CurrentLOD = -1;
			}
		}
		return true;
	}
	,__class__: com_gdx_scene3d_GeoTerrain
});
var com_gdx_scene3d_MeshBSP = function() {
	com_gdx_scene3d_Mesh.call(this);
	this.entitys = new List();
	this.Vertex = [];
	this.lumps = [];
	this.Faces = [];
	this.Indices = [];
	this.textures = [];
	this.lightmaps = [];
};
$hxClasses["com.gdx.scene3d.MeshBSP"] = com_gdx_scene3d_MeshBSP;
com_gdx_scene3d_MeshBSP.__name__ = true;
com_gdx_scene3d_MeshBSP.__super__ = com_gdx_scene3d_Mesh;
com_gdx_scene3d_MeshBSP.prototype = $extend(com_gdx_scene3d_Mesh.prototype,{
	loadMap: function(filename,path,gamma,optimize,parseEntitys) {
		if(parseEntitys == null) {
			parseEntitys = false;
		}
		if(optimize == null) {
			optimize = true;
		}
		if(gamma == null) {
			gamma = 5.0;
		}
		this.lmgamma = gamma;
		this.path = path;
		var file = com_gdx_util_Util.getBytes(filename);
		file.__endian = "littleEndian";
		if(_$UInt_UInt_$Impl_$.gte(0,file.length - file.position)) {
			return;
		}
		file.position = 0;
		this.strID = file.readUTFBytes(4);
		this.version = file.readInt();
		haxe_Log.trace("version:" + this.version,{ fileName : "MeshBSP.hx", lineNumber : 122, className : "com.gdx.scene3d.MeshBSP", methodName : "loadMap"});
		var _g1 = 0;
		var _g = com_gdx_scene3d_MeshBSP.kMaxLumps;
		while(_g1 < _g) {
			var i = _g1++;
			var lump = { offset : 0, length : 0};
			lump.offset = file.readInt();
			lump.length = file.readInt();
			this.lumps.push(lump);
		}
		this.m_numOfVerts = this.lumps[com_gdx_scene3d_MeshBSP.kVertices].length / 44 | 0;
		this.m_numOfFaces = this.lumps[com_gdx_scene3d_MeshBSP.kFaces].length / 104 | 0;
		this.m_numOfTextures = this.lumps[com_gdx_scene3d_MeshBSP.kTextures].length / 72 | 0;
		this.m_numOfLightmaps = this.lumps[com_gdx_scene3d_MeshBSP.kLightmaps].length / 49152 | 0;
		this.m_numOfIndices = this.lumps[com_gdx_scene3d_MeshBSP.kIndices].length / 4 | 0;
		this.loadtexture(file);
		this.loadLightmap(file);
		this.loadVertex(file);
		this.loadFaces(file);
		this.loadIndex(file);
		if(optimize) {
			this.buildBatchMesh();
		} else {
			this.buildMesh();
		}
		if(parseEntitys) {
			this.LoadEntities(file);
		}
	}
	,buildMesh: function() {
		var _g1 = 0;
		var _g = this.m_numOfFaces;
		while(_g1 < _g) {
			var i = _g1++;
			var face = this.Faces[i];
			if(face.type == 1) {
				var surf = this.createSurface();
				surf.material.setMaterialType(2);
				var _g3 = face.startVertIndex;
				var _g2 = face.startVertIndex + face.numOfVerts;
				while(_g3 < _g2) {
					var v = _g3++;
					var pos = this.Vertex[v].vPosition;
					var normal = this.Vertex[v].vNormal;
					var uv = this.Vertex[v].vTextureCoord;
					var uv2 = this.Vertex[v].vLightmapCoord;
					var r = this.Vertex[v].r / 255.0;
					var g = this.Vertex[v].g / 255.0;
					var b = this.Vertex[v].b / 255.0;
					var a = this.Vertex[v].a / 255.0;
					surf.AddFullVertexColor(pos.x,pos.y,pos.z,normal.x,normal.y,normal.z,uv.x,uv.y,uv2.x,uv2.y,r,g,b,a);
				}
				var index = face.startIndex;
				var _g31 = 0;
				var _g21 = face.numOfIndices / 3 | 0;
				while(_g31 < _g21) {
					var x = _g31++;
					var v0 = this.Indices[index];
					++index;
					var v1 = this.Indices[index];
					++index;
					var v2 = this.Indices[index];
					++index;
					surf.AddTriangle(v0,v1,v2);
				}
				if(this.textures.length >= 1) {
					if(face.textureID <= this.textures.length) {
						if(this.textures[face.textureID] != null) {
							surf.material.setTexture(this.textures[face.textureID],0);
						}
					}
				}
				if(this.lightmaps.length >= 1) {
					if(face.lightmapID <= this.lightmaps.length) {
						if(this.lightmaps[face.lightmapID] != null) {
							surf.material.setTexture(this.lightmaps[face.lightmapID],1);
							surf.material.setMaterialType(2);
						}
					}
				}
				surf.materialIndex = face.textureID;
				var result = new com_gdx_math_Matrix();
				result.m11 = 1.0;
				result.m12 = 0;
				result.m13 = 0;
				result.m14 = 0;
				result.m21 = 0;
				result.m22 = 1.0;
				result.m23 = 0;
				result.m24 = 0;
				result.m31 = 0;
				result.m32 = 0;
				result.m33 = 1.0;
				result.m34 = 0;
				result.m41 = 0;
				result.m42 = 0;
				result.m43 = 0;
				result.m44 = 1.0;
				surf.CreateBoundingBox(result);
				surf.UpdateVBO();
			}
		}
		this.sortMaterial();
	}
	,buildBatchMesh: function() {
		var surfs = [];
		var _g1 = 0;
		var _g = this.m_numOfFaces;
		while(_g1 < _g) {
			var i = _g1++;
			var face = this.Faces[i];
			if(face.type == 1) {
				var surf = new com_gdx_gl_MeshBuffer(this.pipline);
				surf.materialIndex = face.textureID;
				surf.material.setMaterialType(5);
				var _g3 = face.startVertIndex;
				var _g2 = face.startVertIndex + face.numOfVerts;
				while(_g3 < _g2) {
					var v = _g3++;
					var pos = this.Vertex[v].vPosition;
					var normal = this.Vertex[v].vNormal;
					var uv = this.Vertex[v].vTextureCoord;
					var uv2 = this.Vertex[v].vLightmapCoord;
					var r = this.Vertex[v].r / 255.0;
					var g = this.Vertex[v].g / 255.0;
					var b = this.Vertex[v].b / 255.0;
					var a = this.Vertex[v].a / 255.0;
					surf.AddFullVertexColor(pos.x,pos.y,pos.z,normal.x,normal.y,normal.z,uv.x,uv.y,uv2.x,uv2.y,r,g,b,a);
				}
				var index = face.startIndex;
				var _g31 = 0;
				var _g21 = face.numOfIndices / 3 | 0;
				while(_g31 < _g21) {
					var x = _g31++;
					var v0 = this.Indices[index];
					++index;
					var v1 = this.Indices[index];
					++index;
					var v2 = this.Indices[index];
					++index;
					surf.AddTriangle(v0,v1,v2);
				}
				if(this.textures.length >= 1) {
					if(face.textureID <= this.textures.length) {
						if(this.textures[face.textureID] != null) {
							surf.material.setTexture(this.textures[face.textureID],0);
						}
					}
				}
				if(this.lightmaps.length >= 1) {
					if(face.lightmapID <= this.lightmaps.length) {
						if(this.lightmaps[face.lightmapID] != null) {
							surf.material.setTexture(this.lightmaps[face.lightmapID],1);
						}
					}
				}
				var result = new com_gdx_math_Matrix();
				result.m11 = 1.0;
				result.m12 = 0;
				result.m13 = 0;
				result.m14 = 0;
				result.m21 = 0;
				result.m22 = 1.0;
				result.m23 = 0;
				result.m24 = 0;
				result.m31 = 0;
				result.m32 = 0;
				result.m33 = 1.0;
				result.m34 = 0;
				result.m41 = 0;
				result.m42 = 0;
				result.m43 = 0;
				result.m44 = 1.0;
				surf.CreateBoundingBox(result);
				surfs.push(surf);
				surfs.sort($bind(this,this.materialIndex));
			}
		}
		haxe_Log.trace("create mesh with sort material from " + surfs.length + "surfaces",{ fileName : "MeshBSP.hx", lineNumber : 449, className : "com.gdx.scene3d.MeshBSP", methodName : "buildBatchMesh"});
		var _g11 = 0;
		var _g4 = surfs.length;
		while(_g11 < _g4) {
			var s1 = _g11++;
			var surf1 = surfs[s1];
			if(surf1.CountVertices() == 0 && surf1.CountTriangles() == 0) {
				continue;
			}
			var new_surf = true;
			var _g32 = 0;
			var _g22 = this.numMeshBuffer();
			while(_g32 < _g22) {
				var s2 = _g32++;
				var surf2 = this.getMeshBuffer(s2);
				var no_verts2 = surf2.CountVertices();
				if(com_gdx_gl_material_Material.CompareMaterial(surf1.material,surf2.material) == true) {
					var _g5 = 0;
					var _g41 = surf1.CountVertices();
					while(_g5 < _g41) {
						var v3 = _g5++;
						var vx = surf1.VertexX(v3);
						var vy = surf1.VertexY(v3);
						var vz = surf1.VertexZ(v3);
						var vnx = surf1.VertexNX(v3);
						var vny = surf1.VertexNY(v3);
						var vnz = surf1.VertexNZ(v3);
						var vu0 = surf1.VertexU(v3,0);
						var vv0 = surf1.VertexV(v3,0);
						var vu1 = surf1.VertexU(v3,1);
						var vv1 = surf1.VertexV(v3,1);
						var v21 = surf2.AddVertex(vx,vy,vz);
						surf2.VertexColor(v21,255,255,255,1);
						surf2.VertexNormal(v21,vnx,vny,vnz);
						surf2.VertexTexCoords(v21,vu0,vv0,0,0);
						surf2.VertexTexCoords(v21,vu1,vv1,0,1);
					}
					var _g51 = 0;
					var _g42 = surf1.CountTriangles();
					while(_g51 < _g42) {
						var t = _g51++;
						var v01 = surf1.TriangleVertex(t,0) + no_verts2;
						var v11 = surf1.TriangleVertex(t,1) + no_verts2;
						var v22 = surf1.TriangleVertex(t,2) + no_verts2;
						surf2.AddTriangle(v01,v11,v22);
					}
					surf2.reset_vbo = -1;
					surf2.UpdateVBO();
					var result1 = new com_gdx_math_Matrix();
					result1.m11 = 1.0;
					result1.m12 = 0;
					result1.m13 = 0;
					result1.m14 = 0;
					result1.m21 = 0;
					result1.m22 = 1.0;
					result1.m23 = 0;
					result1.m24 = 0;
					result1.m31 = 0;
					result1.m32 = 0;
					result1.m33 = 1.0;
					result1.m34 = 0;
					result1.m41 = 0;
					result1.m42 = 0;
					result1.m43 = 0;
					result1.m44 = 1.0;
					surf2.CreateBoundingBox(result1);
					new_surf = false;
					break;
				}
			}
			if(new_surf == true) {
				var surf3 = this.createSurface();
				var _g33 = 0;
				var _g23 = surf1.CountVertices();
				while(_g33 < _g23) {
					var v4 = _g33++;
					var vx1 = surf1.VertexX(v4);
					var vy1 = surf1.VertexY(v4);
					var vz1 = surf1.VertexZ(v4);
					var vnx1 = surf1.VertexNX(v4);
					var vny1 = surf1.VertexNY(v4);
					var vnz1 = surf1.VertexNZ(v4);
					var vu01 = surf1.VertexU(v4,0);
					var vv01 = surf1.VertexV(v4,0);
					var vu11 = surf1.VertexU(v4,1);
					var vv11 = surf1.VertexV(v4,1);
					var v23 = surf3.AddVertex(vx1,vy1,vz1);
					surf3.VertexColor(v23,255,255,255,1);
					surf3.VertexNormal(v23,vnx1,vny1,vnz1);
					surf3.VertexTexCoords(v23,vu01,vv01,0,0);
					surf3.VertexTexCoords(v23,vu11,vv11,0,1);
				}
				var _g34 = 0;
				var _g24 = surf1.CountTriangles();
				while(_g34 < _g24) {
					var t1 = _g34++;
					var v02 = surf1.TriangleVertex(t1,0);
					var v12 = surf1.TriangleVertex(t1,1);
					var v24 = surf1.TriangleVertex(t1,2);
					surf3.AddTriangle(v02,v12,v24);
				}
				if(surf1.material != null) {
					surf3.material.clone(surf1.material);
				}
				surf3.reset_vbo = -1;
				surf3.UpdateVBO();
				var result2 = new com_gdx_math_Matrix();
				result2.m11 = 1.0;
				result2.m12 = 0;
				result2.m13 = 0;
				result2.m14 = 0;
				result2.m21 = 0;
				result2.m22 = 1.0;
				result2.m23 = 0;
				result2.m24 = 0;
				result2.m31 = 0;
				result2.m32 = 0;
				result2.m33 = 1.0;
				result2.m34 = 0;
				result2.m41 = 0;
				result2.m42 = 0;
				result2.m43 = 0;
				result2.m44 = 1.0;
				surf3.CreateBoundingBox(result2);
			}
		}
		surfs = [];
		surfs = null;
		this.sortMaterial();
	}
	,loadIndex: function(file) {
		file.position = this.lumps[com_gdx_scene3d_MeshBSP.kIndices].offset;
		var _g1 = 0;
		var _g = this.m_numOfIndices;
		while(_g1 < _g) {
			var i = _g1++;
			var indice = file.readInt();
			this.Indices.push(indice);
		}
	}
	,loadFaces: function(file) {
		file.position = this.lumps[com_gdx_scene3d_MeshBSP.kFaces].offset;
		var _g1 = 0;
		var _g = this.m_numOfFaces;
		while(_g1 < _g) {
			var i = _g1++;
			var face = { textureID : 0, effect : 0, type : 0, startVertIndex : 0, numOfVerts : 0, startIndex : 0, numOfIndices : 0, lightmapID : 0, lMapCorner0 : 0, lMapCorner1 : 0, lMapSize0 : 0, lMapSize1 : 0, lMapPos : com_gdx_math_Vector3.get_zero(), lMapVecs0 : com_gdx_math_Vector3.get_zero(), lMapVecs1 : com_gdx_math_Vector3.get_zero(), vNormal : com_gdx_math_Vector3.get_zero(), size0 : 0, size1 : 0};
			face.textureID = file.readInt();
			face.effect = file.readInt();
			face.type = file.readInt();
			face.startVertIndex = file.readInt();
			face.numOfVerts = file.readInt();
			face.startIndex = file.readInt();
			face.numOfIndices = file.readInt();
			face.lightmapID = file.readInt();
			face.lMapCorner0 = file.readInt();
			face.lMapCorner1 = file.readInt();
			face.lMapSize0 = file.readInt();
			face.lMapSize1 = file.readInt();
			face.lMapPos.x = file.readFloat();
			face.lMapPos.y = file.readFloat();
			face.lMapPos.z = file.readFloat();
			face.lMapVecs0.x = file.readFloat();
			face.lMapVecs0.y = file.readFloat();
			face.lMapVecs0.z = file.readFloat();
			face.lMapVecs1.x = file.readFloat();
			face.lMapVecs1.y = file.readFloat();
			face.lMapVecs1.z = file.readFloat();
			face.vNormal.x = file.readFloat();
			face.vNormal.y = file.readFloat();
			face.vNormal.z = file.readFloat();
			face.size0 = file.readInt();
			face.size1 = file.readInt();
			this.Faces.push(face);
		}
	}
	,loadVertex: function(file) {
		file.position = this.lumps[com_gdx_scene3d_MeshBSP.kVertices].offset;
		var _g1 = 0;
		var _g = this.m_numOfVerts;
		while(_g1 < _g) {
			var i = _g1++;
			var vertex = { vPosition : com_gdx_math_Vector3.get_zero(), vTextureCoord : new com_gdx_math_Vector2(0,0), vLightmapCoord : new com_gdx_math_Vector2(0,0), vNormal : com_gdx_math_Vector3.get_zero(), r : 0, g : 0, b : 0, a : 0};
			vertex.vPosition.x = file.readFloat();
			vertex.vPosition.y = file.readFloat();
			vertex.vPosition.z = file.readFloat();
			var t = vertex.vPosition.y;
			vertex.vPosition.y = vertex.vPosition.z;
			vertex.vPosition.z = t;
			vertex.vTextureCoord.x = file.readFloat();
			vertex.vTextureCoord.y = file.readFloat();
			vertex.vLightmapCoord.x = file.readFloat();
			vertex.vLightmapCoord.y = file.readFloat();
			vertex.vNormal.x = file.readFloat();
			vertex.vNormal.y = file.readFloat();
			vertex.vNormal.z = file.readFloat();
			var r = file.readByte();
			if(r < 0) {
				r = -r + 127;
			}
			var g = file.readByte();
			if(g < 0) {
				g = -g + 127;
			}
			var b = file.readByte();
			if(b < 0) {
				b = -b + 127;
			}
			var a = file.readByte();
			if(a < 0) {
				a = -a + 127;
			}
			vertex.r = r;
			vertex.g = g;
			vertex.b = b;
			vertex.a = a;
			this.Vertex.push(vertex);
		}
	}
	,loadtexture: function(file) {
		var strName = " ";
		var flags;
		var textureType;
		file.position = this.lumps[com_gdx_scene3d_MeshBSP.kTextures].offset;
		var _g1 = 0;
		var _g = this.m_numOfTextures;
		while(_g1 < _g) {
			var i = _g1++;
			strName = this.readTextureName(file);
			flags = file.readInt();
			textureType = file.readInt();
			var textureName = strName;
			textureName = haxe_io_Path.withoutExtension(textureName);
			var textureNameNoPath = haxe_io_Path.withoutDirectory(strName);
			textureNameNoPath = haxe_io_Path.withoutExtension(textureNameNoPath);
			if(lime_utils_Assets.exists(this.path + textureName + ".jpg")) {
				this.textures.push(com_gdx_Gdx.Instance().getTexture(this.path + textureName + ".jpg",true,true,true));
			} else if(lime_utils_Assets.exists(this.path + textureName + ".JPG")) {
				this.textures.push(com_gdx_Gdx.Instance().getTexture(this.path + textureName + ".JPG",true,true,true));
			} else if(lime_utils_Assets.exists(this.path + textureName + ".png")) {
				this.textures.push(com_gdx_Gdx.Instance().getTexture(this.path + textureName + ".png",true,true,true));
			} else if(lime_utils_Assets.exists(this.path + textureName + ".PNG")) {
				this.textures.push(com_gdx_Gdx.Instance().getTexture(this.path + textureName + ".PNG",true,true,true));
			} else if(lime_utils_Assets.exists(this.path + textureNameNoPath + ".jpg")) {
				this.textures.push(com_gdx_Gdx.Instance().getTexture(this.path + textureNameNoPath + ".jpg",true,true,true));
			} else if(lime_utils_Assets.exists(this.path + textureNameNoPath + ".JPG")) {
				this.textures.push(com_gdx_Gdx.Instance().getTexture(this.path + textureNameNoPath + ".JPG",true,true,true));
			} else if(lime_utils_Assets.exists(this.path + textureNameNoPath + ".png")) {
				this.textures.push(com_gdx_Gdx.Instance().getTexture(this.path + textureNameNoPath + ".png",true,true,true));
			} else if(lime_utils_Assets.exists(this.path + textureNameNoPath + ".PNG")) {
				this.textures.push(com_gdx_Gdx.Instance().getTexture(this.path + textureNameNoPath + ".PNG",true,true,true));
			} else {
				haxe_Log.trace("Texture :(" + textureName + ") dont exits",{ fileName : "MeshBSP.hx", lineNumber : 770, className : "com.gdx.scene3d.MeshBSP", methodName : "loadtexture"});
				this.textures.push(com_gdx_Gdx.Instance().getTexture("dummy"));
			}
		}
	}
	,loadLightmap: function(file) {
		var strName = " ";
		var flags;
		var textureType;
		file.position = this.lumps[com_gdx_scene3d_MeshBSP.kLightmaps].offset;
		var _g1 = 0;
		var _g = this.m_numOfLightmaps;
		while(_g1 < _g) {
			var i = _g1++;
			var data = [];
			var _g3 = 0;
			var _g2 = 16384;
			while(_g3 < _g2) {
				var x = _g3++;
				data.push(file.readByte());
				data.push(file.readByte());
				data.push(file.readByte());
			}
			var this1 = new Uint8Array(65536);
			var lightData = this1;
			var _g31 = 0;
			var _g21 = data.length / 3 | 0;
			while(_g31 < _g21) {
				var j = _g31++;
				var r;
				var g;
				var b;
				var a = 0;
				var rf;
				var gf;
				var bf;
				var af = 0;
				r = data[j * 3 + 2];
				g = data[j * 3 + 1];
				b = data[j * 3];
				a = 255;
				rf = r * this.lmgamma / 255.0;
				gf = g * this.lmgamma / 255.0;
				bf = b * this.lmgamma / 255.0;
				af = a * this.lmgamma / 255.0;
				var scale = 1.0;
				var temp = 0;
				var tmp;
				if(rf > 1.0) {
					temp = 1.0 / rf;
					tmp = temp < scale;
				} else {
					tmp = false;
				}
				if(tmp) {
					scale = temp;
				}
				var tmp1;
				if(gf > 1.0) {
					temp = 1.0 / gf;
					tmp1 = temp < scale;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					scale = temp;
				}
				var tmp2;
				if(bf > 1.0) {
					temp = 1.0 / bf;
					tmp2 = temp < scale;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					scale = temp;
				}
				var tmp3;
				if(af > 1.0) {
					temp = 1.0 / af;
					tmp3 = temp < scale;
				} else {
					tmp3 = false;
				}
				if(tmp3) {
					scale = temp;
				}
				scale *= 255.0;
				r = rf * scale | 0;
				g = gf * scale | 0;
				b = bf * scale | 0;
				a = af * scale | 0;
				lightData[j * 4] = r;
				lightData[j * 4 + 1] = g;
				lightData[j * 4 + 2] = b;
				lightData[j * 4 + 3] = a;
			}
			var lm = new lime_graphics_Image(new lime_graphics_ImageBuffer(lightData,128,128,32,0));
			var tlm = new com_gdx_gl_Texture();
			tlm.loadBitmap(lm,false,true,true);
			this.lightmaps.push(tlm);
		}
	}
	,readTextureName: function(byteData) {
		var name = "";
		var k = 0;
		var _g = 0;
		while(_g < 64) {
			var j = _g++;
			var ch = byteData.readUnsignedByte();
			if(ch == 47) {
				name += String.fromCharCode(ch);
				continue;
			}
			if(ch > 30 && ch <= 122 && k == 0) {
				name += String.fromCharCode(ch);
			}
		}
		return name;
	}
	,parseProperties: function(e,entityData) {
		var end = -1;
		while(true) {
			var begin = entityData.indexOf("\"",end + 1);
			if(begin == -1) {
				break;
			}
			end = entityData.indexOf("\"",begin + 1);
			var key = entityData.substring(begin + 1,end);
			begin = entityData.indexOf("\"",end + 1);
			end = entityData.indexOf("\"",begin + 1);
			var value = entityData.substring(begin + 1,end);
			e.addValue(key,value);
		}
	}
	,LoadEntities: function(file) {
		file.position = this.lumps[com_gdx_scene3d_MeshBSP.kEntities].offset;
		var size = this.lumps[com_gdx_scene3d_MeshBSP.kEntities].length;
		var data = file.readUTFBytes(size);
		var end = -1;
		while(true) {
			var begin = data.indexOf("{",end + 1);
			if(begin == -1) {
				break;
			}
			end = data.indexOf("}",begin + 1);
			var entityStr = data.substring(begin + 1,end);
			var ent = new com_gdx_scene3d_BspEntity();
			this.parseProperties(ent,entityStr);
			this.entitys.add(ent);
		}
	}
	,getPlayerPosition: function() {
		var _g_head = this.entitys.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var entity = val;
			if(entity.getType() == "info_player_deathmatch") {
				return entity.getVectorValue("origin");
			}
		}
		return new com_gdx_math_Vector3(0,0,0);
	}
	,__class__: com_gdx_scene3d_MeshBSP
});
var com_gdx_scene3d_BspEntity = function() {
	this.names = [];
	this.values = [];
};
$hxClasses["com.gdx.scene3d.BspEntity"] = com_gdx_scene3d_BspEntity;
com_gdx_scene3d_BspEntity.__name__ = true;
com_gdx_scene3d_BspEntity.prototype = {
	addValue: function(name,value) {
		this.names.push(name);
		this.values.push(value);
	}
	,getValue: function(name) {
		var _g1 = 0;
		var _g = this.names.length;
		while(_g1 < _g) {
			var i = _g1++;
			var n = this.names[i];
			if(n == name) {
				return this.values[i];
			}
		}
		return "";
	}
	,getType: function() {
		return this.values[0];
	}
	,getVectorValue: function(name) {
		var s = this.getValue(name);
		var arr = [];
		arr.push("");
		arr.push("");
		arr.push("");
		var j = 0;
		var _g1 = 0;
		var _g = s.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(HxOverrides.cca(s,i) != 32) {
				arr[j] += s.charAt(i);
			} else {
				++j;
			}
		}
		var x = parseFloat(arr[0]);
		var y = parseFloat(arr[1]);
		var z = parseFloat(arr[2]);
		return new com_gdx_math_Vector3(x,z,y);
	}
	,__class__: com_gdx_scene3d_BspEntity
};
var com_gdx_scene3d_MeshCreator = function() { };
$hxClasses["com.gdx.scene3d.MeshCreator"] = com_gdx_scene3d_MeshCreator;
com_gdx_scene3d_MeshCreator.__name__ = true;
com_gdx_scene3d_MeshCreator.createSphere = function(segments) {
	if(segments == null) {
		segments = 8;
	}
	var m = new com_gdx_scene3d_Mesh();
	if(segments < 3 || segments > 100) {
		return m;
	}
	var thissurf = m.createSurface();
	var div = 360.0 / (segments * 2);
	var height = 1.0;
	var upos = 1.0;
	var udiv = 1.0 / (segments * 2);
	var vdiv = 1.0 / segments;
	var RotAngle = 90;
	if(segments < 3) {
		var _g1 = 1;
		var _g = segments * 2;
		while(_g1 < _g) {
			var i = _g1++;
			var np = thissurf.AddVertex(0.0,height,0.0,upos - udiv / 2.0,0);
			var sp = thissurf.AddVertex(0.0,-height,0.0,upos - udiv / 2.0,1);
			var M_PI = 3.14159265358979323846;
			var DEG_CIRCLE = 360;
			var DEG_TO_RAD = M_PI / (DEG_CIRCLE / 2);
			var XPos = -Math.cos(RotAngle * DEG_TO_RAD);
			var M_PI1 = 3.14159265358979323846;
			var DEG_CIRCLE1 = 360;
			var DEG_TO_RAD1 = M_PI1 / (DEG_CIRCLE1 / 2);
			var ZPos = Math.sin(RotAngle * DEG_TO_RAD1);
			var v0 = thissurf.AddVertex(XPos,0,ZPos,upos,0.5);
			RotAngle += div;
			if(RotAngle >= 360.0) {
				RotAngle -= 360.0;
			}
			var M_PI2 = 3.14159265358979323846;
			var DEG_CIRCLE2 = 360;
			var DEG_TO_RAD2 = M_PI2 / (DEG_CIRCLE2 / 2);
			XPos = -Math.cos(RotAngle * DEG_TO_RAD2);
			var M_PI3 = 3.14159265358979323846;
			var DEG_CIRCLE3 = 360;
			var DEG_TO_RAD3 = M_PI3 / (DEG_CIRCLE3 / 2);
			ZPos = Math.sin(RotAngle * DEG_TO_RAD3);
			upos -= udiv;
			var v1 = thissurf.AddVertex(XPos,0,ZPos,upos,0.5);
			thissurf.AddTriangle(np,v0,v1);
			thissurf.AddTriangle(v1,v0,sp);
		}
	}
	if(segments > 2) {
		var _g11 = 1;
		var _g2 = segments * 2 + 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var np1 = thissurf.AddVertex(0.0,height,0.0,upos - udiv / 2.0,0);
			var sp1 = thissurf.AddVertex(0.0,-height,0.0,upos - udiv / 2.0,1);
			var M_PI4 = 3.14159265358979323846;
			var DEG_CIRCLE4 = 360;
			var DEG_TO_RAD4 = M_PI4 / (DEG_CIRCLE4 / 2);
			var YPos = Math.cos(div * DEG_TO_RAD4);
			var M_PI5 = 3.14159265358979323846;
			var DEG_CIRCLE5 = 360;
			var DEG_TO_RAD5 = M_PI5 / (DEG_CIRCLE5 / 2);
			var M_PI6 = 3.14159265358979323846;
			var DEG_CIRCLE6 = 360;
			var DEG_TO_RAD6 = M_PI6 / (DEG_CIRCLE6 / 2);
			var XPos1 = -Math.cos(RotAngle * DEG_TO_RAD5) * Math.sin(div * DEG_TO_RAD6);
			var M_PI7 = 3.14159265358979323846;
			var DEG_CIRCLE7 = 360;
			var DEG_TO_RAD7 = M_PI7 / (DEG_CIRCLE7 / 2);
			var M_PI8 = 3.14159265358979323846;
			var DEG_CIRCLE8 = 360;
			var DEG_TO_RAD8 = M_PI8 / (DEG_CIRCLE8 / 2);
			var ZPos1 = Math.sin(RotAngle * DEG_TO_RAD7) * Math.sin(div * DEG_TO_RAD8);
			var v0t = thissurf.AddVertex(XPos1,YPos,ZPos1,upos,vdiv);
			var v0b = thissurf.AddVertex(XPos1,-YPos,ZPos1,upos,1 - vdiv);
			RotAngle += div;
			var M_PI9 = 3.14159265358979323846;
			var DEG_CIRCLE9 = 360;
			var DEG_TO_RAD9 = M_PI9 / (DEG_CIRCLE9 / 2);
			var M_PI10 = 3.14159265358979323846;
			var DEG_CIRCLE10 = 360;
			var DEG_TO_RAD10 = M_PI10 / (DEG_CIRCLE10 / 2);
			XPos1 = -Math.cos(RotAngle * DEG_TO_RAD9) * Math.sin(div * DEG_TO_RAD10);
			var M_PI11 = 3.14159265358979323846;
			var DEG_CIRCLE11 = 360;
			var DEG_TO_RAD11 = M_PI11 / (DEG_CIRCLE11 / 2);
			var M_PI12 = 3.14159265358979323846;
			var DEG_CIRCLE12 = 360;
			var DEG_TO_RAD12 = M_PI12 / (DEG_CIRCLE12 / 2);
			ZPos1 = Math.sin(RotAngle * DEG_TO_RAD11) * Math.sin(div * DEG_TO_RAD12);
			upos -= udiv;
			var v1t = thissurf.AddVertex(XPos1,YPos,ZPos1,upos,vdiv);
			var v1b = thissurf.AddVertex(XPos1,-YPos,ZPos1,upos,1 - vdiv);
			thissurf.AddTriangle(np1,v0t,v1t);
			thissurf.AddTriangle(v1b,v0b,sp1);
		}
		upos = 1.0;
		RotAngle = 90;
		var _g12 = 1;
		var _g3 = segments * 2 + 1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var mult = 1;
			var M_PI13 = 3.14159265358979323846;
			var DEG_CIRCLE13 = 360;
			var DEG_TO_RAD13 = M_PI13 / (DEG_CIRCLE13 / 2);
			var YPos1 = Math.cos(div * mult * DEG_TO_RAD13);
			var M_PI14 = 3.14159265358979323846;
			var DEG_CIRCLE14 = 360;
			var DEG_TO_RAD14 = M_PI14 / (DEG_CIRCLE14 / 2);
			var YPos2 = Math.cos(div * (mult + 1.0) * DEG_TO_RAD14);
			var Thisvdiv = vdiv;
			var _g31 = 1;
			var _g21 = segments - 1;
			while(_g31 < _g21) {
				var j = _g31++;
				var M_PI15 = 3.14159265358979323846;
				var DEG_CIRCLE15 = 360;
				var DEG_TO_RAD15 = M_PI15 / (DEG_CIRCLE15 / 2);
				var M_PI16 = 3.14159265358979323846;
				var DEG_CIRCLE16 = 360;
				var DEG_TO_RAD16 = M_PI16 / (DEG_CIRCLE16 / 2);
				var XPos2 = -Math.cos(RotAngle * DEG_TO_RAD15) * Math.sin(div * mult * DEG_TO_RAD16);
				var M_PI17 = 3.14159265358979323846;
				var DEG_CIRCLE17 = 360;
				var DEG_TO_RAD17 = M_PI17 / (DEG_CIRCLE17 / 2);
				var M_PI18 = 3.14159265358979323846;
				var DEG_CIRCLE18 = 360;
				var DEG_TO_RAD18 = M_PI18 / (DEG_CIRCLE18 / 2);
				var ZPos2 = Math.sin(RotAngle * DEG_TO_RAD17) * Math.sin(div * mult * DEG_TO_RAD18);
				var M_PI19 = 3.14159265358979323846;
				var DEG_CIRCLE19 = 360;
				var DEG_TO_RAD19 = M_PI19 / (DEG_CIRCLE19 / 2);
				var M_PI20 = 3.14159265358979323846;
				var DEG_CIRCLE20 = 360;
				var DEG_TO_RAD20 = M_PI20 / (DEG_CIRCLE20 / 2);
				var XPos21 = -Math.cos(RotAngle * DEG_TO_RAD19) * Math.sin(div * (mult + 1.0) * DEG_TO_RAD20);
				var M_PI21 = 3.14159265358979323846;
				var DEG_CIRCLE21 = 360;
				var DEG_TO_RAD21 = M_PI21 / (DEG_CIRCLE21 / 2);
				var M_PI22 = 3.14159265358979323846;
				var DEG_CIRCLE22 = 360;
				var DEG_TO_RAD22 = M_PI22 / (DEG_CIRCLE22 / 2);
				var ZPos21 = Math.sin(RotAngle * DEG_TO_RAD21) * Math.sin(div * (mult + 1.0) * DEG_TO_RAD22);
				var v0t1 = thissurf.AddVertex(XPos2,YPos1,ZPos2,upos,Thisvdiv);
				var v0b1 = thissurf.AddVertex(XPos21,YPos2,ZPos21,upos,Thisvdiv + vdiv);
				thissurf.VertexTexCoords(v0t1,upos,Thisvdiv,0.0,1);
				thissurf.VertexTexCoords(v0b1,upos,Thisvdiv + vdiv,0.0,1);
				var tempRotAngle = RotAngle + div;
				var M_PI23 = 3.14159265358979323846;
				var DEG_CIRCLE23 = 360;
				var DEG_TO_RAD23 = M_PI23 / (DEG_CIRCLE23 / 2);
				var M_PI24 = 3.14159265358979323846;
				var DEG_CIRCLE24 = 360;
				var DEG_TO_RAD24 = M_PI24 / (DEG_CIRCLE24 / 2);
				XPos2 = -Math.cos(tempRotAngle * DEG_TO_RAD23) * Math.sin(div * mult * DEG_TO_RAD24);
				var M_PI25 = 3.14159265358979323846;
				var DEG_CIRCLE25 = 360;
				var DEG_TO_RAD25 = M_PI25 / (DEG_CIRCLE25 / 2);
				var M_PI26 = 3.14159265358979323846;
				var DEG_CIRCLE26 = 360;
				var DEG_TO_RAD26 = M_PI26 / (DEG_CIRCLE26 / 2);
				ZPos2 = Math.sin(tempRotAngle * DEG_TO_RAD25) * Math.sin(div * mult * DEG_TO_RAD26);
				var M_PI27 = 3.14159265358979323846;
				var DEG_CIRCLE27 = 360;
				var DEG_TO_RAD27 = M_PI27 / (DEG_CIRCLE27 / 2);
				var M_PI28 = 3.14159265358979323846;
				var DEG_CIRCLE28 = 360;
				var DEG_TO_RAD28 = M_PI28 / (DEG_CIRCLE28 / 2);
				XPos21 = -Math.cos(tempRotAngle * DEG_TO_RAD27) * Math.sin(div * (mult + 1.0) * DEG_TO_RAD28);
				var M_PI29 = 3.14159265358979323846;
				var DEG_CIRCLE29 = 360;
				var DEG_TO_RAD29 = M_PI29 / (DEG_CIRCLE29 / 2);
				var M_PI30 = 3.14159265358979323846;
				var DEG_CIRCLE30 = 360;
				var DEG_TO_RAD30 = M_PI30 / (DEG_CIRCLE30 / 2);
				ZPos21 = Math.sin(tempRotAngle * DEG_TO_RAD29) * Math.sin(div * (mult + 1.0) * DEG_TO_RAD30);
				var temp_upos = upos - udiv;
				var v1t1 = thissurf.AddVertex(XPos2,YPos1,ZPos2,temp_upos,Thisvdiv);
				var v1b1 = thissurf.AddVertex(XPos21,YPos2,ZPos21,temp_upos,Thisvdiv + vdiv);
				thissurf.VertexTexCoords(v1t1,temp_upos,Thisvdiv,0.0,1);
				thissurf.VertexTexCoords(v1b1,temp_upos,Thisvdiv + vdiv,0.0,1);
				thissurf.AddTriangle(v1t1,v0t1,v0b1);
				thissurf.AddTriangle(v1b1,v1t1,v0b1);
				Thisvdiv += vdiv;
				++mult;
				var M_PI31 = 3.14159265358979323846;
				var DEG_CIRCLE31 = 360;
				var DEG_TO_RAD31 = M_PI31 / (DEG_CIRCLE31 / 2);
				YPos1 = Math.cos(div * mult * DEG_TO_RAD31);
				var M_PI32 = 3.14159265358979323846;
				var DEG_CIRCLE32 = 360;
				var DEG_TO_RAD32 = M_PI32 / (DEG_CIRCLE32 / 2);
				YPos2 = Math.cos(div * (mult + 1.0) * DEG_TO_RAD32);
			}
			upos -= udiv;
			RotAngle += div;
		}
	}
	var result = new com_gdx_math_Matrix();
	result.m11 = 1.0;
	result.m12 = 0;
	result.m13 = 0;
	result.m14 = 0;
	result.m21 = 0;
	result.m22 = 1.0;
	result.m23 = 0;
	result.m24 = 0;
	result.m31 = 0;
	result.m32 = 0;
	result.m33 = 1.0;
	result.m34 = 0;
	result.m41 = 0;
	result.m42 = 0;
	result.m43 = 0;
	result.m44 = 1.0;
	thissurf.CreateBoundingBox(result);
	return m;
};
com_gdx_scene3d_MeshCreator.createPlane = function(y,w,d) {
	if(d == null) {
		d = 1000;
	}
	if(w == null) {
		w = 1000;
	}
	var m = new com_gdx_scene3d_Mesh();
	var surf = m.createSurface();
	surf.AddVertex(-w,y,-d);
	surf.AddVertex(-w,y,d);
	surf.AddVertex(w,y,d);
	surf.AddVertex(w,y,-d);
	surf.VertexNormal(0,0.0,0.0,-1.0);
	surf.VertexNormal(1,0.0,0.0,-1.0);
	surf.VertexNormal(2,0.0,0.0,-1.0);
	surf.VertexNormal(3,0.0,0.0,-1.0);
	surf.VertexTexCoords(0,0.0,1.0,0.0,0);
	surf.VertexTexCoords(1,0.0,0.0,0.0,0);
	surf.VertexTexCoords(2,1.0,0.0,0.0,0);
	surf.VertexTexCoords(3,1.0,1.0,0.0,0);
	surf.VertexTexCoords(0,0.0,1.0,0.0,1);
	surf.VertexTexCoords(1,0.0,0.0,0.0,1);
	surf.VertexTexCoords(2,1.0,0.0,0.0,1);
	surf.VertexTexCoords(3,1.0,1.0,0.0,1);
	surf.AddTriangle(0,1,2);
	surf.AddTriangle(0,2,3);
	var result = new com_gdx_math_Matrix();
	result.m11 = 1.0;
	result.m12 = 0;
	result.m13 = 0;
	result.m14 = 0;
	result.m21 = 0;
	result.m22 = 1.0;
	result.m23 = 0;
	result.m24 = 0;
	result.m31 = 0;
	result.m32 = 0;
	result.m33 = 1.0;
	result.m34 = 0;
	result.m41 = 0;
	result.m42 = 0;
	result.m43 = 0;
	result.m44 = 1.0;
	surf.CreateBoundingBox(result);
	surf.UpdateVBO();
	return m;
};
com_gdx_scene3d_MeshCreator.createCube = function() {
	var m = new com_gdx_scene3d_Mesh();
	var surf = m.createSurface();
	surf.AddVertex(-1.0,-1.0,-1.0);
	surf.AddVertex(-1.0,1.0,-1.0);
	surf.AddVertex(1.0,1.0,-1.0);
	surf.AddVertex(1.0,-1.0,-1.0);
	surf.AddVertex(-1.0,-1.0,1.0);
	surf.AddVertex(-1.0,1.0,1.0);
	surf.AddVertex(1.0,1.0,1.0);
	surf.AddVertex(1.0,-1.0,1.0);
	surf.AddVertex(-1.0,-1.0,1.0);
	surf.AddVertex(-1.0,1.0,1.0);
	surf.AddVertex(1.0,1.0,1.0);
	surf.AddVertex(1.0,-1.0,1.0);
	surf.AddVertex(-1.0,-1.0,-1.0);
	surf.AddVertex(-1.0,1.0,-1.0);
	surf.AddVertex(1.0,1.0,-1.0);
	surf.AddVertex(1.0,-1.0,-1.0);
	surf.AddVertex(-1.0,-1.0,1.0);
	surf.AddVertex(-1.0,1.0,1.0);
	surf.AddVertex(1.0,1.0,1.0);
	surf.AddVertex(1.0,-1.0,1.0);
	surf.AddVertex(-1.0,-1.0,-1.0);
	surf.AddVertex(-1.0,1.0,-1.0);
	surf.AddVertex(1.0,1.0,-1.0);
	surf.AddVertex(1.0,-1.0,-1.0);
	surf.VertexNormal(0,0.0,0.0,-1.0);
	surf.VertexNormal(1,0.0,0.0,-1.0);
	surf.VertexNormal(2,0.0,0.0,-1.0);
	surf.VertexNormal(3,0.0,0.0,-1.0);
	surf.VertexNormal(4,0.0,0.0,1.0);
	surf.VertexNormal(5,0.0,0.0,1.0);
	surf.VertexNormal(6,0.0,0.0,1.0);
	surf.VertexNormal(7,0.0,0.0,1.0);
	surf.VertexNormal(8,0.0,-1.0,0.0);
	surf.VertexNormal(9,0.0,1.0,0.0);
	surf.VertexNormal(10,0.0,1.0,0.0);
	surf.VertexNormal(11,0.0,-1.0,0.0);
	surf.VertexNormal(12,0.0,-1.0,0.0);
	surf.VertexNormal(13,0.0,1.0,0.0);
	surf.VertexNormal(14,0.0,1.0,0.0);
	surf.VertexNormal(15,0.0,-1.0,0.0);
	surf.VertexNormal(16,-1.0,0.0,0.0);
	surf.VertexNormal(17,-1.0,0.0,0.0);
	surf.VertexNormal(18,1.0,0.0,0.0);
	surf.VertexNormal(19,1.0,0.0,0.0);
	surf.VertexNormal(20,-1.0,0.0,0.0);
	surf.VertexNormal(21,-1.0,0.0,0.0);
	surf.VertexNormal(22,1.0,0.0,0.0);
	surf.VertexNormal(23,1.0,0.0,0.0);
	surf.VertexTexCoords(0,0.0,1.0,0.0,0);
	surf.VertexTexCoords(1,0.0,0.0,0.0,0);
	surf.VertexTexCoords(2,1.0,0.0,0.0,0);
	surf.VertexTexCoords(3,1.0,1.0,0.0,0);
	surf.VertexTexCoords(4,1.0,1.0,0.0,0);
	surf.VertexTexCoords(5,1.0,0.0,0.0,0);
	surf.VertexTexCoords(6,0.0,0.0,0.0,0);
	surf.VertexTexCoords(7,0.0,1.0,0.0,0);
	surf.VertexTexCoords(8,0.0,1.0,0.0,0);
	surf.VertexTexCoords(9,0.0,0.0,0.0,0);
	surf.VertexTexCoords(10,1.0,0.0,0.0,0);
	surf.VertexTexCoords(11,1.0,1.0,0.0,0);
	surf.VertexTexCoords(12,0.0,0.0,0.0,0);
	surf.VertexTexCoords(13,0.0,1.0,0.0,0);
	surf.VertexTexCoords(14,1.0,1.0,0.0,0);
	surf.VertexTexCoords(15,1.0,0.0,0.0,0);
	surf.VertexTexCoords(16,0.0,1.0,0.0,0);
	surf.VertexTexCoords(17,0.0,0.0,0.0,0);
	surf.VertexTexCoords(18,1.0,0.0,0.0,0);
	surf.VertexTexCoords(19,1.0,1.0,0.0,0);
	surf.VertexTexCoords(20,1.0,1.0,0.0,0);
	surf.VertexTexCoords(21,1.0,0.0,0.0,0);
	surf.VertexTexCoords(22,0.0,0.0,0.0,0);
	surf.VertexTexCoords(23,0.0,1.0,0.0,0);
	surf.VertexTexCoords(0,0.0,1.0,0.0,1);
	surf.VertexTexCoords(1,0.0,0.0,0.0,1);
	surf.VertexTexCoords(2,1.0,0.0,0.0,1);
	surf.VertexTexCoords(3,1.0,1.0,0.0,1);
	surf.VertexTexCoords(4,1.0,1.0,0.0,1);
	surf.VertexTexCoords(5,1.0,0.0,0.0,1);
	surf.VertexTexCoords(6,0.0,0.0,0.0,1);
	surf.VertexTexCoords(7,0.0,1.0,0.0,1);
	surf.VertexTexCoords(8,0.0,1.0,0.0,1);
	surf.VertexTexCoords(9,0.0,0.0,0.0,1);
	surf.VertexTexCoords(10,1.0,0.0,0.0,1);
	surf.VertexTexCoords(11,1.0,1.0,0.0,1);
	surf.VertexTexCoords(12,0.0,0.0,0.0,1);
	surf.VertexTexCoords(13,0.0,1.0,0.0,1);
	surf.VertexTexCoords(14,1.0,1.0,0.0,1);
	surf.VertexTexCoords(15,1.0,0.0,0.0,1);
	surf.VertexTexCoords(16,0.0,1.0,0.0,1);
	surf.VertexTexCoords(17,0.0,0.0,0.0,1);
	surf.VertexTexCoords(18,1.0,0.0,0.0,1);
	surf.VertexTexCoords(19,1.0,1.0,0.0,1);
	surf.VertexTexCoords(20,1.0,1.0,0.0,1);
	surf.VertexTexCoords(21,1.0,0.0,0.0,1);
	surf.VertexTexCoords(22,0.0,0.0,0.0,1);
	surf.VertexTexCoords(23,0.0,1.0,0.0,1);
	surf.AddTriangle(0,1,2);
	surf.AddTriangle(0,2,3);
	surf.AddTriangle(6,5,4);
	surf.AddTriangle(7,6,4);
	surf.AddTriangle(14,13,9);
	surf.AddTriangle(10,14,9);
	surf.AddTriangle(8,12,15);
	surf.AddTriangle(8,15,11);
	surf.AddTriangle(22,18,19);
	surf.AddTriangle(23,22,19);
	surf.AddTriangle(16,17,21);
	surf.AddTriangle(16,21,20);
	surf.UpdateVBO();
	var result = new com_gdx_math_Matrix();
	result.m11 = 1.0;
	result.m12 = 0;
	result.m13 = 0;
	result.m14 = 0;
	result.m21 = 0;
	result.m22 = 1.0;
	result.m23 = 0;
	result.m24 = 0;
	result.m31 = 0;
	result.m32 = 0;
	result.m33 = 1.0;
	result.m34 = 0;
	result.m41 = 0;
	result.m42 = 0;
	result.m43 = 0;
	result.m44 = 1.0;
	surf.CreateBoundingBox(result);
	return m;
};
com_gdx_scene3d_MeshCreator.createCylinder = function(verticalsegments,solid) {
	if(solid == null) {
		solid = true;
	}
	if(verticalsegments == null) {
		verticalsegments = 8;
	}
	var m = new com_gdx_scene3d_Mesh();
	var ringsegments = 0;
	var tr = 0;
	var tl = 0;
	var br = 0;
	var bl = 0;
	var ts0 = 0;
	var ts1 = 0;
	var newts = 0;
	var bs0 = 0;
	var bs1 = 0;
	var newbs = 0;
	if(verticalsegments < 3 || verticalsegments > 100) {
		return m;
	}
	if(ringsegments < 0 || ringsegments > 100) {
		return m;
	}
	var thissurf = m.createSurface();
	var div = 360.0 / verticalsegments;
	var height = 1.0;
	var ringSegmentHeight = height * 2.0 / (ringsegments + 1);
	var upos = 1.0;
	var udiv = 1.0 / verticalsegments;
	var vdiv = 1.0 / (ringsegments + 1);
	var SideRotAngle = 90.0;
	var tRing = [];
	var bRing = [];
	if(solid) {
		var thissidesurf = m.createSurface();
		var M_PI = 3.14159265358979323846;
		var DEG_CIRCLE = 360;
		var DEG_TO_RAD = M_PI / (DEG_CIRCLE / 2);
		var XPos = -Math.cos(SideRotAngle * DEG_TO_RAD);
		var M_PI1 = 3.14159265358979323846;
		var DEG_CIRCLE1 = 360;
		var DEG_TO_RAD1 = M_PI1 / (DEG_CIRCLE1 / 2);
		var ZPos = Math.sin(SideRotAngle * DEG_TO_RAD1);
		ts0 = thissidesurf.AddVertex(XPos,height,ZPos,XPos / 2.0 + 0.5,ZPos / 2.0 + 0.5);
		bs0 = thissidesurf.AddVertex(XPos,-height,ZPos,XPos / 2.0 + 0.5,ZPos / 2.0 + 0.5);
		thissidesurf.VertexTexCoords(ts0,XPos / 2.0 + 0.5,ZPos / 2.0 + 0.5,0.0,1);
		thissidesurf.VertexTexCoords(bs0,XPos / 2.0 + 0.5,ZPos / 2.0 + 0.5,0.0,1);
		SideRotAngle += div;
		var M_PI2 = 3.14159265358979323846;
		var DEG_CIRCLE2 = 360;
		var DEG_TO_RAD2 = M_PI2 / (DEG_CIRCLE2 / 2);
		XPos = -Math.cos(SideRotAngle * DEG_TO_RAD2);
		var M_PI3 = 3.14159265358979323846;
		var DEG_CIRCLE3 = 360;
		var DEG_TO_RAD3 = M_PI3 / (DEG_CIRCLE3 / 2);
		ZPos = Math.sin(SideRotAngle * DEG_TO_RAD3);
		ts1 = thissidesurf.AddVertex(XPos,height,ZPos,XPos / 2.0 + 0.5,ZPos / 2.0 + 0.5);
		bs1 = thissidesurf.AddVertex(XPos,-height,ZPos,XPos / 2.0 + 0.5,ZPos / 2.0 + 0.5);
		thissidesurf.VertexTexCoords(ts1,XPos / 2.0 + 0.5,ZPos / 2.0 + 0.5,0.0,1);
		thissidesurf.VertexTexCoords(bs1,XPos / 2.0 + 0.5,ZPos / 2.0 + 0.5,0.0,1);
		var _g1 = 1;
		var _g = verticalsegments - 1;
		while(_g1 < _g) {
			var i = _g1++;
			SideRotAngle += div;
			var M_PI4 = 3.14159265358979323846;
			var DEG_CIRCLE4 = 360;
			var DEG_TO_RAD4 = M_PI4 / (DEG_CIRCLE4 / 2);
			XPos = -Math.cos(SideRotAngle * DEG_TO_RAD4);
			var M_PI5 = 3.14159265358979323846;
			var DEG_CIRCLE5 = 360;
			var DEG_TO_RAD5 = M_PI5 / (DEG_CIRCLE5 / 2);
			ZPos = Math.sin(SideRotAngle * DEG_TO_RAD5);
			newts = thissidesurf.AddVertex(XPos,height,ZPos,XPos / 2.0 + 0.5,ZPos / 2.0 + 0.5);
			newbs = thissidesurf.AddVertex(XPos,-height,ZPos,XPos / 2.0 + 0.5,ZPos / 2.0 + 0.5);
			thissidesurf.VertexTexCoords(newts,XPos / 2.0 + 0.5,ZPos / 2.0 + 0.5,0.0,1);
			thissidesurf.VertexTexCoords(newbs,XPos / 2.0 + 0.5,ZPos / 2.0 + 0.5,0.0,1);
			thissidesurf.AddTriangle(ts0,ts1,newts);
			thissidesurf.AddTriangle(newbs,bs1,bs0);
			if(i < verticalsegments - 2) {
				ts1 = newts;
				bs1 = newbs;
			}
		}
		thissidesurf.UpdateVBO();
		var result = new com_gdx_math_Matrix();
		result.m11 = 1.0;
		result.m12 = 0;
		result.m13 = 0;
		result.m14 = 0;
		result.m21 = 0;
		result.m22 = 1.0;
		result.m23 = 0;
		result.m24 = 0;
		result.m31 = 0;
		result.m32 = 0;
		result.m33 = 1.0;
		result.m34 = 0;
		result.m41 = 0;
		result.m42 = 0;
		result.m43 = 0;
		result.m44 = 1.0;
		thissidesurf.CreateBoundingBox(result);
	}
	var thisHeight = height;
	SideRotAngle = 90.0;
	var M_PI6 = 3.14159265358979323846;
	var DEG_CIRCLE6 = 360;
	var DEG_TO_RAD6 = M_PI6 / (DEG_CIRCLE6 / 2);
	var XPos1 = -Math.cos(SideRotAngle * DEG_TO_RAD6);
	var M_PI7 = 3.14159265358979323846;
	var DEG_CIRCLE7 = 360;
	var DEG_TO_RAD7 = M_PI7 / (DEG_CIRCLE7 / 2);
	var ZPos1 = Math.sin(SideRotAngle * DEG_TO_RAD7);
	var thisUPos = upos;
	var thisVPos = 0.0;
	tRing[0] = thissurf.AddVertex(XPos1,thisHeight,ZPos1,thisUPos,thisVPos);
	thissurf.VertexTexCoords(tRing[0],thisUPos,thisVPos,0.0,1);
	var _g11 = 0;
	var _g2 = verticalsegments;
	while(_g11 < _g2) {
		var i1 = _g11++;
		SideRotAngle += div;
		var M_PI8 = 3.14159265358979323846;
		var DEG_CIRCLE8 = 360;
		var DEG_TO_RAD8 = M_PI8 / (DEG_CIRCLE8 / 2);
		XPos1 = -Math.cos(SideRotAngle * DEG_TO_RAD8);
		var M_PI9 = 3.14159265358979323846;
		var DEG_CIRCLE9 = 360;
		var DEG_TO_RAD9 = M_PI9 / (DEG_CIRCLE9 / 2);
		ZPos1 = Math.sin(SideRotAngle * DEG_TO_RAD9);
		thisUPos -= udiv;
		tRing[i1 + 1] = thissurf.AddVertex(XPos1,thisHeight,ZPos1,thisUPos,thisVPos);
		thissurf.VertexTexCoords(tRing[i1 + 1],thisUPos,thisVPos,0.0,1);
	}
	var _g12 = 0;
	var _g3 = ringsegments + 1 | 0;
	while(_g12 < _g3) {
		var ring = _g12++;
		thisHeight -= ringSegmentHeight;
		SideRotAngle = 90;
		var M_PI10 = 3.14159265358979323846;
		var DEG_CIRCLE10 = 360;
		var DEG_TO_RAD10 = M_PI10 / (DEG_CIRCLE10 / 2);
		XPos1 = -Math.cos(SideRotAngle * DEG_TO_RAD10);
		var M_PI11 = 3.14159265358979323846;
		var DEG_CIRCLE11 = 360;
		var DEG_TO_RAD11 = M_PI11 / (DEG_CIRCLE11 / 2);
		ZPos1 = Math.sin(SideRotAngle * DEG_TO_RAD11);
		thisUPos = upos;
		thisVPos += vdiv;
		bRing[0] = thissurf.AddVertex(XPos1,thisHeight,ZPos1,thisUPos,thisVPos);
		thissurf.VertexTexCoords(bRing[0],thisUPos,thisVPos,0.0,1);
		var _g31 = 0;
		var _g21 = verticalsegments;
		while(_g31 < _g21) {
			var i2 = _g31++;
			SideRotAngle += div;
			var M_PI12 = 3.14159265358979323846;
			var DEG_CIRCLE12 = 360;
			var DEG_TO_RAD12 = M_PI12 / (DEG_CIRCLE12 / 2);
			XPos1 = -Math.cos(SideRotAngle * DEG_TO_RAD12);
			var M_PI13 = 3.14159265358979323846;
			var DEG_CIRCLE13 = 360;
			var DEG_TO_RAD13 = M_PI13 / (DEG_CIRCLE13 / 2);
			ZPos1 = Math.sin(SideRotAngle * DEG_TO_RAD13);
			thisUPos -= udiv;
			bRing[i2 + 1] = thissurf.AddVertex(XPos1,thisHeight,ZPos1,thisUPos,thisVPos);
			thissurf.VertexTexCoords(bRing[i2 + 1],thisUPos,thisVPos,0.0,1);
		}
		var _g32 = 1;
		var _g22 = verticalsegments + 1;
		while(_g32 < _g22) {
			var v = _g32++;
			tl = tRing[v];
			tr = tRing[v - 1];
			bl = bRing[v];
			br = bRing[v - 1];
			thissurf.AddTriangle(tl,tr,br);
			thissurf.AddTriangle(bl,tl,br);
		}
		var _g33 = 0;
		var _g23 = verticalsegments + 1;
		while(_g33 < _g23) {
			var v1 = _g33++;
			tRing[v1] = bRing[v1];
		}
	}
	tRing = [];
	bRing = [];
	thissurf.UpdateVBO();
	var result1 = new com_gdx_math_Matrix();
	result1.m11 = 1.0;
	result1.m12 = 0;
	result1.m13 = 0;
	result1.m14 = 0;
	result1.m21 = 0;
	result1.m22 = 1.0;
	result1.m23 = 0;
	result1.m24 = 0;
	result1.m31 = 0;
	result1.m32 = 0;
	result1.m33 = 1.0;
	result1.m34 = 0;
	result1.m41 = 0;
	result1.m42 = 0;
	result1.m43 = 0;
	result1.m44 = 1.0;
	thissurf.CreateBoundingBox(result1);
	return m;
};
com_gdx_scene3d_MeshCreator.createMeshGroundHeighMap = function(url,width,height,subdivisions,minHeight,maxHeight) {
	var m = new com_gdx_scene3d_Mesh();
	var img = null;
	if(lime_utils_Assets.exists(url)) {
		img = lime_utils_Assets.getImage(url);
	} else {
		haxe_Log.trace("Error: Image '" + url + "' doesn't exist !",{ fileName : "MeshCreator.hx", lineNumber : 911, className : "com.gdx.scene3d.MeshCreator", methodName : "createMeshGroundHeighMap"});
		return com_gdx_scene3d_MeshCreator.createCube();
	}
	var surf = m.createSurface();
	var _g1 = 0;
	var _g = subdivisions + 1;
	while(_g1 < _g) {
		var row = _g1++;
		var _g3 = 0;
		var _g2 = subdivisions + 1;
		while(_g3 < _g2) {
			var col = _g3++;
			var position = new com_gdx_math_Vector3(col * width / subdivisions - width / 2.0,0,(subdivisions - row) * height / subdivisions - height / 2.0);
			var normal = new com_gdx_math_Vector3(0,1.0,0);
			var heightMapX = (position.x + width / 2) / width * (img.width - 1) | 0;
			var heightMapY = (1.0 - (position.z + height / 2) / height) * (img.height - 1) | 0;
			var pos = (heightMapX + heightMapY * img.width) * 4 | 0;
			var r;
			var g;
			var b;
			r = _$UInt_UInt_$Impl_$.toFloat(img.get_data()[pos]) / 255.0;
			g = _$UInt_UInt_$Impl_$.toFloat(img.get_data()[pos + 1]) / 255.0;
			b = _$UInt_UInt_$Impl_$.toFloat(img.get_data()[pos + 2]) / 255.0;
			var gradient = r * 0.3 + g * 0.59 + b * 0.11;
			position.y = minHeight + (maxHeight - minHeight) * gradient;
			surf.material.materialType = 3;
			surf.vert_coords.push(position.x);
			surf.vert_coords.push(position.y);
			surf.vert_coords.push(position.z);
			surf.vert_col.push(1);
			surf.vert_col.push(1);
			surf.vert_col.push(1);
			surf.vert_col.push(1);
			surf.vert_norm.push(normal.x);
			surf.vert_norm.push(normal.y);
			surf.vert_norm.push(normal.z);
			surf.vert_tex_coords0.push(col / subdivisions);
			surf.vert_tex_coords0.push(row / subdivisions);
			surf.vert_tex_coords1.push(col / subdivisions);
			surf.vert_tex_coords1.push(row / subdivisions);
		}
	}
	var _g11 = 0;
	var _g4 = subdivisions;
	while(_g11 < _g4) {
		var row1 = _g11++;
		var _g31 = 0;
		var _g21 = subdivisions;
		while(_g31 < _g21) {
			var col1 = _g31++;
			surf.tris.push(col1 + 1 + (row1 + 1) * (subdivisions + 1));
			surf.tris.push(col1 + 1 + row1 * (subdivisions + 1));
			surf.tris.push(col1 + row1 * (subdivisions + 1));
			surf.no_tris += 1;
			surf.tris.push(col1 + (row1 + 1) * (subdivisions + 1));
			surf.tris.push(col1 + 1 + (row1 + 1) * (subdivisions + 1));
			surf.tris.push(col1 + row1 * (subdivisions + 1));
			surf.no_tris += 1;
		}
	}
	surf.reset_vbo = -1;
	surf.UpdateVBO();
	var result = new com_gdx_math_Matrix();
	result.m11 = 1.0;
	result.m12 = 0;
	result.m13 = 0;
	result.m14 = 0;
	result.m21 = 0;
	result.m22 = 1.0;
	result.m23 = 0;
	result.m24 = 0;
	result.m31 = 0;
	result.m32 = 0;
	result.m33 = 1.0;
	result.m34 = 0;
	result.m41 = 0;
	result.m42 = 0;
	result.m43 = 0;
	result.m44 = 1.0;
	surf.CreateBoundingBox(result);
	return m;
};
com_gdx_scene3d_MeshCreator.loadStaticB3DMesh = function(f,path) {
	var file = com_gdx_util_Util.getBytes(f);
	if(_$UInt_UInt_$Impl_$.gte(0,file.length - file.position)) {
		return com_gdx_scene3d_MeshCreator.createCube();
	}
	var b3d_tos = 0;
	var b3d_stack = [];
	var textures = [];
	var brushes = [];
	var listVertex = [];
	var m = new com_gdx_scene3d_Mesh();
	var AnimatedVertices_VertexID = [];
	var AnimatedVertices_BufferID = [];
	var VerticesStart = 0;
	var ReadChunk = function() {
		var tag = file.readUTFBytes(4);
		var size = file.readInt();
		b3d_tos += 1;
		b3d_stack[b3d_tos] = file.position + size;
		return tag;
	};
	var getChunkSize = function() {
		return b3d_stack[b3d_tos] - file.position;
	};
	var breakChunk = function() {
		file.position = b3d_stack[b3d_tos];
		b3d_tos -= 1;
	};
	var readstring = function() {
		var name = "";
		var _g = 0;
		while(_g < 256) {
			var j = _g++;
			var ch = file.readUnsignedByte();
			if(ch == 0) {
				break;
			}
			name += String.fromCharCode(ch);
		}
		return name;
	};
	var readANIM = function() {
		var flags = file.readInt();
		file.readInt();
		file.readFloat();
	};
	var readBone = function() {
		while(getChunkSize() != 0) {
			var id = file.readInt();
			var vw = file.readFloat();
		}
	};
	var readTEX = function() {
		while(getChunkSize() != 0) {
			var texture = haxe_io_Path.withoutDirectory(readstring());
			if(haxe_io_Path.extension(texture) == "bmp") {
				texture = haxe_io_Path.withoutExtension(texture);
				texture += ".jpg";
			} else if(haxe_io_Path.extension(texture) == "tga") {
				texture = haxe_io_Path.withoutExtension(texture);
				texture += ".png";
			}
			textures.push(texture);
			file.readInt();
			file.readInt();
			file.readFloat();
			file.readFloat();
			file.readFloat();
			file.readFloat();
			file.readFloat();
		}
	};
	var readBRUS = function() {
		var count = file.readInt();
		while(getChunkSize() != 0) {
			var brush = new com_gdx_gl_material_Material();
			if(count == 2) {
				brush.materialType = 3;
			}
			readstring();
			brush.DiffuseColor.r = file.readFloat();
			brush.DiffuseColor.g = file.readFloat();
			brush.DiffuseColor.b = file.readFloat();
			brush.alpha = file.readFloat();
			file.readFloat();
			var blend = file.readInt();
			var fx = file.readInt();
			var _g1 = 0;
			var _g2 = count;
			while(_g1 < _g2) {
				var i = _g1++;
				var textid = file.readInt();
				if(lime_utils_Assets.exists(path + textures[textid])) {
					if(i == 0) {
						brush.setTexture(com_gdx_Gdx.Instance().getTexture(path + textures[textid],true,true,true),0);
					} else {
						brush.setTexture(com_gdx_Gdx.Instance().getTexture(path + textures[textid],true,true,false),1);
					}
				} else {
					haxe_Log.trace("ERROR: Texture (" + path + textures[textid] + ") dont find..",{ fileName : "MeshCreator.hx", lineNumber : 1340, className : "com.gdx.scene3d.MeshCreator", methodName : "loadStaticB3DMesh"});
				}
			}
			brushes.push(brush);
		}
	};
	var readKEYS = function() {
		var Flags = file.readInt();
		var Size = 4;
		if((Flags & 1) > 0) {
			Size += 12;
		}
		if((Flags & 2) > 0) {
			Size += 12;
		}
		if((Flags & 4) > 0) {
			Size += 16;
		}
		while(getChunkSize() != 0) {
			var frame = file.readInt();
			if((Flags & 1) > 0) {
				var x = file.readFloat();
				var y = file.readFloat();
				var z = file.readFloat();
			}
			if((Flags & 2) > 0) {
				var x1 = file.readFloat();
				var y1 = file.readFloat();
				var z1 = file.readFloat();
			}
			if((Flags & 4) > 0) {
				var w = file.readFloat();
				var x2 = file.readFloat();
				var y2 = file.readFloat();
				var z2 = file.readFloat();
			}
		}
	};
	var readVTS = function() {
		var flags1 = file.readInt();
		var tex_coord = file.readInt();
		var texsize = file.readInt();
		var Size1 = 12 + tex_coord * texsize * 4;
		if((flags1 & 1) == 1) {
			Size1 += 12;
		}
		if((flags1 & 2) == 2) {
			Size1 += 16;
		}
		var VertexCount = getChunkSize() / Size1 | 0;
		while(getChunkSize() > 0) {
			var vertex = new com_gdx_gl_VertexBone();
			vertex.Pos.x = file.readFloat();
			vertex.Pos.y = file.readFloat();
			vertex.Pos.z = file.readFloat();
			if((flags1 & 1) > 0) {
				vertex.Normal.x = file.readFloat();
				vertex.Normal.y = file.readFloat();
				vertex.Normal.z = file.readFloat();
			}
			if((flags1 & 2) > 0) {
				vertex.Color.r = file.readFloat();
				vertex.Color.g = file.readFloat();
				vertex.Color.b = file.readFloat();
				vertex.Color.a = file.readFloat();
			}
			if(tex_coord == 1) {
				if(texsize == 2) {
					vertex.TCoords0.x = file.readFloat();
					vertex.TCoords0.y = file.readFloat();
				} else {
					vertex.TCoords0.x = file.readFloat();
					vertex.TCoords0.y = file.readFloat();
					file.readFloat();
				}
			} else if(texsize == 2) {
				vertex.TCoords0.x = file.readFloat();
				vertex.TCoords0.y = file.readFloat();
				vertex.TCoords1.x = file.readFloat();
				vertex.TCoords1.y = file.readFloat();
			} else {
				vertex.TCoords0.x = file.readFloat();
				vertex.TCoords0.y = file.readFloat();
				file.readFloat();
				vertex.TCoords1.x = file.readFloat();
				vertex.TCoords1.y = file.readFloat();
				file.readFloat();
			}
			AnimatedVertices_VertexID.push(-1);
			AnimatedVertices_BufferID.push(-1);
			listVertex.push(vertex);
		}
	};
	var readTRIS = function(surf,surfaceId,vtStar) {
		var brushid = file.readInt();
		var TriangleCount = getChunkSize() / 12 | 0;
		var showwarning = false;
		var vertex_id = [];
		while(getChunkSize() != 0) {
			vertex_id[0] = file.readInt();
			vertex_id[1] = file.readInt();
			vertex_id[2] = file.readInt();
			vertex_id[0] += vtStar;
			vertex_id[1] += vtStar;
			vertex_id[2] += vtStar;
			var _g3 = 0;
			while(_g3 < 3) {
				var i1 = _g3++;
				if(vertex_id[i1] >= AnimatedVertices_VertexID.length) {
					haxe_Log.trace("Illegal vertex index found",{ fileName : "MeshCreator.hx", lineNumber : 1522, className : "com.gdx.scene3d.MeshCreator", methodName : "loadStaticB3DMesh"});
					return;
				}
				if(AnimatedVertices_VertexID[vertex_id[i1]] != -1) {
					if(AnimatedVertices_BufferID[vertex_id[i1]] != surfaceId) {
						AnimatedVertices_VertexID[vertex_id[i1]] = -1;
						AnimatedVertices_BufferID[vertex_id[i1]] = -1;
						showwarning = true;
					}
				}
				if(AnimatedVertices_VertexID[vertex_id[i1]] == -1) {
					var vertex1 = listVertex[vertex_id[i1]];
					surf.AddFullVertexColorVector(vertex1.Pos,vertex1.Normal,vertex1.TCoords0,vertex1.TCoords1,vertex1.Color);
					var vertex_id1 = vertex_id[i1];
					var readTRIS1 = surf.CountVertices() - 1;
					AnimatedVertices_VertexID[vertex_id1] = readTRIS1;
					AnimatedVertices_BufferID[vertex_id[i1]] = surfaceId;
				}
			}
			surf.AddTriangle(AnimatedVertices_VertexID[vertex_id[0]],AnimatedVertices_VertexID[vertex_id[1]],AnimatedVertices_VertexID[vertex_id[2]]);
		}
		if(showwarning) {
			haxe_Log.trace("Warning, different meshbuffers linking to the same vertex, this will cause problems with animated meshes",{ fileName : "MeshCreator.hx", lineNumber : 1566, className : "com.gdx.scene3d.MeshCreator", methodName : "loadStaticB3DMesh"});
		}
		surf.material.clone(brushes[brushid]);
		var result = new com_gdx_math_Matrix();
		result.m11 = 1.0;
		result.m12 = 0;
		result.m13 = 0;
		result.m14 = 0;
		result.m21 = 0;
		result.m22 = 1.0;
		result.m23 = 0;
		result.m24 = 0;
		result.m31 = 0;
		result.m32 = 0;
		result.m33 = 1.0;
		result.m34 = 0;
		result.m41 = 0;
		result.m42 = 0;
		result.m43 = 0;
		result.m44 = 1.0;
		surf.CreateBoundingBox(result);
	};
	var readMESH = function() {
		var brushID = file.readInt();
		while(getChunkSize() != 0) {
			var ChunkName = ReadChunk();
			if(ChunkName == "VRTS") {
				readVTS();
			} else if(ChunkName == "TRIS") {
				var surf1 = m.createSurface();
				readTRIS(surf1,m.surfaces.length - 1,VerticesStart);
			}
			breakChunk();
		}
	};
	var readNODE = null;
	readNODE = function() {
		var n = readstring();
		file.readFloat();
		file.readFloat();
		file.readFloat();
		file.readFloat();
		file.readFloat();
		file.readFloat();
		var rw = file.readFloat();
		var rx = file.readFloat();
		var ry = file.readFloat();
		var rz = file.readFloat();
		while(getChunkSize() != 0) {
			var ChunkName1 = ReadChunk();
			if(ChunkName1 == "MESH") {
				VerticesStart = listVertex.length;
				readMESH();
			} else if(ChunkName1 == "BONE") {
				readBone();
			}
			if(ChunkName1 == "ANIM") {
				readANIM();
			} else if(ChunkName1 == "KEYS") {
				readKEYS();
			} else if(ChunkName1 == "NODE") {
				readNODE();
			}
			breakChunk();
		}
	};
	var readNODE1 = readNODE;
	if(!lime_utils_Assets.exists(f)) {
		haxe_Log.trace("ERROR:Model " + f + "dont exists..",{ fileName : "MeshCreator.hx", lineNumber : 1670, className : "com.gdx.scene3d.MeshCreator", methodName : "loadStaticB3DMesh"});
		return com_gdx_scene3d_MeshCreator.createCube();
	}
	ReadChunk();
	file.readInt();
	while(getChunkSize() != 0) {
		var ChunkName2 = ReadChunk();
		if(ChunkName2 == "TEXS") {
			readTEX();
		} else if(ChunkName2 == "BRUS") {
			readBRUS();
		} else if(ChunkName2 == "NODE") {
			readNODE1();
		}
		breakChunk();
	}
	breakChunk();
	AnimatedVertices_VertexID = null;
	AnimatedVertices_BufferID = null;
	listVertex = null;
	textures = null;
	brushes = null;
	b3d_tos = 0;
	b3d_stack = null;
	return m;
};
com_gdx_scene3d_MeshCreator.loadBSPMap = function(filename,path,gamma,optimize,parseEntitys) {
	if(parseEntitys == null) {
		parseEntitys = false;
	}
	if(optimize == null) {
		optimize = false;
	}
	if(gamma == null) {
		gamma = 5.0;
	}
	var mesh = new com_gdx_scene3d_MeshBSP();
	mesh.loadMap(filename,path,gamma,optimize,parseEntitys);
	return mesh;
};
com_gdx_scene3d_MeshCreator.loadMs3dStatic = function(filename,path) {
	var file = com_gdx_util_Util.getBytes(filename);
	file.__endian = "littleEndian";
	var name = "";
	var k = 0;
	var _g1 = 0;
	var _g = 10;
	while(_g1 < _g) {
		var j = _g1++;
		var ch = file.readByte();
		if(ch > 32 && ch <= 126) {
			name += String.fromCharCode(ch);
		}
	}
	var id = name;
	var version = file.readInt();
	var vertices = [];
	var numVerts = file.readUnsignedShort();
	var _g11 = 0;
	var _g2 = numVerts;
	while(_g11 < _g2) {
		var i = _g11++;
		var tri = new com_gdx_scene3d_ms3d_MS3DVertex(file);
		vertices.push(tri);
	}
	var triangles = [];
	var numTriangles = file.readUnsignedShort();
	var _g12 = 0;
	var _g3 = numTriangles;
	while(_g12 < _g3) {
		var i1 = _g12++;
		var tri1 = new com_gdx_scene3d_ms3d_MS3DTriangle(file);
		triangles.push(tri1);
	}
	var meshes = [];
	var numMeshes = file.readUnsignedShort();
	var _g13 = 0;
	var _g4 = numMeshes;
	while(_g13 < _g4) {
		var i2 = _g13++;
		var mesh = new com_gdx_scene3d_ms3d_MS3DMesh(file);
		meshes.push(mesh);
	}
	var m = new com_gdx_scene3d_Mesh();
	var _g14 = 0;
	var _g5 = numMeshes;
	while(_g14 < _g5) {
		var i3 = _g14++;
		var mesh1 = meshes[i3];
		var buffer = m.createSurface();
		var _g31 = 0;
		var _g21 = mesh1.numTriangles;
		while(_g31 < _g21) {
			var j1 = _g31++;
			var index0 = triangles[mesh1.TriangleIndices[j1]].indice0;
			var v0 = vertices[index0].vertex;
			var n0 = triangles[mesh1.TriangleIndices[j1]].normal0;
			var u0 = triangles[mesh1.TriangleIndices[j1]].s.x;
			var t0 = -triangles[mesh1.TriangleIndices[j1]].t.x;
			var index1 = triangles[mesh1.TriangleIndices[j1]].indice1;
			var v1 = vertices[index1].vertex;
			var n1 = triangles[mesh1.TriangleIndices[j1]].normal1;
			var u1 = triangles[mesh1.TriangleIndices[j1]].s.y;
			var t1 = -triangles[mesh1.TriangleIndices[j1]].t.y;
			var index2 = triangles[mesh1.TriangleIndices[j1]].indice2;
			var v2 = vertices[index2].vertex;
			var n2 = triangles[mesh1.TriangleIndices[j1]].normal2;
			var u2 = triangles[mesh1.TriangleIndices[j1]].s.z;
			var t2 = -triangles[mesh1.TriangleIndices[j1]].t.z;
			var f0 = buffer.AddFullVertexColorVector(v0,n0,new com_gdx_math_Vector2(u0,t0),new com_gdx_math_Vector2(u0,t0),new com_gdx_color_Color4());
			var f1 = buffer.AddFullVertexColorVector(v1,n1,new com_gdx_math_Vector2(u1,t1),new com_gdx_math_Vector2(u1,t1),new com_gdx_color_Color4());
			var f2 = buffer.AddFullVertexColorVector(v2,n2,new com_gdx_math_Vector2(u2,t2),new com_gdx_math_Vector2(u2,t2),new com_gdx_color_Color4());
			buffer.AddTriangle(f0,f2,f1);
		}
	}
	var numMaterials = file.readUnsignedShort();
	var materials = [];
	var _g15 = 0;
	var _g6 = numMaterials;
	while(_g15 < _g6) {
		var i4 = _g15++;
		var material = new com_gdx_scene3d_ms3d_MS3DMaterial(file,path);
		materials.push(material);
	}
	var _g16 = 0;
	var _g7 = numMeshes;
	while(_g16 < _g7) {
		var i5 = _g16++;
		var mesh2 = meshes[i5];
		var buffer1 = m.getMeshBuffer(i5);
		if(mesh2.MaterialIndex <= materials.length) {
			var mat = materials[mesh2.MaterialIndex];
			if(mat != null) {
				if(mat.texture != null) {
					buffer1.material.setTexture(mat.texture);
				}
			}
		}
	}
	var framesPerSecond = file.readFloat();
	var currentTime = file.readFloat();
	var NumFrames = file.readInt();
	var numJoints = file.readUnsignedShort();
	if(numJoints > 0) {
		var _g17 = 0;
		var _g8 = numJoints;
		while(_g17 < _g8) {
			var i6 = _g17++;
			var flags = file.readByte();
			var name1 = com_gdx_scene3d_MeshCreator.readString(file,32);
			var nameParent = com_gdx_scene3d_MeshCreator.readString(file,32);
			var pos = com_gdx_math_Vector3.get_zero();
			pos.x = file.readFloat();
			pos.y = file.readFloat();
			pos.z = file.readFloat();
			var r = com_gdx_math_Vector3.get_zero();
			r.x = file.readFloat();
			r.y = file.readFloat();
			r.z = file.readFloat();
			haxe_Log.trace(name1 + " , " + nameParent + " , " + Std.string(pos) + " , " + Std.string(r),{ fileName : "MeshCreator.hx", lineNumber : 1872, className : "com.gdx.scene3d.MeshCreator", methodName : "loadMs3dStatic"});
			var numRotKeyFrames = file.readUnsignedShort();
			var numPosKeyFrames = file.readUnsignedShort();
			var _g32 = 0;
			var _g22 = numRotKeyFrames;
			while(_g32 < _g22) {
				var k1 = _g32++;
				var time = file.readFloat();
				var x = file.readFloat();
				var y = file.readFloat();
				var z = file.readFloat();
			}
			var _g33 = 0;
			var _g23 = numPosKeyFrames;
			while(_g33 < _g23) {
				var k2 = _g33++;
				var time1 = file.readFloat();
				var x1 = file.readFloat();
				var y1 = file.readFloat();
				var z1 = file.readFloat();
			}
		}
		haxe_Log.trace(framesPerSecond,{ fileName : "MeshCreator.hx", lineNumber : 1896, className : "com.gdx.scene3d.MeshCreator", methodName : "loadMs3dStatic"});
		haxe_Log.trace(currentTime,{ fileName : "MeshCreator.hx", lineNumber : 1897, className : "com.gdx.scene3d.MeshCreator", methodName : "loadMs3dStatic"});
		haxe_Log.trace(NumFrames,{ fileName : "MeshCreator.hx", lineNumber : 1898, className : "com.gdx.scene3d.MeshCreator", methodName : "loadMs3dStatic"});
		haxe_Log.trace(numJoints,{ fileName : "MeshCreator.hx", lineNumber : 1899, className : "com.gdx.scene3d.MeshCreator", methodName : "loadMs3dStatic"});
	}
	return m;
};
com_gdx_scene3d_MeshCreator.readString = function(byteData,count) {
	var name = "";
	var k = 0;
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var j = _g1++;
		var ch = byteData.readByte();
		if(ch > 33 && ch <= 125) {
			name += String.fromCharCode(ch);
		}
	}
	return name;
};
var com_gdx_scene3d_MeshSkyBox = function(size,cubemap) {
	com_gdx_Buffer.call(this);
	this.brush = new com_gdx_gl_material_Material();
	this.brush.BlendFace = false;
	this.brush.DepthMask = false;
	this.brush.DepthTest = false;
	this.brush.CullingFace = false;
	var vertices = [-size,-size,size,size,-size,size,-size,size,size,size,size,size,-size,-size,-size,size,-size,-size,-size,size,-size,size,size,-size];
	var indices = [0,1,2,3,7,1,5,4,7,6,2,4,0,1];
	this.coordBuffer = com_gdx_Gdx.gl.createBuffer();
	this.indexBuffer = com_gdx_Gdx.gl.createBuffer();
	com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
	var tmp = com_gdx_Gdx.gl;
	var tmp1 = com_gdx_Gdx.gl.ELEMENT_ARRAY_BUFFER;
	var this1;
	if(indices != null) {
		this1 = new Int16Array(indices);
	} else {
		this1 = null;
	}
	lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(tmp,tmp1,this1,com_gdx_Gdx.gl.STATIC_DRAW);
	com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ELEMENT_ARRAY_BUFFER,null);
	com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.coordBuffer);
	var tmp2 = com_gdx_Gdx.gl;
	var tmp3 = com_gdx_Gdx.gl.ARRAY_BUFFER;
	var this2;
	if(vertices != null) {
		this2 = new Float32Array(vertices);
	} else {
		this2 = null;
	}
	lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(tmp2,tmp3,this2,com_gdx_Gdx.gl.STATIC_DRAW);
	com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,null);
	this.shader = new com_gdx_gl_shaders_ShaderSkyBox();
};
$hxClasses["com.gdx.scene3d.MeshSkyBox"] = com_gdx_scene3d_MeshSkyBox;
com_gdx_scene3d_MeshSkyBox.__name__ = true;
com_gdx_scene3d_MeshSkyBox.__super__ = com_gdx_Buffer;
com_gdx_scene3d_MeshSkyBox.prototype = $extend(com_gdx_Buffer.prototype,{
	render: function(camera) {
		var x = camera.local_pos.x;
		var y = camera.local_pos.y;
		var z = camera.local_pos.z;
		var result = new com_gdx_math_Matrix();
		result.m11 = 1.0;
		result.m12 = 0;
		result.m13 = 0;
		result.m14 = 0;
		result.m21 = 0;
		result.m22 = 1.0;
		result.m23 = 0;
		result.m24 = 0;
		result.m31 = 0;
		result.m32 = 0;
		result.m33 = 1.0;
		result.m34 = 0;
		result.m41 = 0;
		result.m42 = 0;
		result.m43 = 0;
		result.m44 = 1.0;
		var result1 = result;
		com_gdx_math_Matrix.TranslationToRef(x,y,z,result1);
		var meshTrasform = result1;
		this.shader.Bind(camera.viewMatrix,camera.projMatrix,meshTrasform);
		this.brush.Applay();
		this.shader.setCubeMap(this.texture);
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ARRAY_BUFFER,this.coordBuffer);
		com_gdx_Gdx.gl.vertexAttribPointer(this.shader.vertexAttribute,3,com_gdx_Gdx.gl.FLOAT,false,0,0);
		com_gdx_Gdx.gl.enableVertexAttribArray(this.shader.vertexAttribute);
		com_gdx_Gdx.gl.bindBuffer(com_gdx_Gdx.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		com_gdx_Gdx.gl.drawElements(com_gdx_Gdx.gl.TRIANGLE_STRIP,14,com_gdx_Gdx.gl.UNSIGNED_SHORT,0);
		com_gdx_Gdx.Instance().numTris += 14;
		com_gdx_Gdx.Instance().numVertex += 7;
		com_gdx_Gdx.Instance().numMesh += 1;
		com_gdx_Gdx.Instance().numSurfaces += 1;
	}
	,dispose: function() {
		com_gdx_Buffer.prototype.dispose.call(this);
		this.brush.dispose();
		this.brush = null;
		this.coordBuffer = null;
		this.indexBuffer = null;
	}
	,__class__: com_gdx_scene3d_MeshSkyBox
});
var com_gdx_scene3d_SceneManager = function(spritesAlloc,useShadow) {
	if(useShadow == null) {
		useShadow = false;
	}
	if(spritesAlloc == null) {
		spritesAlloc = 500;
	}
	com_gdx_Buffer.call(this);
	this.useShadow = useShadow;
	if(useShadow) {
		this.shadow = new com_gdx_scene3d_Shadow(new com_gdx_math_Vector3(53,50,-15));
	}
	this.nodes = new List();
	this.nodesToDelete = new List();
	this.nodesToAdd = new List();
	this.graphics = new List();
	this.cameras = new List();
	this.mainCamera = null;
	this.uiCamera = new com_gdx_scene3d_cameras_OrthoCamera();
	this.spritebatch = new com_gdx_scene2d_render_SpriteBatch(this.uiCamera,spritesAlloc);
	com_gdx_scene3d_SceneManager.lines = null;
	com_gdx_scene3d_SceneManager.lines = new com_gdx_gl_Imidiatemode(9000);
	this.skyBox = null;
	this.sSpotLight = new com_gdx_gl_shaders_ShaderSpotLight();
	this.sPointLight = new com_gdx_gl_shaders_ShaderPointLight();
	this.LightsList = new List();
};
$hxClasses["com.gdx.scene3d.SceneManager"] = com_gdx_scene3d_SceneManager;
com_gdx_scene3d_SceneManager.__name__ = true;
com_gdx_scene3d_SceneManager.__super__ = com_gdx_Buffer;
com_gdx_scene3d_SceneManager.prototype = $extend(com_gdx_Buffer.prototype,{
	addTargetCamera: function(x,y,z,lx,ly,lz) {
		var cam = new com_gdx_scene3d_cameras_TargetCamera(x,y,z,lx,ly,lz);
		this.setCamera(cam);
		this.cameras.add(cam);
		return cam;
	}
	,setCamera: function(cam) {
		this.mainCamera = cam;
	}
	,addSceneNode: function(mesh,parent,id,name,castShadows) {
		if(castShadows == null) {
			castShadows = false;
		}
		if(name == null) {
			name = "node";
		}
		if(id == null) {
			id = 0;
		}
		var m = new com_gdx_scene3d_SceneNode(mesh,parent,id,name);
		if(parent == null) {
			this.addNode(m);
		}
		if(castShadows && this.useShadow) {
			this.shadow.addNode(m);
		}
		return m;
	}
	,addNodeMeshOctree: function(mesh,minimalPolysPerNode,id,name) {
		var m = new com_gdx_scene3d_partition_NodeMeshOctree(mesh,minimalPolysPerNode,null,id,name);
		this.addNode(m);
		return m;
	}
	,addSkyBox: function(size,tex) {
		if(this.skyBox != null) {
			this.skyBox.dispose();
			this.skyBox = null;
		}
		this.skyBox = new com_gdx_scene3d_MeshSkyBox(size,com_gdx_Gdx.Instance().getTextureCubemap(tex));
		return this.skyBox;
	}
	,addImageFont: function(f,caption,x,y,spacing) {
		if(spacing == null) {
			spacing = -8;
		}
		var img = new com_gdx_scene2d_ui_ImageFont(com_gdx_Gdx.Instance().getTexture(f,false,false,false),spacing);
		img.set_caption(caption);
		img.x = x;
		img.y = y;
		this.addUI(img);
		return img;
	}
	,addNode: function(n) {
		this.nodesToAdd.add(n);
		return n;
	}
	,addUI: function(g) {
		this.graphics.add(g);
		return g;
	}
	,update: function() {
		com_gdx_scene3d_SceneManager.lines.reset();
		var _g_head = this.cameras.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var camera = val;
			camera.update();
		}
		var _g_head1 = this.nodes.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var node = val1;
			if(node.active) {
				node.update();
			}
			if(!node.active) {
				this.nodesToDelete.add(node);
			}
			node.debug(com_gdx_scene3d_SceneManager.lines);
		}
		var _g_head2 = this.nodesToAdd.h;
		while(_g_head2 != null) {
			var val2 = _g_head2.item;
			_g_head2 = _g_head2.next;
			var node1 = val2;
			if(node1.active) {
				this.nodes.add(node1);
			}
		}
		var _g_head3 = this.nodesToDelete.h;
		while(_g_head3 != null) {
			var val3 = _g_head3.item;
			_g_head3 = _g_head3.next;
			var node2 = val3;
			if(!node2.active) {
				this.nodes.remove(node2);
			}
		}
		this.nodesToDelete.clear();
		this.nodesToAdd.clear();
	}
	,render: function() {
		if(this.skyBox != null) {
			this.skyBox.render(this.mainCamera);
		}
		if(this.useShadow) {
			this.shadow.draw(this.mainCamera);
		}
		var _g_head = this.nodes.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var node = val;
			if(node.active) {
				node.render(this.mainCamera);
			}
			node.debug(com_gdx_scene3d_SceneManager.lines);
		}
		com_gdx_Gdx.Instance().setBlend(true);
		com_gdx_Gdx.Instance().setBlendFunc(com_gdx_Gdx.gl.ONE,com_gdx_Gdx.gl.ONE);
		com_gdx_Gdx.Instance().setDepthMask(false);
		com_gdx_Gdx.Instance().setDepthFunc(com_gdx_Gdx.gl.EQUAL);
		var _g_head1 = this.nodes.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var node1 = val1;
			if(node1._enableLighting) {
				if(js_Boot.__instanceof(node1,com_gdx_scene3d_SceneNode)) {
					var n = js_Boot.__cast(node1 , com_gdx_scene3d_SceneNode);
					if(n != null) {
						if(n.active) {
							var _g_head2 = this.LightsList.h;
							while(_g_head2 != null) {
								var val2 = _g_head2.item;
								_g_head2 = _g_head2.next;
								var light = val2;
								light.update();
								if(light.active) {
									if(light.visible) {
										if(js_Boot.__instanceof(light,com_gdx_scene3d_lights_PointLight)) {
											var lData = js_Boot.__cast(light , com_gdx_scene3d_lights_PointLight);
											this.sPointLight.setLightData(lData,this.mainCamera.local_pos);
											this.sPointLight.Bind(this.mainCamera.viewMatrix,this.mainCamera.projMatrix,n.world_tform);
											n.renderTo(this.sPointLight,this.mainCamera,false);
											this.sPointLight.unBind();
										} else if(js_Boot.__instanceof(light,com_gdx_scene3d_lights_SpotLight)) {
											var lData1 = js_Boot.__cast(light , com_gdx_scene3d_lights_SpotLight);
											this.sSpotLight.setLightData(lData1,this.mainCamera.local_pos);
											this.sSpotLight.Bind(this.mainCamera.viewMatrix,this.mainCamera.projMatrix,n.world_tform);
											n.renderTo(this.sSpotLight,this.mainCamera,false);
											this.sSpotLight.unBind();
										}
									}
								} else {
									this.LightsList.remove(light);
									break;
								}
							}
						}
					}
				}
			}
		}
		com_gdx_Gdx.Instance().setBlend(false);
		com_gdx_Gdx.Instance().setDepthMask(true);
		com_gdx_Gdx.Instance().setDepthFunc(com_gdx_Gdx.gl.LESS);
		com_gdx_scene3d_SceneManager.lines.render(this.mainCamera,com_gdx_scene3d_SceneManager.matIden);
	}
	,renderUI: function() {
		this.uiCamera.update();
		this.spritebatch.Begin();
		var _g_head = this.graphics.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var graphic = val;
			graphic.render(this.spritebatch);
		}
		this.spritebatch.End();
	}
	,dispose: function() {
		com_gdx_Buffer.prototype.dispose.call(this);
		com_gdx_scene3d_SceneManager.lines.dispose();
		this.spritebatch.dispose();
		this.graphics.clear();
		this.nodes.clear();
		this.nodesToAdd.clear();
		this.nodesToDelete.clear();
	}
	,__class__: com_gdx_scene3d_SceneManager
});
var com_gdx_scene3d_Shadow = function(light) {
	this.orthoBottom = Infinity;
	this.orthoTop = -Infinity;
	this.orthoRight = -Infinity;
	this.orthoLeft = Infinity;
	this.shadowOrthoScale = 0.5;
	this.width = 1024;
	this.height = 1024;
	this.fbo = com_gdx_Gdx.gl.createFramebuffer();
	this.fboTexture = com_gdx_Gdx.gl.createTexture();
	this.rbo = com_gdx_Gdx.gl.createRenderbuffer();
	this.shadow = new com_gdx_gl_shaders_ShaderCast();
	this.shadow_nodes = [];
	this.lightPosition = light;
	this.quad = new com_gdx_gl_ScreenQuad();
	this.minBound = new com_gdx_math_Vector3(99999,99999,99999);
	this.maxBound = new com_gdx_math_Vector3(-99999,-99999,-99999);
	var result = new com_gdx_math_Matrix();
	result.m11 = 0;
	result.m12 = 0;
	result.m13 = 0;
	result.m14 = 0;
	result.m21 = 0;
	result.m22 = 0;
	result.m23 = 0;
	result.m24 = 0;
	result.m31 = 0;
	result.m32 = 0;
	result.m33 = 0;
	result.m34 = 0;
	result.m41 = 0;
	result.m42 = 0;
	result.m43 = 0;
	result.m44 = 0;
	this.lightMatrix = result;
	var eye = this.lightPosition;
	var target = new com_gdx_math_Vector3(0,1,0);
	var up = new com_gdx_math_Vector3(0,1.0,0);
	var result1 = new com_gdx_math_Matrix();
	result1.m11 = 0;
	result1.m12 = 0;
	result1.m13 = 0;
	result1.m14 = 0;
	result1.m21 = 0;
	result1.m22 = 0;
	result1.m23 = 0;
	result1.m24 = 0;
	result1.m31 = 0;
	result1.m32 = 0;
	result1.m33 = 0;
	result1.m34 = 0;
	result1.m41 = 0;
	result1.m42 = 0;
	result1.m43 = 0;
	result1.m44 = 0;
	var result2 = result1;
	com_gdx_math_Matrix.LookAtLHToRef(eye,target,up,result2);
	this.viewMatrix = result2;
	this.bound = new com_gdx_math_BoundingBox(this.minBound,this.maxBound);
	this.blocks = [];
};
$hxClasses["com.gdx.scene3d.Shadow"] = com_gdx_scene3d_Shadow;
com_gdx_scene3d_Shadow.__name__ = true;
com_gdx_scene3d_Shadow.prototype = {
	addNode: function(node) {
		this.shadow_nodes.push(node);
	}
	,createFBO: function(cam,width,height) {
		com_gdx_Gdx.gl.bindFramebuffer(com_gdx_Gdx.gl.FRAMEBUFFER,this.fbo);
		com_gdx_Gdx.gl.bindTexture(com_gdx_Gdx.gl.TEXTURE_2D,this.fboTexture);
		com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_2D,com_gdx_Gdx.gl.TEXTURE_WRAP_S,com_gdx_Gdx.gl.CLAMP_TO_EDGE);
		com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_2D,com_gdx_Gdx.gl.TEXTURE_WRAP_T,com_gdx_Gdx.gl.CLAMP_TO_EDGE);
		com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_2D,com_gdx_Gdx.gl.TEXTURE_MAG_FILTER,com_gdx_Gdx.gl.LINEAR);
		com_gdx_Gdx.gl.texParameteri(com_gdx_Gdx.gl.TEXTURE_2D,com_gdx_Gdx.gl.TEXTURE_MIN_FILTER,com_gdx_Gdx.gl.NEAREST);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(com_gdx_Gdx.gl,com_gdx_Gdx.gl.TEXTURE_2D,0,com_gdx_Gdx.gl.RGBA,width,height,0,com_gdx_Gdx.gl.RGBA,com_gdx_Gdx.gl.UNSIGNED_BYTE,null);
		com_gdx_Gdx.gl.bindRenderbuffer(com_gdx_Gdx.gl.RENDERBUFFER,this.rbo);
		com_gdx_Gdx.gl.renderbufferStorage(com_gdx_Gdx.gl.RENDERBUFFER,com_gdx_Gdx.gl.DEPTH_COMPONENT16,width,height);
		com_gdx_Gdx.gl.framebufferTexture2D(com_gdx_Gdx.gl.FRAMEBUFFER,com_gdx_Gdx.gl.COLOR_ATTACHMENT0,com_gdx_Gdx.gl.TEXTURE_2D,this.fboTexture,0);
		com_gdx_Gdx.gl.framebufferRenderbuffer(com_gdx_Gdx.gl.FRAMEBUFFER,com_gdx_Gdx.gl.DEPTH_ATTACHMENT,com_gdx_Gdx.gl.RENDERBUFFER,this.rbo);
	}
	,draw: function(cam) {
		var _this = this.viewMatrix;
		var eye = this.lightPosition;
		var target = new com_gdx_math_Vector3(0,1,0);
		var up = new com_gdx_math_Vector3(0,1.0,0);
		var result = com_gdx_math_Matrix._zAxis;
		result.x = target.x - eye.x;
		result.y = target.y - eye.y;
		result.z = target.z - eye.z;
		com_gdx_math_Matrix._zAxis.normalize();
		var right = com_gdx_math_Matrix._zAxis;
		var result1 = com_gdx_math_Matrix._xAxis;
		result1.x = up.y * right.z - up.z * right.y;
		result1.y = up.z * right.x - up.x * right.z;
		result1.z = up.x * right.y - up.y * right.x;
		com_gdx_math_Matrix._xAxis.normalize();
		var left = com_gdx_math_Matrix._zAxis;
		var right1 = com_gdx_math_Matrix._xAxis;
		var result2 = com_gdx_math_Matrix._yAxis;
		result2.x = left.y * right1.z - left.z * right1.y;
		result2.y = left.z * right1.x - left.x * right1.z;
		result2.z = left.x * right1.y - left.y * right1.x;
		com_gdx_math_Matrix._yAxis.normalize();
		var left1 = com_gdx_math_Matrix._xAxis;
		var ex = -(left1.x * eye.x + left1.y * eye.y + left1.z * eye.z);
		var left2 = com_gdx_math_Matrix._yAxis;
		var ey = -(left2.x * eye.x + left2.y * eye.y + left2.z * eye.z);
		var left3 = com_gdx_math_Matrix._zAxis;
		var ez = -(left3.x * eye.x + left3.y * eye.y + left3.z * eye.z);
		_this.m11 = com_gdx_math_Matrix._xAxis.x;
		_this.m12 = com_gdx_math_Matrix._yAxis.x;
		_this.m13 = com_gdx_math_Matrix._zAxis.x;
		_this.m14 = 0;
		_this.m21 = com_gdx_math_Matrix._xAxis.y;
		_this.m22 = com_gdx_math_Matrix._yAxis.y;
		_this.m23 = com_gdx_math_Matrix._zAxis.y;
		_this.m24 = 0;
		_this.m31 = com_gdx_math_Matrix._xAxis.z;
		_this.m32 = com_gdx_math_Matrix._yAxis.z;
		_this.m33 = com_gdx_math_Matrix._zAxis.z;
		_this.m34 = 0;
		_this.m41 = ex;
		_this.m42 = ey;
		_this.m43 = ez;
		_this.m44 = 1;
		var xOffset = this.orthoRight - this.orthoLeft;
		var yOffset = this.orthoTop - this.orthoBottom;
		var maxZ = 10000.0;
		var result3 = new com_gdx_math_Matrix();
		result3.m11 = 0;
		result3.m12 = 0;
		result3.m13 = 0;
		result3.m14 = 0;
		result3.m21 = 0;
		result3.m22 = 0;
		result3.m23 = 0;
		result3.m24 = 0;
		result3.m31 = 0;
		result3.m32 = 0;
		result3.m33 = 0;
		result3.m34 = 0;
		result3.m41 = 0;
		result3.m42 = 0;
		result3.m43 = 0;
		result3.m44 = 0;
		var projectionMatrix = result3;
		com_gdx_math_Matrix.OrthoOffCenterLHToRef(this.orthoLeft - xOffset * this.shadowOrthoScale,this.orthoRight + xOffset * this.shadowOrthoScale,this.orthoBottom - yOffset * this.shadowOrthoScale,this.orthoTop + yOffset * this.shadowOrthoScale,-maxZ,maxZ,projectionMatrix);
		this.viewMatrix.multiplyToRef(projectionMatrix,this.lightMatrix);
		this.createFBO(cam,this.width,this.height);
		com_gdx_Gdx.gl.clearColor(0.1,0.1,0.1,1.0);
		com_gdx_Gdx.gl.clear(com_gdx_Gdx.gl.COLOR_BUFFER_BIT | com_gdx_Gdx.gl.DEPTH_BUFFER_BIT);
		com_gdx_Gdx.gl.enable(com_gdx_Gdx.gl.DEPTH_TEST);
		com_gdx_Gdx.gl.clearDepth(1.0);
		com_gdx_Gdx.gl.enable(com_gdx_Gdx.gl.CULL_FACE);
		com_gdx_Gdx.gl.cullFace(com_gdx_Gdx.gl.FRONT);
		com_gdx_Gdx.gl.viewport(0,0,this.width,this.height);
		this.shadow.Begin();
		var _g1 = 0;
		var _g = this.shadow_nodes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var node = this.shadow_nodes[i];
			if(node != null) {
				this.shadow.setMatrix(this.lightMatrix,node.world_tform);
				node.renderTo(this.shadow,cam,false);
			}
		}
		this.shadow.End();
		com_gdx_Gdx.gl.cullFace(com_gdx_Gdx.gl.BACK);
		com_gdx_Gdx.gl.activeTexture(com_gdx_Gdx.gl.TEXTURE0);
		com_gdx_Gdx.gl.bindTexture(com_gdx_Gdx.gl.TEXTURE_2D,null);
		com_gdx_Gdx.gl.bindFramebuffer(com_gdx_Gdx.gl.FRAMEBUFFER,null);
		com_gdx_Gdx.gl.viewport(0,0,com_gdx_Gdx.Instance().width,com_gdx_Gdx.Instance().height);
	}
	,bindBuffer: function(layer) {
		com_gdx_Gdx.gl.activeTexture(com_gdx_Gdx.gl.TEXTURE0 + layer);
		com_gdx_Gdx.gl.bindTexture(com_gdx_Gdx.gl.TEXTURE_2D,this.fboTexture);
	}
	,__class__: com_gdx_scene3d_Shadow
};
var com_gdx_scene3d_bolt_DecaleNode = function(maxDecales,parent,id,Name) {
	if(Name == null) {
		Name = "DecalSystem";
	}
	if(id == null) {
		id = 0;
	}
	this.numParticles = 0;
	com_gdx_scene3d_Node.call(this,parent,this.name,id);
	this.clip = new com_gdx_util_Clip();
	this.material = new com_gdx_gl_material_Material();
	this.material.CullingFace = false;
	this.material.DepthMask = true;
	this.material.DepthTest = true;
	this.material.BlendType = 0;
	this.material.BlendFace = true;
	this.MaxDecales = maxDecales;
	this.InitWithTotal(maxDecales);
	this.numParticles = 0;
	this.decales = [];
};
$hxClasses["com.gdx.scene3d.bolt.DecaleNode"] = com_gdx_scene3d_bolt_DecaleNode;
com_gdx_scene3d_bolt_DecaleNode.__name__ = true;
com_gdx_scene3d_bolt_DecaleNode.__super__ = com_gdx_scene3d_Node;
com_gdx_scene3d_bolt_DecaleNode.prototype = $extend(com_gdx_scene3d_Node.prototype,{
	addDecal: function(position,normal,size,life) {
		if(life == null) {
			life = 10;
		}
		this.decales.push(new com_gdx_scene3d_bolt__$DecaleNode_Decale(normal,position,size,life));
		this.numParticles++;
		this.Bounding.addInternalPoint(position.x + size,position.y + size,position.z + size);
		this.Bounding.addInternalVector(position);
		this.Bounding.addInternalPoint(position.x - size,position.y - size,position.z - size);
		this.boundChanged = true;
	}
	,setTexture: function(tex,tex_clip) {
		this.texture = tex;
		if(tex_clip != null) {
			this.clip = tex_clip;
		} else {
			this.clip.set(0,0,this.texture.width,this.texture.height);
		}
	}
	,InitWithTotal: function(numberOf) {
		var indices = [];
		var index = 0;
		var oldvertices = 0;
		var _g1 = 0;
		var _g = numberOf * 6 | 0;
		while(_g1 < _g) {
			var count = _g1++;
			indices.push(index);
			indices.push(index + 2);
			indices.push(index + 1);
			indices.push(index);
			indices.push(index + 3);
			indices.push(index + 2);
			index += 4;
		}
		this.vertexbuffer = new com_gdx_gl_VertexBuffer(com_gdx_Gdx.Instance().materials[3]);
		this.vertexbuffer.uploadIndices(indices);
		var elements = numberOf * 3 * 4;
		var this1;
		if(elements != null) {
			this1 = new Float32Array(elements);
		} else {
			this1 = null;
		}
		this.vert_coords = this1;
		var elements1 = numberOf * 2 * 4;
		var this2;
		if(elements1 != null) {
			this2 = new Float32Array(elements1);
		} else {
			this2 = null;
		}
		this.vert_tex_coords = this2;
		var elements2 = numberOf * 4 * 4;
		var this3;
		if(elements2 != null) {
			this3 = new Float32Array(elements2);
		} else {
			this3 = null;
		}
		this.vert_col = this3;
	}
	,drawBillboard: function(ii,particle) {
		this.vert_coords[ii * 12] = particle.position.x + (-particle.right.x - particle.up.x) * particle.size;
		this.vert_coords[ii * 12 + 1] = particle.position.y + (-particle.right.y - particle.up.y) * particle.size;
		this.vert_coords[ii * 12 + 2] = particle.position.z + (-particle.right.z - particle.up.z) * particle.size;
		this.vert_coords[ii * 12 + 3] = particle.position.x + (particle.right.x - particle.up.x) * particle.size;
		this.vert_coords[ii * 12 + 4] = particle.position.y + (particle.right.y - particle.up.y) * particle.size;
		this.vert_coords[ii * 12 + 5] = particle.position.z + (particle.right.z - particle.up.z) * particle.size;
		this.vert_coords[ii * 12 + 6] = particle.position.x + (particle.right.x + particle.up.x) * particle.size;
		this.vert_coords[ii * 12 + 7] = particle.position.y + (particle.right.y + particle.up.y) * particle.size;
		this.vert_coords[ii * 12 + 8] = particle.position.z + (particle.right.z + particle.up.z) * particle.size;
		this.vert_coords[ii * 12 + 9] = particle.position.x + (-particle.right.x + particle.up.x) * particle.size;
		this.vert_coords[ii * 12 + 10] = particle.position.y + (-particle.right.y + particle.up.y) * particle.size;
		this.vert_coords[ii * 12 + 11] = particle.position.z + (-particle.right.z + particle.up.z) * particle.size;
		this.vert_tex_coords[ii * 8] = 0.0;
		this.vert_tex_coords[ii * 8 + 1] = 0.0;
		this.vert_tex_coords[ii * 8 + 2] = 0.0;
		this.vert_tex_coords[ii * 8 + 3] = 1.0;
		this.vert_tex_coords[ii * 8 + 4] = 1.0;
		this.vert_tex_coords[ii * 8 + 5] = 1.0;
		this.vert_tex_coords[ii * 8 + 6] = 1.0;
		this.vert_tex_coords[ii * 8 + 7] = 0.0;
		var alpha = particle.alpha;
		this.vert_col[ii * 16] = 1;
		this.vert_col[ii * 16 + 1] = 1;
		this.vert_col[ii * 16 + 2] = 1;
		this.vert_col[ii * 16 + 3] = alpha;
		this.vert_col[ii * 16 + 4] = 1;
		this.vert_col[ii * 16 + 5] = 1;
		this.vert_col[ii * 16 + 6] = 1;
		this.vert_col[ii * 16 + 7] = alpha;
		this.vert_col[ii * 16 + 8] = 1;
		this.vert_col[ii * 16 + 9] = 1;
		this.vert_col[ii * 16 + 10] = 1;
		this.vert_col[ii * 16 + 11] = alpha;
		this.vert_col[ii * 16 + 12] = 1;
		this.vert_col[ii * 16 + 13] = 1;
		this.vert_col[ii * 16 + 14] = 1;
		this.vert_col[ii * 16 + 15] = alpha;
	}
	,render: function(cam) {
		if(this.numParticles <= 0) {
			return;
		}
		var mat = this.getWorldTform();
		if(this.boundChanged) {
			this.Bounding.calculate();
			this.Bounding.update(mat);
		}
		if(com_gdx_math_BoundingBox.IsInFrustum(this.Bounding.vectorsWorld,cam.frustumPlanes)) {
			var _g1 = 0;
			var _g = this.numParticles;
			while(_g1 < _g) {
				var ii = _g1++;
				var particle = this.decales[ii];
				this.drawBillboard(ii,particle);
			}
			this.vertexbuffer.pipeline.Bind(cam.viewMatrix,cam.projMatrix,mat);
			this.vertexbuffer.pipeline.ApplayMaterial(this.material);
			this.vertexbuffer.setVertex(this.vert_coords);
			this.vertexbuffer.setUVCoord0(this.vert_tex_coords);
			this.vertexbuffer.setColors(this.vert_col);
			this.vertexbuffer.render(com_gdx_Gdx.gl.TRIANGLES,this.numParticles * 6);
			com_gdx_Gdx.Instance().numVertex += this.numParticles * 4;
			com_gdx_Gdx.Instance().numTris += this.numParticles * 2;
		}
	}
	,update: function() {
		var dt = com_gdx_Gdx.Instance().deltaTime;
		var ii = 0;
		while(ii < this.numParticles) {
			var particle = this.decales[ii];
			if(particle.life > 0) {
				particle.life -= dt;
				particle.alpha = com_gdx_util_Util.clamp(particle.life,0,1);
				++ii;
			} else {
				--this.numParticles;
				HxOverrides.remove(this.decales,particle);
				particle = null;
			}
		}
		com_gdx_scene3d_Node.prototype.update.call(this);
	}
	,__class__: com_gdx_scene3d_bolt_DecaleNode
});
var com_gdx_scene3d_bolt__$DecaleNode_Decale = function(n,p,s,life) {
	var factor = 0.5;
	p.x += n.x * factor;
	p.y += n.y * factor;
	p.z += n.z * factor;
	this.right = new com_gdx_math_Vector3(0,0,0);
	var axis = [];
	axis.push(new com_gdx_math_Vector3(1,0,0));
	axis.push(new com_gdx_math_Vector3(0,1,0));
	axis.push(new com_gdx_math_Vector3(0,0,1));
	var poly_normal = new com_gdx_math_Vector3(Math.abs(n.x),Math.abs(n.y),Math.abs(n.z));
	poly_normal.normalize();
	var temp = com_gdx_math_Vector3.get_zero();
	var major;
	if(poly_normal.x > poly_normal.y && poly_normal.x > poly_normal.z) {
		major = 0;
	} else if(poly_normal.y > poly_normal.x && poly_normal.y > poly_normal.z) {
		major = 1;
	} else {
		major = 2;
	}
	if(poly_normal.x == 1.0 || poly_normal.y == 1.0 || poly_normal.z == 1.0) {
		if(major == 0 && n.x > 0.0 || major == 1) {
			var _this = this.right;
			_this.x = 0.0;
			_this.y = 0.0;
			_this.z = -1.0;
		} else if(major == 0) {
			var _this1 = this.right;
			_this1.x = 0.0;
			_this1.y = 0.0;
			_this1.z = 1.0;
		} else {
			var _this2 = this.right;
			_this2.x = n.z;
			_this2.y = 0.0;
			_this2.z = 0.0;
		}
	} else {
		var left = axis[major];
		var result = new com_gdx_math_Vector3(0,0,0);
		result.x = left.y * n.z - left.z * n.y;
		result.y = left.z * n.x - left.x * n.z;
		result.z = left.x * n.y - left.y * n.x;
		axis[major] = result;
		var _this3 = this.right;
		var source = axis[major];
		_this3.x = source.x;
		_this3.y = source.y;
		_this3.z = source.z;
	}
	temp.x = n.x;
	temp.y = n.y;
	temp.z = n.z;
	var right = this.right;
	var result1 = new com_gdx_math_Vector3(0,0,0);
	result1.x = temp.y * right.z - temp.z * right.y;
	result1.y = temp.z * right.x - temp.x * right.z;
	result1.z = temp.x * right.y - temp.y * right.x;
	this.up = result1;
	this.up.normalize();
	this.right.normalize();
	this.position = new com_gdx_math_Vector3(p.x,p.y,p.z);
	this.alpha = 1;
	this.life = life;
	this.size = s;
};
$hxClasses["com.gdx.scene3d.bolt._DecaleNode.Decale"] = com_gdx_scene3d_bolt__$DecaleNode_Decale;
com_gdx_scene3d_bolt__$DecaleNode_Decale.__name__ = true;
com_gdx_scene3d_bolt__$DecaleNode_Decale.prototype = {
	__class__: com_gdx_scene3d_bolt__$DecaleNode_Decale
};
var com_gdx_scene3d_cameras_Camera = function(fovY,zNear,zFar) {
	if(zFar == null) {
		zFar = 4000;
	}
	if(zNear == null) {
		zNear = 0.1;
	}
	if(fovY == null) {
		fovY = 45;
	}
	com_gdx_scene3d_Node.call(this,null,"Camera");
	this.fovY = fovY;
	this.rotation = new com_gdx_math_Vector3(0,0,0);
	this.toTarget = new com_gdx_math_Vector3(0,0,0);
	this.horizontalAngle = new com_gdx_math_Vector3(0,0,0);
	this.LookAt = new com_gdx_math_Vector3(0,0,0);
	this.viewPort = new com_gdx_math_Rectangle(0,0,com_gdx_Gdx.Instance().width,com_gdx_Gdx.Instance().height);
	this.screenRatio = com_gdx_Gdx.Instance().width / com_gdx_Gdx.Instance().height;
	this.zNear = zNear;
	this.zFar = zFar;
	this.projChanged = true;
	this.needInv = true;
	var result = new com_gdx_math_Matrix();
	result.m11 = 1.0;
	result.m12 = 0;
	result.m13 = 0;
	result.m14 = 0;
	result.m21 = 0;
	result.m22 = 1.0;
	result.m23 = 0;
	result.m24 = 0;
	result.m31 = 0;
	result.m32 = 0;
	result.m33 = 1.0;
	result.m34 = 0;
	result.m41 = 0;
	result.m42 = 0;
	result.m43 = 0;
	result.m44 = 1.0;
	this.viewMatrix = result;
	var result1 = new com_gdx_math_Matrix();
	result1.m11 = 1.0;
	result1.m12 = 0;
	result1.m13 = 0;
	result1.m14 = 0;
	result1.m21 = 0;
	result1.m22 = 1.0;
	result1.m23 = 0;
	result1.m24 = 0;
	result1.m31 = 0;
	result1.m32 = 0;
	result1.m33 = 1.0;
	result1.m34 = 0;
	result1.m41 = 0;
	result1.m42 = 0;
	result1.m43 = 0;
	result1.m44 = 1.0;
	this.projMatrix = result1;
	var result2 = new com_gdx_math_Matrix();
	result2.m11 = 1.0;
	result2.m12 = 0;
	result2.m13 = 0;
	result2.m14 = 0;
	result2.m21 = 0;
	result2.m22 = 1.0;
	result2.m23 = 0;
	result2.m24 = 0;
	result2.m31 = 0;
	result2.m32 = 0;
	result2.m33 = 1.0;
	result2.m34 = 0;
	result2.m41 = 0;
	result2.m42 = 0;
	result2.m43 = 0;
	result2.m44 = 1.0;
	this.minv = result2;
	var result3 = new com_gdx_math_Matrix();
	result3.m11 = 1.0;
	result3.m12 = 0;
	result3.m13 = 0;
	result3.m14 = 0;
	result3.m21 = 0;
	result3.m22 = 1.0;
	result3.m23 = 0;
	result3.m24 = 0;
	result3.m31 = 0;
	result3.m32 = 0;
	result3.m33 = 1.0;
	result3.m34 = 0;
	result3.m41 = 0;
	result3.m42 = 0;
	result3.m43 = 0;
	result3.m44 = 1.0;
	this.ViewProj = result3;
	com_gdx_math_Matrix.PerspectiveFovLHToRef(fovY,this.screenRatio,zNear,zFar,this.projMatrix);
	this.getInverseViewProj();
	this.getProjViewMatrix();
	this.extractPlanes();
};
$hxClasses["com.gdx.scene3d.cameras.Camera"] = com_gdx_scene3d_cameras_Camera;
com_gdx_scene3d_cameras_Camera.__name__ = true;
com_gdx_scene3d_cameras_Camera.__super__ = com_gdx_scene3d_Node;
com_gdx_scene3d_cameras_Camera.prototype = $extend(com_gdx_scene3d_Node.prototype,{
	setFarValue: function(v) {
		this.zFar = v;
		this.projChanged = true;
	}
	,getInverseViewProj: function() {
		var _this = this.getProjViewMatrix();
		var other = this.minv;
		var l1 = _this.m11;
		var l2 = _this.m12;
		var l3 = _this.m13;
		var l4 = _this.m14;
		var l5 = _this.m21;
		var l6 = _this.m22;
		var l7 = _this.m23;
		var l8 = _this.m24;
		var l9 = _this.m31;
		var l10 = _this.m32;
		var l11 = _this.m33;
		var l12 = _this.m34;
		var l13 = _this.m41;
		var l14 = _this.m42;
		var l15 = _this.m43;
		var l16 = _this.m44;
		var l17 = l11 * l16 - l12 * l15;
		var l18 = l10 * l16 - l12 * l14;
		var l19 = l10 * l15 - l11 * l14;
		var l20 = l9 * l16 - l12 * l13;
		var l21 = l9 * l15 - l11 * l13;
		var l22 = l9 * l14 - l10 * l13;
		var l23 = l6 * l17 - l7 * l18 + l8 * l19;
		var l24 = -(l5 * l17 - l7 * l20 + l8 * l21);
		var l25 = l5 * l18 - l6 * l20 + l8 * l22;
		var l26 = -(l5 * l19 - l6 * l21 + l7 * l22);
		var l27 = 1.0 / (l1 * l23 + l2 * l24 + l3 * l25 + l4 * l26);
		var l28 = l7 * l16 - l8 * l15;
		var l29 = l6 * l16 - l8 * l14;
		var l30 = l6 * l15 - l7 * l14;
		var l31 = l5 * l16 - l8 * l13;
		var l32 = l5 * l15 - l7 * l13;
		var l33 = l5 * l14 - l6 * l13;
		var l34 = l7 * l12 - l8 * l11;
		var l35 = l6 * l12 - l8 * l10;
		var l36 = l6 * l11 - l7 * l10;
		var l37 = l5 * l12 - l8 * l9;
		var l38 = l5 * l11 - l7 * l9;
		var l39 = l5 * l10 - l6 * l9;
		other.m11 = l23 * l27;
		other.m21 = l24 * l27;
		other.m31 = l25 * l27;
		other.m41 = l26 * l27;
		other.m12 = -(l2 * l17 - l3 * l18 + l4 * l19) * l27;
		other.m22 = (l1 * l17 - l3 * l20 + l4 * l21) * l27;
		other.m32 = -(l1 * l18 - l2 * l20 + l4 * l22) * l27;
		other.m42 = (l1 * l19 - l2 * l21 + l3 * l22) * l27;
		other.m13 = (l2 * l28 - l3 * l29 + l4 * l30) * l27;
		other.m23 = -(l1 * l28 - l3 * l31 + l4 * l32) * l27;
		other.m33 = (l1 * l29 - l2 * l31 + l4 * l33) * l27;
		other.m43 = -(l1 * l30 - l2 * l32 + l3 * l33) * l27;
		other.m14 = -(l2 * l34 - l3 * l35 + l4 * l36) * l27;
		other.m24 = (l1 * l34 - l3 * l37 + l4 * l38) * l27;
		other.m34 = -(l1 * l35 - l2 * l37 + l4 * l39) * l27;
		other.m44 = (l1 * l36 - l2 * l38 + l3 * l39) * l27;
	}
	,getProjViewMatrix: function() {
		this.viewMatrix.multiplyToRef(this.projMatrix,this.ViewProj);
		return this.ViewProj;
	}
	,calCameraMatrix: function() {
		com_gdx_math_Matrix.LookAtLHToRef(this.get_Position(),new com_gdx_math_Vector3(0,0,100),new com_gdx_math_Vector3(0,1,0),this.viewMatrix);
	}
	,update: function() {
		if(this.onUpdate != null) {
			this.onUpdate();
		}
		this.syncRec();
		com_gdx_math_Matrix.PerspectiveFovLHToRef(this.fovY,this.screenRatio,this.zNear,this.zFar,this.projMatrix);
		this.calCameraMatrix();
		if(this.parent != null) {
			var result = new com_gdx_math_Matrix();
			result.m11 = 0;
			result.m12 = 0;
			result.m13 = 0;
			result.m14 = 0;
			result.m21 = 0;
			result.m22 = 0;
			result.m23 = 0;
			result.m24 = 0;
			result.m31 = 0;
			result.m32 = 0;
			result.m33 = 0;
			result.m34 = 0;
			result.m41 = 0;
			result.m42 = 0;
			result.m43 = 0;
			result.m44 = 0;
			var parentInvert = result;
			var _this = this.parent.getWorldTform();
			var l1 = _this.m11;
			var l2 = _this.m12;
			var l3 = _this.m13;
			var l4 = _this.m14;
			var l5 = _this.m21;
			var l6 = _this.m22;
			var l7 = _this.m23;
			var l8 = _this.m24;
			var l9 = _this.m31;
			var l10 = _this.m32;
			var l11 = _this.m33;
			var l12 = _this.m34;
			var l13 = _this.m41;
			var l14 = _this.m42;
			var l15 = _this.m43;
			var l16 = _this.m44;
			var l17 = l11 * l16 - l12 * l15;
			var l18 = l10 * l16 - l12 * l14;
			var l19 = l10 * l15 - l11 * l14;
			var l20 = l9 * l16 - l12 * l13;
			var l21 = l9 * l15 - l11 * l13;
			var l22 = l9 * l14 - l10 * l13;
			var l23 = l6 * l17 - l7 * l18 + l8 * l19;
			var l24 = -(l5 * l17 - l7 * l20 + l8 * l21);
			var l25 = l5 * l18 - l6 * l20 + l8 * l22;
			var l26 = -(l5 * l19 - l6 * l21 + l7 * l22);
			var l27 = 1.0 / (l1 * l23 + l2 * l24 + l3 * l25 + l4 * l26);
			var l28 = l7 * l16 - l8 * l15;
			var l29 = l6 * l16 - l8 * l14;
			var l30 = l6 * l15 - l7 * l14;
			var l31 = l5 * l16 - l8 * l13;
			var l32 = l5 * l15 - l7 * l13;
			var l33 = l5 * l14 - l6 * l13;
			var l34 = l7 * l12 - l8 * l11;
			var l35 = l6 * l12 - l8 * l10;
			var l36 = l6 * l11 - l7 * l10;
			var l37 = l5 * l12 - l8 * l9;
			var l38 = l5 * l11 - l7 * l9;
			var l39 = l5 * l10 - l6 * l9;
			parentInvert.m11 = l23 * l27;
			parentInvert.m21 = l24 * l27;
			parentInvert.m31 = l25 * l27;
			parentInvert.m41 = l26 * l27;
			parentInvert.m12 = -(l2 * l17 - l3 * l18 + l4 * l19) * l27;
			parentInvert.m22 = (l1 * l17 - l3 * l20 + l4 * l21) * l27;
			parentInvert.m32 = -(l1 * l18 - l2 * l20 + l4 * l22) * l27;
			parentInvert.m42 = (l1 * l19 - l2 * l21 + l3 * l22) * l27;
			parentInvert.m13 = (l2 * l28 - l3 * l29 + l4 * l30) * l27;
			parentInvert.m23 = -(l1 * l28 - l3 * l31 + l4 * l32) * l27;
			parentInvert.m33 = (l1 * l29 - l2 * l31 + l4 * l33) * l27;
			parentInvert.m43 = -(l1 * l30 - l2 * l32 + l3 * l33) * l27;
			parentInvert.m14 = -(l2 * l34 - l3 * l35 + l4 * l36) * l27;
			parentInvert.m24 = (l1 * l34 - l3 * l37 + l4 * l38) * l27;
			parentInvert.m34 = -(l1 * l35 - l2 * l37 + l4 * l39) * l27;
			parentInvert.m44 = (l1 * l36 - l2 * l38 + l3 * l39) * l27;
			var _this1 = this.viewMatrix;
			var m111 = _this1.m11;
			var m121 = _this1.m21;
			var m131 = _this1.m31;
			var m141 = _this1.m41;
			var m112 = _this1.m12;
			var m122 = _this1.m22;
			var m132 = _this1.m32;
			var m142 = _this1.m42;
			var m113 = _this1.m13;
			var m123 = _this1.m23;
			var m133 = _this1.m33;
			var m143 = _this1.m43;
			var m114 = _this1.m14;
			var m124 = _this1.m24;
			var m134 = _this1.m34;
			var m144 = _this1.m44;
			var m211 = parentInvert.m11;
			var m221 = parentInvert.m21;
			var m231 = parentInvert.m31;
			var m241 = parentInvert.m41;
			var m212 = parentInvert.m12;
			var m222 = parentInvert.m22;
			var m232 = parentInvert.m32;
			var m242 = parentInvert.m42;
			var m213 = parentInvert.m13;
			var m223 = parentInvert.m23;
			var m233 = parentInvert.m33;
			var m243 = parentInvert.m43;
			var m214 = parentInvert.m14;
			var m224 = parentInvert.m24;
			var m234 = parentInvert.m34;
			var m244 = parentInvert.m44;
			_this1.m11 = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
			_this1.m12 = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
			_this1.m13 = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
			_this1.m14 = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
			_this1.m21 = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
			_this1.m22 = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
			_this1.m23 = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
			_this1.m24 = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
			_this1.m31 = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
			_this1.m32 = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
			_this1.m33 = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
			_this1.m34 = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
			_this1.m41 = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
			_this1.m42 = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
			_this1.m43 = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
			_this1.m44 = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
		}
		this.extractPlanes();
		var _g = 0;
		var _g1 = this.childs;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.update();
		}
	}
	,BoundingInFrustum: function(bb) {
		return bb.isInFrustum(this.frustumPlanes);
	}
	,BoundingBoxInFrustum: function(bb) {
		return com_gdx_math_BoundingBox.IsInFrustum(bb.vectorsWorld,this.frustumPlanes);
	}
	,extractPlanes: function() {
		if(this.frustumPlanes == null) {
			var transform = this.getProjViewMatrix();
			var frustumPlanes = [];
			var _g = 0;
			while(_g < 6) {
				var index = _g++;
				frustumPlanes.push(new com_gdx_math_Plane(0,0,0,0));
			}
			frustumPlanes[0].normal.x = transform.m14 + transform.m13;
			frustumPlanes[0].normal.y = transform.m24 + transform.m23;
			frustumPlanes[0].normal.z = transform.m33 + transform.m33;
			frustumPlanes[0].d = transform.m44 + transform.m43;
			var _this = frustumPlanes[0];
			var norm = Math.sqrt(_this.normal.x * _this.normal.x + _this.normal.y * _this.normal.y + _this.normal.z * _this.normal.z);
			var magnitude = 0.0;
			if(norm != 0) {
				magnitude = 1.0 / norm;
			}
			_this.normal.x *= magnitude;
			_this.normal.y *= magnitude;
			_this.normal.z *= magnitude;
			_this.d *= magnitude;
			frustumPlanes[1].normal.x = transform.m14 - transform.m13;
			frustumPlanes[1].normal.y = transform.m24 - transform.m23;
			frustumPlanes[1].normal.z = transform.m34 - transform.m33;
			frustumPlanes[1].d = transform.m44 - transform.m43;
			var _this1 = frustumPlanes[1];
			var norm1 = Math.sqrt(_this1.normal.x * _this1.normal.x + _this1.normal.y * _this1.normal.y + _this1.normal.z * _this1.normal.z);
			var magnitude1 = 0.0;
			if(norm1 != 0) {
				magnitude1 = 1.0 / norm1;
			}
			_this1.normal.x *= magnitude1;
			_this1.normal.y *= magnitude1;
			_this1.normal.z *= magnitude1;
			_this1.d *= magnitude1;
			frustumPlanes[2].normal.x = transform.m14 + transform.m11;
			frustumPlanes[2].normal.y = transform.m24 + transform.m21;
			frustumPlanes[2].normal.z = transform.m34 + transform.m31;
			frustumPlanes[2].d = transform.m44 + transform.m41;
			var _this2 = frustumPlanes[2];
			var norm2 = Math.sqrt(_this2.normal.x * _this2.normal.x + _this2.normal.y * _this2.normal.y + _this2.normal.z * _this2.normal.z);
			var magnitude2 = 0.0;
			if(norm2 != 0) {
				magnitude2 = 1.0 / norm2;
			}
			_this2.normal.x *= magnitude2;
			_this2.normal.y *= magnitude2;
			_this2.normal.z *= magnitude2;
			_this2.d *= magnitude2;
			frustumPlanes[3].normal.x = transform.m14 - transform.m11;
			frustumPlanes[3].normal.y = transform.m24 - transform.m21;
			frustumPlanes[3].normal.z = transform.m34 - transform.m31;
			frustumPlanes[3].d = transform.m44 - transform.m41;
			var _this3 = frustumPlanes[3];
			var norm3 = Math.sqrt(_this3.normal.x * _this3.normal.x + _this3.normal.y * _this3.normal.y + _this3.normal.z * _this3.normal.z);
			var magnitude3 = 0.0;
			if(norm3 != 0) {
				magnitude3 = 1.0 / norm3;
			}
			_this3.normal.x *= magnitude3;
			_this3.normal.y *= magnitude3;
			_this3.normal.z *= magnitude3;
			_this3.d *= magnitude3;
			frustumPlanes[4].normal.x = transform.m14 - transform.m12;
			frustumPlanes[4].normal.y = transform.m24 - transform.m22;
			frustumPlanes[4].normal.z = transform.m34 - transform.m32;
			frustumPlanes[4].d = transform.m44 - transform.m42;
			var _this4 = frustumPlanes[4];
			var norm4 = Math.sqrt(_this4.normal.x * _this4.normal.x + _this4.normal.y * _this4.normal.y + _this4.normal.z * _this4.normal.z);
			var magnitude4 = 0.0;
			if(norm4 != 0) {
				magnitude4 = 1.0 / norm4;
			}
			_this4.normal.x *= magnitude4;
			_this4.normal.y *= magnitude4;
			_this4.normal.z *= magnitude4;
			_this4.d *= magnitude4;
			frustumPlanes[5].normal.x = transform.m14 + transform.m12;
			frustumPlanes[5].normal.y = transform.m24 + transform.m22;
			frustumPlanes[5].normal.z = transform.m34 + transform.m32;
			frustumPlanes[5].d = transform.m44 + transform.m42;
			var _this5 = frustumPlanes[5];
			var norm5 = Math.sqrt(_this5.normal.x * _this5.normal.x + _this5.normal.y * _this5.normal.y + _this5.normal.z * _this5.normal.z);
			var magnitude5 = 0.0;
			if(norm5 != 0) {
				magnitude5 = 1.0 / norm5;
			}
			_this5.normal.x *= magnitude5;
			_this5.normal.y *= magnitude5;
			_this5.normal.z *= magnitude5;
			_this5.d *= magnitude5;
			this.frustumPlanes = frustumPlanes;
		} else {
			var transform1 = this.getProjViewMatrix();
			var frustumPlanes1 = this.frustumPlanes;
			frustumPlanes1[0].normal.x = transform1.m14 + transform1.m13;
			frustumPlanes1[0].normal.y = transform1.m24 + transform1.m23;
			frustumPlanes1[0].normal.z = transform1.m33 + transform1.m33;
			frustumPlanes1[0].d = transform1.m44 + transform1.m43;
			var _this6 = frustumPlanes1[0];
			var norm6 = Math.sqrt(_this6.normal.x * _this6.normal.x + _this6.normal.y * _this6.normal.y + _this6.normal.z * _this6.normal.z);
			var magnitude6 = 0.0;
			if(norm6 != 0) {
				magnitude6 = 1.0 / norm6;
			}
			_this6.normal.x *= magnitude6;
			_this6.normal.y *= magnitude6;
			_this6.normal.z *= magnitude6;
			_this6.d *= magnitude6;
			frustumPlanes1[1].normal.x = transform1.m14 - transform1.m13;
			frustumPlanes1[1].normal.y = transform1.m24 - transform1.m23;
			frustumPlanes1[1].normal.z = transform1.m34 - transform1.m33;
			frustumPlanes1[1].d = transform1.m44 - transform1.m43;
			var _this7 = frustumPlanes1[1];
			var norm7 = Math.sqrt(_this7.normal.x * _this7.normal.x + _this7.normal.y * _this7.normal.y + _this7.normal.z * _this7.normal.z);
			var magnitude7 = 0.0;
			if(norm7 != 0) {
				magnitude7 = 1.0 / norm7;
			}
			_this7.normal.x *= magnitude7;
			_this7.normal.y *= magnitude7;
			_this7.normal.z *= magnitude7;
			_this7.d *= magnitude7;
			frustumPlanes1[2].normal.x = transform1.m14 + transform1.m11;
			frustumPlanes1[2].normal.y = transform1.m24 + transform1.m21;
			frustumPlanes1[2].normal.z = transform1.m34 + transform1.m31;
			frustumPlanes1[2].d = transform1.m44 + transform1.m41;
			var _this8 = frustumPlanes1[2];
			var norm8 = Math.sqrt(_this8.normal.x * _this8.normal.x + _this8.normal.y * _this8.normal.y + _this8.normal.z * _this8.normal.z);
			var magnitude8 = 0.0;
			if(norm8 != 0) {
				magnitude8 = 1.0 / norm8;
			}
			_this8.normal.x *= magnitude8;
			_this8.normal.y *= magnitude8;
			_this8.normal.z *= magnitude8;
			_this8.d *= magnitude8;
			frustumPlanes1[3].normal.x = transform1.m14 - transform1.m11;
			frustumPlanes1[3].normal.y = transform1.m24 - transform1.m21;
			frustumPlanes1[3].normal.z = transform1.m34 - transform1.m31;
			frustumPlanes1[3].d = transform1.m44 - transform1.m41;
			var _this9 = frustumPlanes1[3];
			var norm9 = Math.sqrt(_this9.normal.x * _this9.normal.x + _this9.normal.y * _this9.normal.y + _this9.normal.z * _this9.normal.z);
			var magnitude9 = 0.0;
			if(norm9 != 0) {
				magnitude9 = 1.0 / norm9;
			}
			_this9.normal.x *= magnitude9;
			_this9.normal.y *= magnitude9;
			_this9.normal.z *= magnitude9;
			_this9.d *= magnitude9;
			frustumPlanes1[4].normal.x = transform1.m14 - transform1.m12;
			frustumPlanes1[4].normal.y = transform1.m24 - transform1.m22;
			frustumPlanes1[4].normal.z = transform1.m34 - transform1.m32;
			frustumPlanes1[4].d = transform1.m44 - transform1.m42;
			var _this10 = frustumPlanes1[4];
			var norm10 = Math.sqrt(_this10.normal.x * _this10.normal.x + _this10.normal.y * _this10.normal.y + _this10.normal.z * _this10.normal.z);
			var magnitude10 = 0.0;
			if(norm10 != 0) {
				magnitude10 = 1.0 / norm10;
			}
			_this10.normal.x *= magnitude10;
			_this10.normal.y *= magnitude10;
			_this10.normal.z *= magnitude10;
			_this10.d *= magnitude10;
			frustumPlanes1[5].normal.x = transform1.m14 + transform1.m12;
			frustumPlanes1[5].normal.y = transform1.m24 + transform1.m22;
			frustumPlanes1[5].normal.z = transform1.m34 + transform1.m32;
			frustumPlanes1[5].d = transform1.m44 + transform1.m42;
			var _this11 = frustumPlanes1[5];
			var norm11 = Math.sqrt(_this11.normal.x * _this11.normal.x + _this11.normal.y * _this11.normal.y + _this11.normal.z * _this11.normal.z);
			var magnitude11 = 0.0;
			if(norm11 != 0) {
				magnitude11 = 1.0 / norm11;
			}
			_this11.normal.x *= magnitude11;
			_this11.normal.y *= magnitude11;
			_this11.normal.z *= magnitude11;
			_this11.d *= magnitude11;
		}
	}
	,getPointRay: function(x,y) {
		return com_gdx_math_Ray.CreateNew(x,y,this.viewPort.width,this.viewPort.height,this.local_tform,this.viewMatrix,this.projMatrix);
	}
	,__class__: com_gdx_scene3d_cameras_Camera
});
var com_gdx_scene3d_cameras_OrthoCamera = function() {
	com_gdx_scene3d_cameras_Camera.call(this,45,-100,100);
	this.rotate2D = 0;
	this.posChanged = false;
	this.scale2D = 1;
	this.posChanged = false;
	this.update();
};
$hxClasses["com.gdx.scene3d.cameras.OrthoCamera"] = com_gdx_scene3d_cameras_OrthoCamera;
com_gdx_scene3d_cameras_OrthoCamera.__name__ = true;
com_gdx_scene3d_cameras_OrthoCamera.__super__ = com_gdx_scene3d_cameras_Camera;
com_gdx_scene3d_cameras_OrthoCamera.prototype = $extend(com_gdx_scene3d_cameras_Camera.prototype,{
	set2D: function(x,y,scale,rotation) {
		if(rotation == null) {
			rotation = 0;
		}
		if(scale == null) {
			scale = 1;
		}
		var theta = rotation * Math.PI / 180.0;
		var c = Math.cos(theta);
		var s = Math.sin(theta);
		var _this = this.viewMatrix;
		_this.m11 = c * scale;
		_this.m12 = -s * scale;
		_this.m13 = 0;
		_this.m14 = 0;
		_this.m21 = s * scale;
		_this.m22 = c * scale;
		_this.m23 = 0;
		_this.m24 = 0;
		_this.m31 = 0;
		_this.m32 = 0;
		_this.m33 = 1;
		_this.m34 = 0;
		_this.m41 = x;
		_this.m42 = y;
		_this.m43 = 0;
		_this.m44 = 1;
	}
	,setOrtho: function(x0,x1,y0,y1,zNear,zFar) {
		this.projChanged = true;
		var sx = 1.0 / (x1 - x0);
		var sy = 1.0 / (y1 - y0);
		var sz = 1.0 / (zFar - zNear);
		var _this = this.projMatrix;
		_this.m11 = 2.0 * sx;
		_this.m12 = 0;
		_this.m13 = 0;
		_this.m14 = 0;
		_this.m21 = 0;
		_this.m22 = 2.0 * sy;
		_this.m23 = 0;
		_this.m24 = 0;
		_this.m31 = 0;
		_this.m32 = 0;
		_this.m33 = -2.0 * sz;
		_this.m34 = 0;
		_this.m41 = -(x0 + x1) * sx;
		_this.m42 = -(y0 + y1) * sy;
		_this.m43 = -(zNear + zFar) * sz;
		_this.m44 = 1;
	}
	,update: function() {
		if(this.onUpdate != null) {
			this.onUpdate();
		}
		this.syncRec();
		this.setOrtho(0,com_gdx_Gdx.Instance().width,com_gdx_Gdx.Instance().height,0,this.zNear,this.zFar);
		this.set2D(this.get_Position().x,this.get_Position().y,this.scale2D,this.rotate2D);
		var _g = 0;
		var _g1 = this.childs;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.update();
		}
	}
	,__class__: com_gdx_scene3d_cameras_OrthoCamera
});
var com_gdx_scene3d_cameras_TargetCamera = function(x,y,z,lx,ly,lz) {
	com_gdx_scene3d_cameras_Camera.call(this);
	this.angleX = 0;
	this.angleY = 0;
	this.cross = new com_gdx_math_Vector3();
	this.m_vStrafe = new com_gdx_math_Vector3();
	this.up = new com_gdx_math_Vector3(0,1,0);
	this.LookAt = new com_gdx_math_Vector3(lx,ly,lz);
	var _this = this.local_pos;
	_this.x = x;
	_this.y = y;
	_this.z = z;
};
$hxClasses["com.gdx.scene3d.cameras.TargetCamera"] = com_gdx_scene3d_cameras_TargetCamera;
com_gdx_scene3d_cameras_TargetCamera.__name__ = true;
com_gdx_scene3d_cameras_TargetCamera.__super__ = com_gdx_scene3d_cameras_Camera;
com_gdx_scene3d_cameras_TargetCamera.prototype = $extend(com_gdx_scene3d_cameras_Camera.prototype,{
	calCameraMatrix: function() {
		var _this = this.LookAt;
		var otherVector = this.local_pos;
		var left = new com_gdx_math_Vector3(_this.x - otherVector.x,_this.y - otherVector.y,_this.z - otherVector.z);
		var right = this.up;
		var result = new com_gdx_math_Vector3(0,0,0);
		result.x = left.y * right.z - left.z * right.y;
		result.y = left.z * right.x - left.x * right.z;
		result.z = left.x * right.y - left.y * right.x;
		this.cross = result;
		var vector = this.cross;
		var result1 = new com_gdx_math_Vector3(0,0,0);
		result1.x = vector.x;
		result1.y = vector.y;
		result1.z = vector.z;
		result1.normalize();
		this.m_vStrafe = result1;
		com_gdx_math_Matrix.LookAtLHToRef(this.local_pos,this.LookAt,this.up,this.viewMatrix);
	}
	,getLocalTform: function() {
		this.toTarget.x = this.LookAt.x - this.local_pos.x;
		this.toTarget.y = this.LookAt.y - this.local_pos.y;
		this.toTarget.z = this.LookAt.z - this.local_pos.z;
		var _this = this.rotation;
		var source = this.horizontalAngle;
		_this.x = source.x;
		_this.y = source.y;
		_this.z = source.z;
		var _this1 = this.toTarget;
		var angle = this.horizontalAngle;
		if(angle == null) {
			angle = new com_gdx_math_Vector3(0,0,0);
		}
		angle.y = Math.atan2(_this1.x,_this1.z) * com_gdx_util_Util.Rad2Deg;
		if(angle.y < 0.0) {
			angle.y += 360.0;
		}
		if(angle.y >= 360.0) {
			angle.y -= 360.0;
		}
		var z1 = Math.sqrt(_this1.x * _this1.x + _this1.z * _this1.z);
		angle.x = Math.atan2(z1,_this1.y) * com_gdx_util_Util.Rad2Deg - 90.0;
		if(angle.x < 0.0) {
			angle.x += 360.0;
		}
		if(angle.x >= 360.0) {
			angle.x -= 360.0;
		}
		var _this2 = this.local_tform;
		_this2.m11 = 1.0;
		_this2.m12 = 0;
		_this2.m13 = 0;
		_this2.m14 = 0;
		_this2.m21 = 0;
		_this2.m22 = 1.0;
		_this2.m23 = 0;
		_this2.m24 = 0;
		_this2.m31 = 0;
		_this2.m32 = 0;
		_this2.m33 = 1.0;
		_this2.m34 = 0;
		_this2.m41 = 0;
		_this2.m42 = 0;
		_this2.m43 = 0;
		_this2.m44 = 1.0;
		var _this3 = this.local_tform;
		var rotation = this.horizontalAngle;
		var cr = Math.cos(rotation.x * com_gdx_util_Util.Deg2Rad);
		var sr = Math.sin(rotation.x * com_gdx_util_Util.Deg2Rad);
		var cp = Math.cos(rotation.y * com_gdx_util_Util.Deg2Rad);
		var sp = Math.sin(rotation.y * com_gdx_util_Util.Deg2Rad);
		var cy = Math.cos(rotation.z * com_gdx_util_Util.Deg2Rad);
		var sy = Math.sin(rotation.z * com_gdx_util_Util.Deg2Rad);
		_this3.m11 = cp * cy;
		_this3.m12 = cp * sy;
		_this3.m13 = -sp;
		var srsp = sr * sp;
		var crsp = cr * sp;
		_this3.m21 = srsp * cy - cr * sy;
		_this3.m22 = srsp * sy + cr * cy;
		_this3.m23 = sr * cp;
		_this3.m31 = crsp * cy + sr * sy;
		_this3.m32 = crsp * sy - sr * cy;
		_this3.m33 = cr * cp;
		this.local_tform.m12 = this.get_Position().x;
		this.local_tform.m13 = this.get_Position().y;
		this.local_tform.m14 = this.get_Position().z;
		return this.local_tform;
	}
	,Strafe: function(speed) {
		this.local_pos.x += this.m_vStrafe.x * speed;
		this.local_pos.z += this.m_vStrafe.z * speed;
		this.LookAt.x += this.m_vStrafe.x * speed;
		this.LookAt.z += this.m_vStrafe.z * speed;
		this.posChanged = true;
	}
	,Advance: function(speed,ignoreY) {
		if(ignoreY == null) {
			ignoreY = false;
		}
		var _this = this.LookAt;
		var otherVector = this.local_pos;
		var vVector = new com_gdx_math_Vector3(_this.x - otherVector.x,_this.y - otherVector.y,_this.z - otherVector.z);
		var result = new com_gdx_math_Vector3(0,0,0);
		result.x = vVector.x;
		result.y = vVector.y;
		result.z = vVector.z;
		result.normalize();
		vVector = result;
		this.local_pos.x += vVector.x * speed;
		this.local_pos.z += vVector.z * speed;
		if(!ignoreY) {
			this.local_pos.y += vVector.y * speed;
		}
		this.LookAt.x += vVector.x * speed;
		this.LookAt.z += vVector.z * speed;
		if(!ignoreY) {
			this.LookAt.y += vVector.y * speed;
		}
		this.posChanged = true;
	}
	,MouseLook: function(x,y,yawSpeed,pitchSpeed,smoth) {
		if(smoth == null) {
			smoth = 1;
		}
		if(pitchSpeed == null) {
			pitchSpeed = 100;
		}
		if(yawSpeed == null) {
			yawSpeed = 50;
		}
		var vAxis = new com_gdx_math_Vector3(0,0,0);
		this.angleX = x / yawSpeed * smoth;
		this.angleY = -y / pitchSpeed * smoth;
		this.angleX = com_gdx_util_Util.clamp(this.angleX,-1,1);
		this.angleY = com_gdx_util_Util.clamp(this.angleY,-1,1);
		var vector = this.cross;
		var result = new com_gdx_math_Vector3(0,0,0);
		result.x = vector.x;
		result.y = vector.y;
		result.z = vector.z;
		result.normalize();
		vAxis = result;
		this.RotateView(this.angleY,vAxis.x,vAxis.y,vAxis.z);
		this.RotateView(this.angleX,0,1,0);
	}
	,RotateView: function(angle,x,y,z) {
		var vNewView = new com_gdx_math_Vector3(0,0,0);
		var vView = new com_gdx_math_Vector3(0,0,0);
		var cosTheta;
		var sinTheta = 0;
		vView.x = this.LookAt.x - this.local_pos.x;
		vView.y = this.LookAt.y - this.local_pos.y;
		vView.z = this.LookAt.z - this.local_pos.z;
		cosTheta = Math.cos(angle);
		sinTheta = Math.sin(angle);
		vNewView.x = (cosTheta + (1 - cosTheta) * x * x) * vView.x;
		vNewView.x = (vNewView.x += ((1 - cosTheta) * x * y - z * sinTheta) * vView.y) + ((1 - cosTheta) * x * z + y * sinTheta) * vView.z;
		vNewView.y = ((1 - cosTheta) * x * y + z * sinTheta) * vView.x;
		vNewView.y = (vNewView.y += (cosTheta + (1 - cosTheta) * y * y) * vView.y) + ((1 - cosTheta) * y * z - x * sinTheta) * vView.z;
		vNewView.z = ((1 - cosTheta) * x * z - y * sinTheta) * vView.x;
		vNewView.z = (vNewView.z += ((1 - cosTheta) * y * z + x * sinTheta) * vView.y) + (cosTheta + (1 - cosTheta) * z * z) * vView.z;
		this.LookAt.x = this.local_pos.x + vNewView.x;
		this.LookAt.y = this.local_pos.y + vNewView.y;
		this.LookAt.z = this.local_pos.z + vNewView.z;
		this.posChanged = true;
	}
	,__class__: com_gdx_scene3d_cameras_TargetCamera
});
var com_gdx_scene3d_lights_Light = function(Color,Intensity,parent,Name,id) {
	if(id == null) {
		id = -1;
	}
	if(Name == null) {
		Name = "Light";
	}
	com_gdx_scene3d_Node.call(this,parent,Name,id);
	this.color = Color;
	this.intensity = Intensity;
	this.ambient = new com_gdx_color_Color3(0.0,0.0,0.0);
	this.active = true;
	this.visible = true;
};
$hxClasses["com.gdx.scene3d.lights.Light"] = com_gdx_scene3d_lights_Light;
com_gdx_scene3d_lights_Light.__name__ = true;
com_gdx_scene3d_lights_Light.__super__ = com_gdx_scene3d_Node;
com_gdx_scene3d_lights_Light.prototype = $extend(com_gdx_scene3d_Node.prototype,{
	__class__: com_gdx_scene3d_lights_Light
});
var com_gdx_scene3d_lights_PointLight = function(Color,Intensity,pos,SpecularIntensity,SpecularPower,parent,Name,id) {
	if(id == null) {
		id = -1;
	}
	if(Name == null) {
		Name = "PointLight";
	}
	if(SpecularPower == null) {
		SpecularPower = 8;
	}
	if(SpecularIntensity == null) {
		SpecularIntensity = 2;
	}
	com_gdx_scene3d_lights_Light.call(this,Color,Intensity,parent,Name,id);
	this.local_pos = pos;
	this.specularIntensity = SpecularIntensity;
	this.specularPower = SpecularPower;
	this.constant = 0;
	this.linear = 0;
	this.exponent = 1;
};
$hxClasses["com.gdx.scene3d.lights.PointLight"] = com_gdx_scene3d_lights_PointLight;
com_gdx_scene3d_lights_PointLight.__name__ = true;
com_gdx_scene3d_lights_PointLight.__super__ = com_gdx_scene3d_lights_Light;
com_gdx_scene3d_lights_PointLight.prototype = $extend(com_gdx_scene3d_lights_Light.prototype,{
	__class__: com_gdx_scene3d_lights_PointLight
});
var com_gdx_scene3d_lights_SpotLight = function(Color,Intensity,dir,pos,CutOff,SpecularIntensity,SpecularPower,parent,Name,id) {
	if(id == null) {
		id = -1;
	}
	if(Name == null) {
		Name = "SpotLight";
	}
	if(SpecularPower == null) {
		SpecularPower = 8;
	}
	if(SpecularIntensity == null) {
		SpecularIntensity = 2;
	}
	if(CutOff == null) {
		CutOff = 0.2;
	}
	com_gdx_scene3d_lights_Light.call(this,Color,Intensity,parent,Name,id);
	this.local_pos = pos;
	this.direction = dir;
	this.cutOff = CutOff;
	this.specularIntensity = SpecularIntensity;
	this.specularPower = SpecularPower;
	this.constant = 0;
	this.linear = 0;
	this.exponent = 1;
};
$hxClasses["com.gdx.scene3d.lights.SpotLight"] = com_gdx_scene3d_lights_SpotLight;
com_gdx_scene3d_lights_SpotLight.__name__ = true;
com_gdx_scene3d_lights_SpotLight.__super__ = com_gdx_scene3d_lights_Light;
com_gdx_scene3d_lights_SpotLight.prototype = $extend(com_gdx_scene3d_lights_Light.prototype,{
	__class__: com_gdx_scene3d_lights_SpotLight
});
var com_gdx_scene3d_ms3d_MS3DMaterial = function(file,path) {
	var name = "";
	var k = 0;
	var _g1 = 0;
	var _g = 32;
	while(_g1 < _g) {
		var j = _g1++;
		var ch = file.readByte();
		if(ch > 32 && ch <= 126) {
			name += String.fromCharCode(ch);
		}
	}
	this.name = name;
	this.ambient = this.redColor(file);
	this.diffuse = this.redColor(file);
	this.specular = this.redColor(file);
	this.emissive = this.redColor(file);
	this.shininess = file.readFloat();
	this.transparency = file.readFloat();
	this.mode = file.readUnsignedByte();
	var name1 = "";
	var k1 = 0;
	var skeep = false;
	var _g11 = 0;
	var _g2 = 128;
	while(_g11 < _g2) {
		var j1 = _g11++;
		var ch1 = file.readByte();
		if(ch1 == 93) {
			skeep = true;
		}
		if(ch1 > 32 && ch1 <= 126) {
			if(!skeep) {
				name1 += String.fromCharCode(ch1);
			}
		}
	}
	this.textureMap = haxe_io_Path.withoutDirectory(name1);
	var name2 = "";
	var k2 = 0;
	var skeep1 = false;
	var _g12 = 0;
	var _g3 = 128;
	while(_g12 < _g3) {
		var j2 = _g12++;
		var ch2 = file.readByte();
		if(ch2 == 93) {
			skeep1 = true;
		}
		if(ch2 > 32 && ch2 <= 126) {
			if(!skeep1) {
				name2 += String.fromCharCode(ch2);
			}
		}
	}
	this.alphaMap = haxe_io_Path.withoutDirectory(name2);
	var textureName = this.textureMap;
	textureName = haxe_io_Path.withoutExtension(textureName);
	if(lime_utils_Assets.exists(path + textureName + ".jpg")) {
		this.texture = com_gdx_Gdx.Instance().getTexture(path + textureName + ".jpg",true,true,true);
	} else if(lime_utils_Assets.exists(path + textureName + ".JPG")) {
		this.texture = com_gdx_Gdx.Instance().getTexture(path + textureName + ".JPG",true,true,true);
	} else if(lime_utils_Assets.exists(path + textureName + ".png")) {
		this.texture = com_gdx_Gdx.Instance().getTexture(path + textureName + ".png",true,true,true);
	} else if(lime_utils_Assets.exists(path + textureName + ".PNG")) {
		this.texture = com_gdx_Gdx.Instance().getTexture(path + textureName + ".PNG",true,true,true);
	} else {
		this.texture = com_gdx_Gdx.Instance().getTexture("dummy");
		haxe_Log.trace("Texture " + textureName + " dont exits in path",{ fileName : "MS3DMaterial.hx", lineNumber : 77, className : "com.gdx.scene3d.ms3d.MS3DMaterial", methodName : "new"});
	}
};
$hxClasses["com.gdx.scene3d.ms3d.MS3DMaterial"] = com_gdx_scene3d_ms3d_MS3DMaterial;
com_gdx_scene3d_ms3d_MS3DMaterial.__name__ = true;
com_gdx_scene3d_ms3d_MS3DMaterial.prototype = {
	redColor: function(f) {
		var r = f.readFloat();
		var g = f.readFloat();
		var b = f.readFloat();
		var a = f.readFloat();
		return new com_gdx_color_Color4(r,g,b,a);
	}
	,__class__: com_gdx_scene3d_ms3d_MS3DMaterial
};
var com_gdx_scene3d_ms3d_MS3DMesh = function(file) {
	this.flags = file.readByte();
	this.name = this.readString(file,32);
	this.numTriangles = file.readUnsignedShort();
	this.TriangleIndices = [];
	var _g1 = 0;
	var _g = this.numTriangles;
	while(_g1 < _g) {
		var f = _g1++;
		var indice = file.readUnsignedShort();
		this.TriangleIndices.push(indice);
	}
	this.MaterialIndex = file.readUnsignedByte();
};
$hxClasses["com.gdx.scene3d.ms3d.MS3DMesh"] = com_gdx_scene3d_ms3d_MS3DMesh;
com_gdx_scene3d_ms3d_MS3DMesh.__name__ = true;
com_gdx_scene3d_ms3d_MS3DMesh.prototype = {
	readString: function(byteData,count) {
		var name = "";
		var k = 0;
		var _g1 = 0;
		var _g = count;
		while(_g1 < _g) {
			var j = _g1++;
			var ch = byteData.readByte();
			if(ch > 33 && ch <= 125) {
				name += String.fromCharCode(ch);
			}
		}
		return name;
	}
	,__class__: com_gdx_scene3d_ms3d_MS3DMesh
};
var com_gdx_scene3d_ms3d_MS3DTriangle = function(file) {
	this.flags = file.readUnsignedShort();
	this.indice0 = file.readUnsignedShort();
	this.indice1 = file.readUnsignedShort();
	this.indice2 = file.readUnsignedShort();
	this.normal0 = new com_gdx_math_Vector3(0,0,0);
	this.normal0.x = file.readFloat();
	this.normal0.y = file.readFloat();
	this.normal0.z = -file.readFloat();
	this.normal1 = new com_gdx_math_Vector3(0,0,0);
	this.normal1.x = file.readFloat();
	this.normal1.y = file.readFloat();
	this.normal1.z = -file.readFloat();
	this.normal2 = new com_gdx_math_Vector3(0,0,0);
	this.normal2.x = file.readFloat();
	this.normal2.y = file.readFloat();
	this.normal2.z = -file.readFloat();
	this.s = new com_gdx_math_Vector3(0,0,0);
	this.s.x = file.readFloat();
	this.s.y = file.readFloat();
	this.s.z = file.readFloat();
	this.t = new com_gdx_math_Vector3(0,0,0);
	this.t.x = file.readFloat();
	this.t.y = file.readFloat();
	this.t.z = file.readFloat();
	this.smoothingGroup = file.readByte();
	this.groupIndex = file.readByte();
};
$hxClasses["com.gdx.scene3d.ms3d.MS3DTriangle"] = com_gdx_scene3d_ms3d_MS3DTriangle;
com_gdx_scene3d_ms3d_MS3DTriangle.__name__ = true;
com_gdx_scene3d_ms3d_MS3DTriangle.prototype = {
	__class__: com_gdx_scene3d_ms3d_MS3DTriangle
};
var com_gdx_scene3d_ms3d_MS3DVertex = function(file) {
	this.vertex = new com_gdx_math_Vector3(0,0,0);
	this.flags = file.readByte();
	this.vertex.x = file.readFloat();
	this.vertex.y = file.readFloat();
	this.vertex.z = -file.readFloat();
	this.boneID = file.readUnsignedByte();
	this.refCount = file.readByte();
};
$hxClasses["com.gdx.scene3d.ms3d.MS3DVertex"] = com_gdx_scene3d_ms3d_MS3DVertex;
com_gdx_scene3d_ms3d_MS3DVertex.__name__ = true;
com_gdx_scene3d_ms3d_MS3DVertex.prototype = {
	__class__: com_gdx_scene3d_ms3d_MS3DVertex
};
var com_gdx_scene3d_particles_ParticleSystem = function(MaxParticles,parent,id,Name) {
	if(Name == null) {
		Name = "ParticlesSystem";
	}
	if(id == null) {
		id = 0;
	}
	if(MaxParticles == null) {
		MaxParticles = 100;
	}
	this._totalElapsed = 0;
	this._emitElapsed = 0;
	this.endColor = new com_gdx_color_Color3();
	this.startColor = new com_gdx_color_Color3();
	this.enabled = true;
	this.numParticles = 0;
	com_gdx_scene3d_Node.call(this,parent,this.name,id);
	this.alphaBlend = true;
	this.clip = new com_gdx_util_Clip();
	this._particles = [];
	this.material = new com_gdx_gl_material_Material();
	this.material.CullingFace = false;
	this.material.DepthMask = false;
	this.material.DepthTest = false;
	this.material.BlendType = 1;
	this.material.BlendFace = true;
	this.EmitPosition = com_gdx_math_Vector3.get_zero();
	this.InitWithTotalParticles(MaxParticles);
	this.createDefault();
	this.boudUpdate = true;
	this.affectors = new List();
};
$hxClasses["com.gdx.scene3d.particles.ParticleSystem"] = com_gdx_scene3d_particles_ParticleSystem;
com_gdx_scene3d_particles_ParticleSystem.__name__ = true;
com_gdx_scene3d_particles_ParticleSystem.__super__ = com_gdx_scene3d_Node;
com_gdx_scene3d_particles_ParticleSystem.prototype = $extend(com_gdx_scene3d_Node.prototype,{
	setTexture: function(tex,tex_clip) {
		this.material.setTexture(tex);
		if(tex_clip != null) {
			this.clip = tex_clip;
		} else {
			this.clip.set(0,0,tex.width,tex.height);
		}
	}
	,createDefault: function() {
		this.setupEmitter(-1,new com_gdx_math_Vector3(-0.2,0.5,-0.2),new com_gdx_math_Vector3(0.2,2,0.2),new com_gdx_math_Vector3(0,0,0),new com_gdx_math_Vector3(0,0,0),1,0.8,0.2,com_gdx_color_Color3.DARKORANGE,com_gdx_color_Color3.YELLOW,1,0.0,1.5,0.5);
	}
	,createFire: function() {
		this.setupEmitter(-1,new com_gdx_math_Vector3(-0.2,1,-0.2),new com_gdx_math_Vector3(0.2,2,0.2),new com_gdx_math_Vector3(-0.01,-0.2,-0.01),new com_gdx_math_Vector3(0.01,-0.5,0.01),1,0.8,0.2,new com_gdx_color_Color3(0,0,0),new com_gdx_color_Color3(1,0.5,0.5),1,0.1,1,0.8);
	}
	,createWaterFall: function() {
		this.setupEmitter(-1,new com_gdx_math_Vector3(-2.5,4,-2.5),new com_gdx_math_Vector3(2.5,6,2.5),new com_gdx_math_Vector3(-0.01,0.2,-0.01),new com_gdx_math_Vector3(0.01,0.5,0.01),2,0.5,0.5,new com_gdx_color_Color3(0.1,0.1,0.5),new com_gdx_color_Color3(0.0,0.0,0.9),0.5,0.9,2,0.8);
	}
	,InitWithTotalParticles: function(numberOfParticles) {
		var indices = [];
		var index = 0;
		var oldvertices = 0;
		var _g1 = 0;
		var _g = numberOfParticles * 6 | 0;
		while(_g1 < _g) {
			var count = _g1++;
			indices.push(index);
			indices.push(index + 2);
			indices.push(index + 1);
			indices.push(index);
			indices.push(index + 3);
			indices.push(index + 2);
			index += 4;
		}
		this.vertexbuffer = new com_gdx_gl_VertexBuffer(com_gdx_Gdx.Instance().materials[3]);
		this.vertexbuffer.uploadIndices(indices);
		var elements = numberOfParticles * 3 * 4;
		var this1;
		if(elements != null) {
			this1 = new Float32Array(elements);
		} else {
			this1 = null;
		}
		this.vert_coords = this1;
		var elements1 = numberOfParticles * 2 * 4;
		var this2;
		if(elements1 != null) {
			this2 = new Float32Array(elements1);
		} else {
			this2 = null;
		}
		this.vert_tex_coords = this2;
		var elements2 = numberOfParticles * 4 * 4;
		var this3;
		if(elements2 != null) {
			this3 = new Float32Array(elements2);
		} else {
			this3 = null;
		}
		this.vert_col = this3;
		var ii = 0;
		var ll = numberOfParticles;
		while(ii < ll) {
			this._particles[ii] = new com_gdx_scene3d_particles_Particle();
			++ii;
		}
	}
	,restart: function() {
		this.enabled = true;
		this._totalElapsed = 0;
	}
	,addAffector: function(affect) {
		this.affectors.add(affect);
	}
	,addGravityAffector: function(g,timeForceLost) {
		if(timeForceLost == null) {
			timeForceLost = 1000;
		}
		var affect = new com_gdx_scene3d_particles_affectors_GravityAffect(g,timeForceLost);
		this.addAffector(affect);
	}
	,addBounceAffector: function(bounce,timeForceLost) {
		if(timeForceLost == null) {
			timeForceLost = 1000;
		}
		var affect = new com_gdx_scene3d_particles_affectors_BounceAffect(bounce,timeForceLost);
		this.addAffector(affect);
	}
	,addRotateAffector: function(speed,pivot) {
		var affect = new com_gdx_scene3d_particles_affectors_RotateAffect(speed,pivot);
		this.addAffector(affect);
	}
	,addColorMorphAffector: function(ColorList,TimeList,smooth) {
		if(smooth == null) {
			smooth = true;
		}
		var affect = new com_gdx_scene3d_particles_affectors_ColorMorphAffect(ColorList,TimeList,smooth);
		this.addAffector(affect);
	}
	,drawBillboard: function(ii,horizontal,vertical,particle) {
		this.vert_coords[ii * 12] = particle.position.x + horizontal.x + vertical.x;
		this.vert_coords[ii * 12 + 1] = particle.position.y + horizontal.y + vertical.y;
		this.vert_coords[ii * 12 + 2] = particle.position.z + horizontal.z + vertical.z;
		this.vert_coords[ii * 12 + 3] = particle.position.x + horizontal.x - vertical.x;
		this.vert_coords[ii * 12 + 4] = particle.position.y + horizontal.y - vertical.y;
		this.vert_coords[ii * 12 + 5] = particle.position.z + horizontal.z - vertical.z;
		this.vert_coords[ii * 12 + 6] = particle.position.x - horizontal.x - vertical.x;
		this.vert_coords[ii * 12 + 7] = particle.position.y - horizontal.y - vertical.y;
		this.vert_coords[ii * 12 + 8] = particle.position.z - horizontal.z - vertical.z;
		this.vert_coords[ii * 12 + 9] = particle.position.x - horizontal.x + vertical.x;
		this.vert_coords[ii * 12 + 10] = particle.position.y - horizontal.y + vertical.y;
		this.vert_coords[ii * 12 + 11] = particle.position.z - horizontal.z + vertical.z;
		this.vert_tex_coords[ii * 8] = 0.0;
		this.vert_tex_coords[ii * 8 + 1] = 0.0;
		this.vert_tex_coords[ii * 8 + 2] = 0.0;
		this.vert_tex_coords[ii * 8 + 3] = 1.0;
		this.vert_tex_coords[ii * 8 + 4] = 1.0;
		this.vert_tex_coords[ii * 8 + 5] = 1.0;
		this.vert_tex_coords[ii * 8 + 6] = 1.0;
		this.vert_tex_coords[ii * 8 + 7] = 0.0;
		var color = particle.color;
		var alpha = particle.alpha;
		this.vert_col[ii * 16] = color.r;
		this.vert_col[ii * 16 + 1] = color.g;
		this.vert_col[ii * 16 + 2] = color.b;
		this.vert_col[ii * 16 + 3] = alpha;
		this.vert_col[ii * 16 + 4] = color.r;
		this.vert_col[ii * 16 + 5] = color.g;
		this.vert_col[ii * 16 + 6] = color.b;
		this.vert_col[ii * 16 + 7] = alpha;
		this.vert_col[ii * 16 + 8] = color.r;
		this.vert_col[ii * 16 + 9] = color.g;
		this.vert_col[ii * 16 + 10] = color.b;
		this.vert_col[ii * 16 + 11] = alpha;
		this.vert_col[ii * 16 + 12] = color.r;
		this.vert_col[ii * 16 + 13] = color.g;
		this.vert_col[ii * 16 + 14] = color.b;
		this.vert_col[ii * 16 + 15] = alpha;
	}
	,render: function(cam) {
		var mat = this.getWorldTform();
		var m = cam.viewMatrix;
		if(this.boundChanged) {
			this.Bounding.calculate();
			this.Bounding.update(mat);
		}
		this.Bounding.initFloats(999999,-99999);
		var horizontal = new com_gdx_math_Vector3(0,0,0);
		var vertical = new com_gdx_math_Vector3(0,0,0);
		var ii = 0;
		var _g1 = 0;
		var _g = this.numParticles;
		while(_g1 < _g) {
			var ii1 = _g1++;
			var particle = this._particles[ii1];
			var xOffset = this.clip.width / 2 * particle.scale / 100;
			var yOffset = this.clip.height / 2 * particle.scale / 100;
			horizontal.x = m.m11 * xOffset;
			horizontal.y = m.m21 * xOffset;
			horizontal.z = m.m31 * xOffset;
			vertical.x = m.m12 * yOffset;
			vertical.y = m.m22 * yOffset;
			vertical.z = m.m32 * yOffset;
			this.drawBillboard(ii1,horizontal,vertical,particle);
			this.Bounding.addInternalVector(particle.position);
			this.boundChanged = true;
		}
		if(ii >= this.numParticles) {
			this.boundChanged = false;
		}
		if(this.numParticles <= 0) {
			return;
		}
		this.vertexbuffer.pipeline.Bind(cam.viewMatrix,cam.projMatrix,mat);
		this.vertexbuffer.pipeline.ApplayMaterial(this.material);
		this.vertexbuffer.setVertex(this.vert_coords);
		this.vertexbuffer.setUVCoord0(this.vert_tex_coords);
		this.vertexbuffer.setColors(this.vert_col);
		this.vertexbuffer.render(com_gdx_Gdx.gl.TRIANGLES,this.numParticles * 6);
		com_gdx_Gdx.Instance().numVertex += this.numParticles * 4;
		com_gdx_Gdx.Instance().numTris += this.numParticles * 2;
	}
	,debug: function(lines) {
		lines.drawOBBox(this.Bounding,1,0,0);
		com_gdx_scene3d_Node.prototype.debug.call(this,lines);
	}
	,update: function() {
		var dt = com_gdx_Gdx.Instance().deltaTime;
		var ii = 0;
		while(ii < this.numParticles) {
			var particle = this._particles[ii];
			if(particle.life > 0) {
				var lerp = (particle.startlife - particle.life) / particle.startlife * dt;
				var start = particle.scale;
				particle.scale = start + (this.sizeEnd - start) * lerp;
				var start1 = particle.alpha;
				particle.alpha = start1 + (this.alphaEnd - start1) * lerp;
				var start2 = particle.color;
				var end = this.endColor;
				var _r = start2.r + (end.r - start2.r) * lerp;
				var _g = start2.g + (end.g - start2.g) * lerp;
				var _b = start2.b + (end.b - start2.b) * lerp;
				particle.color = new com_gdx_color_Color3(_r,_g,_b);
				particle.position.x += particle.velocity.x * dt;
				particle.position.y += particle.velocity.y * dt;
				particle.position.z += particle.velocity.z * dt;
				particle.velocity.x += particle.acceleration.x * dt;
				particle.velocity.y += particle.acceleration.y * dt;
				particle.velocity.z += particle.acceleration.z * dt;
				var _g_head = this.affectors.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var affect = val;
					affect.affect(com_gdx_Gdx.Instance().getTimer(),particle);
				}
				particle.life -= dt;
				if(particle.scale <= 0) {
					particle.life = 0;
				}
				if(particle.alpha <= 0) {
					particle.life = 0;
				}
				++ii;
			} else {
				--this.numParticles;
				if(ii != this.numParticles) {
					this._particles[ii] = this._particles[this.numParticles];
					this._particles[this.numParticles] = particle;
				}
			}
		}
		if(!this.enabled) {
			var tmp = this.numParticles <= 0;
			return;
		}
		if(this.duration > 0) {
			this._totalElapsed += dt;
			if(this._totalElapsed >= this.duration) {
				this.enabled = false;
				return;
			}
		}
		var emitDelay = this.lifespan / this._particles.length;
		this._emitElapsed += dt;
		while(this._emitElapsed >= emitDelay) {
			if(this.numParticles < this._particles.length) {
				var particle1 = this._particles[this.numParticles];
				if(this.initParticle(particle1)) {
					++this.numParticles;
				}
			}
			this._emitElapsed -= emitDelay;
		}
		com_gdx_scene3d_Node.prototype.update.call(this);
	}
	,setupEmitter: function(duration,minDirection,maxDirection,minAcceleration,maxAcceleration,startSize,startVariance,endSize,ColorBegin,ColorEnd,startAlpha,endAlpha,life,lifeVariance) {
		this.DirectionMin = minDirection;
		this.DirectionMax = maxDirection;
		this.AccelerationMin = minAcceleration;
		this.AccelerationMax = maxAcceleration;
		this.duration = duration;
		this.sizeStart = startSize;
		this.sizeStartVariance = startVariance;
		this.sizeEnd = endSize;
		this.startColor = ColorBegin;
		this.endColor = ColorEnd;
		this.alphaStart = startAlpha;
		this.alphaEnd = endAlpha;
		this.lifespan = life;
		this.lifespanVariance = lifeVariance;
	}
	,getStartPosition: function() {
		return new com_gdx_math_Vector3(0,0,0);
	}
	,initParticle: function(particle) {
		particle.startTime = com_gdx_Gdx.Instance().getTimer();
		particle.startlife = this.lifespan + this.lifespanVariance * (Math.random() * 2.0 - 1.0);
		particle.life = particle.startlife;
		particle.color = this.startColor;
		var max = this.sizeStart;
		var min = this.sizeEnd;
		particle.scale = Math.random() * (max - min) + min;
		var max1 = this.alphaStart;
		var min1 = this.alphaEnd;
		particle.alpha = Math.random() * (max1 - min1) + min1;
		particle.position = this.getStartPosition();
		var max2 = this.AccelerationMin.x;
		var min2 = this.AccelerationMax.x;
		var tmp = Math.random() * (max2 - min2) + min2;
		particle.acceleration.x = tmp;
		var max3 = this.AccelerationMin.y;
		var min3 = this.AccelerationMax.y;
		var tmp1 = Math.random() * (max3 - min3) + min3;
		particle.acceleration.y = tmp1;
		var max4 = this.AccelerationMin.z;
		var min4 = this.AccelerationMax.z;
		var tmp2 = Math.random() * (max4 - min4) + min4;
		particle.acceleration.z = tmp2;
		var max5 = this.DirectionMin.x;
		var min5 = this.DirectionMax.x;
		var tmp3 = Math.random() * (max5 - min5) + min5;
		particle.velocity.x = tmp3;
		var max6 = this.DirectionMin.y;
		var min6 = this.DirectionMax.y;
		var tmp4 = Math.random() * (max6 - min6) + min6;
		particle.velocity.y = tmp4;
		var max7 = this.DirectionMin.z;
		var min7 = this.DirectionMax.z;
		var tmp5 = Math.random() * (max7 - min7) + min7;
		particle.velocity.z = tmp5;
		var _this = particle.start_velocity;
		var source = particle.velocity;
		_this.x = source.x;
		_this.y = source.y;
		_this.z = source.z;
		return true;
	}
	,__class__: com_gdx_scene3d_particles_ParticleSystem
});
var com_gdx_scene3d_particles_BoxEmitter = function(MaxParticles,boxMin,boxMax,Parent,id) {
	if(id == null) {
		id = 0;
	}
	if(MaxParticles == null) {
		MaxParticles = 100;
	}
	com_gdx_scene3d_particles_ParticleSystem.call(this,MaxParticles,Parent,id,"BoxEmitter");
	this.BoxMax = boxMax;
	this.BoxMin = boxMin;
};
$hxClasses["com.gdx.scene3d.particles.BoxEmitter"] = com_gdx_scene3d_particles_BoxEmitter;
com_gdx_scene3d_particles_BoxEmitter.__name__ = true;
com_gdx_scene3d_particles_BoxEmitter.__super__ = com_gdx_scene3d_particles_ParticleSystem;
com_gdx_scene3d_particles_BoxEmitter.prototype = $extend(com_gdx_scene3d_particles_ParticleSystem.prototype,{
	getStartPosition: function() {
		var emitPosition = new com_gdx_math_Vector3(0,0,0);
		var max = this.BoxMin.x;
		var min = this.BoxMax.x;
		emitPosition.x = Math.random() * (max - min) + min;
		var max1 = this.BoxMin.y;
		var min1 = this.BoxMax.y;
		emitPosition.y = Math.random() * (max1 - min1) + min1;
		var max2 = this.BoxMin.z;
		var min2 = this.BoxMax.z;
		emitPosition.z = Math.random() * (max2 - min2) + min2;
		return emitPosition;
	}
	,__class__: com_gdx_scene3d_particles_BoxEmitter
});
var com_gdx_scene3d_particles_CylinderEmitter = function(MaxParticles,normal,lenght,center,radius,outlineOnly,Parent,id) {
	if(id == null) {
		id = 0;
	}
	if(MaxParticles == null) {
		MaxParticles = 100;
	}
	com_gdx_scene3d_particles_ParticleSystem.call(this,MaxParticles,Parent,id,"CylinderEmitter");
	this.Center = center;
	this.Normal = normal;
	this.Length = lenght;
	this.Radius = radius;
	this.OutlineOnly = outlineOnly;
};
$hxClasses["com.gdx.scene3d.particles.CylinderEmitter"] = com_gdx_scene3d_particles_CylinderEmitter;
com_gdx_scene3d_particles_CylinderEmitter.__name__ = true;
com_gdx_scene3d_particles_CylinderEmitter.__super__ = com_gdx_scene3d_particles_ParticleSystem;
com_gdx_scene3d_particles_CylinderEmitter.prototype = $extend(com_gdx_scene3d_particles_ParticleSystem.prototype,{
	getStartPosition: function() {
		this.EmitPosition = new com_gdx_math_Vector3(0,0,0);
		var distance = !this.OutlineOnly ? Math.random() * this.Radius : this.Radius;
		var _this = this.EmitPosition;
		_this.x = this.Center.x + distance;
		_this.y = this.Center.y;
		_this.z = this.Center.z + distance;
		var _this1 = this.EmitPosition;
		var degrees = Math.random() * 360.0;
		var center = this.Center;
		degrees *= com_gdx_util_Util.Deg2Rad;
		var cs = Math.cos(degrees);
		var sn = Math.sin(degrees);
		_this1.x -= center.x;
		_this1.z -= center.z;
		var z = _this1.x * sn + _this1.z * cs;
		_this1.x = _this1.x * cs - _this1.z * sn;
		_this1.y = _this1.y;
		_this1.z = z;
		_this1.x += center.x;
		_this1.z += center.z;
		var length = Math.random() * this.Length;
		this.EmitPosition.x += this.Normal.x * length;
		this.EmitPosition.y += this.Normal.y * length;
		this.EmitPosition.z += this.Normal.z * length;
		return this.EmitPosition;
	}
	,__class__: com_gdx_scene3d_particles_CylinderEmitter
});
var com_gdx_scene3d_particles_GrassNode = function(parent,id,Name) {
	if(Name == null) {
		Name = "BillBoard";
	}
	if(id == null) {
		id = 0;
	}
	this.dirt = false;
	this.invTexHeight = 0;
	this.invTexWidth = 0;
	this.vertical = new com_gdx_math_Vector3(0,0,0);
	this.horizontal = new com_gdx_math_Vector3(0,0,0);
	com_gdx_scene3d_Node.call(this,parent,this.name,id);
	this.clip = [];
	this.material = new com_gdx_gl_material_Material();
	this.material.CullingFace = false;
	this.material.DepthMask = true;
	this.material.DepthTest = true;
	this.material.BlendType = 0;
	this.material.BlendFace = true;
	this.numParticles = 0;
	this.decales = [];
	this.dirt = true;
};
$hxClasses["com.gdx.scene3d.particles.GrassNode"] = com_gdx_scene3d_particles_GrassNode;
com_gdx_scene3d_particles_GrassNode.__name__ = true;
com_gdx_scene3d_particles_GrassNode.__super__ = com_gdx_scene3d_Node;
com_gdx_scene3d_particles_GrassNode.prototype = $extend(com_gdx_scene3d_Node.prototype,{
	debug: function(lines) {
		lines.drawABBox(this.Bounding,1,0,0);
	}
	,addBillboard: function(pos,size,frame,type) {
		if(type == null) {
			type = 1;
		}
		if(frame == null) {
			frame = 0;
		}
		this.Bounding.addInternalPoint(pos.x + size,pos.y + size,pos.z + size);
		this.Bounding.addInternalVector(pos);
		this.Bounding.addInternalPoint(pos.x - size,pos.y - size,pos.z - size);
		var b = new com_gdx_scene3d_particles__$GrassNode_GrassQuad(pos,size,frame,type);
		this.decales.push(b);
		this.numParticles++;
		this.dirt = true;
		this.boundChanged = true;
	}
	,addGrass: function(pos,size,frame) {
		if(frame == null) {
			frame = 0;
		}
		this.addBillboard(pos,size,frame,1);
		this.addBillboard(pos,size,frame,3);
	}
	,loadFromFile: function(filename) {
		var bytes = com_gdx_util_Util.getBytes(filename);
		var TAG = bytes.readUTFBytes(9);
		var total = bytes.readInt();
		haxe_Log.trace("tag:" + TAG + " Count:" + total,{ fileName : "GrassNode.hx", lineNumber : 131, className : "com.gdx.scene3d.particles.GrassNode", methodName : "loadFromFile"});
		var pos = new com_gdx_math_Vector3(0,0,0);
		var _g1 = 0;
		var _g = total;
		while(_g1 < _g) {
			var ii = _g1++;
			var size = bytes.readFloat();
			var frame = bytes.readInt();
			var type = bytes.readInt();
			pos.x = bytes.readFloat();
			pos.y = bytes.readFloat();
			pos.z = bytes.readFloat();
			this.addBillboard(pos,size,frame,type);
		}
	}
	,setTexture: function(tex,frameWidth,frameHeight) {
		if(frameHeight == null) {
			frameHeight = 0;
		}
		if(frameWidth == null) {
			frameWidth = 0;
		}
		this.material.setTexture(tex);
		if(frameWidth != 0 && frameHeight != 0) {
			var row = Math.floor(tex.width / frameWidth);
			var column = Math.floor(tex.height / frameHeight);
			var index = 0;
			var _g1 = 0;
			var _g = row;
			while(_g1 < _g) {
				var i = _g1++;
				var _g3 = 0;
				var _g2 = column;
				while(_g3 < _g2) {
					var j = _g3++;
					var frame = new com_gdx_util_Clip(i * frameWidth,j * frameHeight,frameWidth,frameHeight,0,0);
					this.clip.push(frame);
					++index;
				}
			}
		} else {
			var frame1 = new com_gdx_util_Clip(0,0,tex.width,tex.height,0,0);
			this.clip.push(frame1);
		}
		this.invTexWidth = 1.0 / tex.width;
		this.invTexHeight = 1.0 / tex.height;
	}
	,Build: function() {
		this.InitWithTotal(this.numParticles);
		var _g1 = 0;
		var _g = this.decales.length;
		while(_g1 < _g) {
			var ii = _g1++;
			var particle = this.decales[ii];
			var xOffset = this.clip[particle.frame].width / 2 * particle.size / 100;
			var yOffset = this.clip[particle.frame].height / 2 * particle.size / 100;
			var _g2 = particle.type;
			switch(_g2) {
			case 1:
				var _this = this.horizontal;
				_this.x = xOffset;
				_this.y = 0 * xOffset;
				_this.z = 0 * xOffset;
				var _this1 = this.vertical;
				_this1.x = 0 * yOffset;
				_this1.y = yOffset;
				_this1.z = 0 * yOffset;
				this.drawBillboard(ii,this.horizontal,this.vertical,particle);
				break;
			case 2:
				var _this2 = this.horizontal;
				_this2.x = xOffset;
				_this2.y = 0 * xOffset;
				_this2.z = 0 * xOffset;
				var _this3 = this.vertical;
				_this3.x = 0 * yOffset;
				_this3.y = 0 * yOffset;
				_this3.z = yOffset;
				this.drawBillboard(ii,this.horizontal,this.vertical,particle);
				break;
			case 3:
				var _this4 = this.horizontal;
				_this4.x = 0 * xOffset;
				_this4.y = 0 * xOffset;
				_this4.z = xOffset;
				var _this5 = this.vertical;
				_this5.x = 0 * yOffset;
				_this5.y = yOffset;
				_this5.z = 0 * yOffset;
				this.drawBillboard(ii,this.horizontal,this.vertical,particle);
				break;
			}
		}
		this.vertexbuffer.setVertex(this.vert_coords);
		this.vertexbuffer.setUVCoord0(this.vert_tex_coords);
		this.vertexbuffer.setColors(this.vert_col);
	}
	,InitWithTotal: function(numberOf) {
		var indices = [];
		var index = 0;
		var oldvertices = 0;
		var _g1 = 0;
		var _g = numberOf * 6 | 0;
		while(_g1 < _g) {
			var count = _g1++;
			indices.push(index);
			indices.push(index + 2);
			indices.push(index + 1);
			indices.push(index);
			indices.push(index + 3);
			indices.push(index + 2);
			index += 4;
		}
		if(this.vertexbuffer != null) {
			this.vertexbuffer.dispose();
			this.vertexbuffer = null;
		}
		this.vertexbuffer = new com_gdx_gl_VertexBuffer(com_gdx_Gdx.Instance().materials[5]);
		this.vertexbuffer.uploadIndices(indices);
		var elements = numberOf * 3 * 4;
		var this1;
		if(elements != null) {
			this1 = new Float32Array(elements);
		} else {
			this1 = null;
		}
		this.vert_coords = this1;
		var elements1 = numberOf * 2 * 4;
		var this2;
		if(elements1 != null) {
			this2 = new Float32Array(elements1);
		} else {
			this2 = null;
		}
		this.vert_tex_coords = this2;
		var elements2 = numberOf * 4 * 4;
		var this3;
		if(elements2 != null) {
			this3 = new Float32Array(elements2);
		} else {
			this3 = null;
		}
		this.vert_col = this3;
	}
	,drawBillboard: function(ii,horizontal,vertical,particle) {
		this.vert_coords[ii * 12] = particle.position.x + horizontal.x + vertical.x;
		this.vert_coords[ii * 12 + 1] = particle.position.y + horizontal.y + vertical.y;
		this.vert_coords[ii * 12 + 2] = particle.position.z + horizontal.z + vertical.z;
		this.vert_coords[ii * 12 + 3] = particle.position.x + horizontal.x - vertical.x;
		this.vert_coords[ii * 12 + 4] = particle.position.y + horizontal.y - vertical.y;
		this.vert_coords[ii * 12 + 5] = particle.position.z + horizontal.z - vertical.z;
		this.vert_coords[ii * 12 + 6] = particle.position.x - horizontal.x - vertical.x;
		this.vert_coords[ii * 12 + 7] = particle.position.y - horizontal.y - vertical.y;
		this.vert_coords[ii * 12 + 8] = particle.position.z - horizontal.z - vertical.z;
		this.vert_coords[ii * 12 + 9] = particle.position.x - horizontal.x + vertical.x;
		this.vert_coords[ii * 12 + 10] = particle.position.y - horizontal.y + vertical.y;
		this.vert_coords[ii * 12 + 11] = particle.position.z - horizontal.z + vertical.z;
		var u = this.clip[particle.frame].x * this.invTexWidth;
		var v = (this.clip[particle.frame].y + this.clip[particle.frame].height) * this.invTexHeight;
		var u2 = (this.clip[particle.frame].x + this.clip[particle.frame].width) * this.invTexWidth;
		var v2 = this.clip[particle.frame].y * this.invTexHeight;
		this.vert_tex_coords[ii * 8] = u2;
		this.vert_tex_coords[ii * 8 + 1] = v2;
		this.vert_tex_coords[ii * 8 + 2] = u2;
		this.vert_tex_coords[ii * 8 + 3] = v;
		this.vert_tex_coords[ii * 8 + 4] = u;
		this.vert_tex_coords[ii * 8 + 5] = v;
		this.vert_tex_coords[ii * 8 + 6] = u;
		this.vert_tex_coords[ii * 8 + 7] = v2;
		var alpha = 1;
		this.vert_col[ii * 16] = 1;
		this.vert_col[ii * 16 + 1] = 1;
		this.vert_col[ii * 16 + 2] = 1;
		this.vert_col[ii * 16 + 3] = alpha;
		this.vert_col[ii * 16 + 4] = 1;
		this.vert_col[ii * 16 + 5] = 1;
		this.vert_col[ii * 16 + 6] = 1;
		this.vert_col[ii * 16 + 7] = alpha;
		this.vert_col[ii * 16 + 8] = 1;
		this.vert_col[ii * 16 + 9] = 1;
		this.vert_col[ii * 16 + 10] = 1;
		this.vert_col[ii * 16 + 11] = alpha;
		this.vert_col[ii * 16 + 12] = 1;
		this.vert_col[ii * 16 + 13] = 1;
		this.vert_col[ii * 16 + 14] = 1;
		this.vert_col[ii * 16 + 15] = alpha;
	}
	,render: function(cam) {
		if(this.numParticles <= 0) {
			return;
		}
		if(this.dirt) {
			this.Build();
			this.dirt = false;
			return;
		}
		var mat = this.getWorldTform();
		if(this.boundChanged) {
			this.Bounding.calculate();
			this.Bounding.update(mat);
		}
		if(com_gdx_math_BoundingBox.IsInFrustum(this.Bounding.vectorsWorld,cam.frustumPlanes)) {
			this.vertexbuffer.pipeline.ApplayMaterial(this.material);
			this.vertexbuffer.pipeline.Bind(cam.viewMatrix,cam.projMatrix,mat);
			this.vertexbuffer.render(com_gdx_Gdx.gl.TRIANGLES,this.numParticles * 6);
			com_gdx_Gdx.Instance().numVertex += this.numParticles * 4;
			com_gdx_Gdx.Instance().numTris += this.numParticles * 2;
			if(this.vertexbuffer.pipeline.vertexAttribute != -1) {
				com_gdx_Gdx.gl.disableVertexAttribArray(this.vertexbuffer.pipeline.vertexAttribute);
			}
			if(this.vertexbuffer.pipeline.texCoord0Attribute != -1) {
				com_gdx_Gdx.gl.disableVertexAttribArray(this.vertexbuffer.pipeline.texCoord0Attribute);
			}
			if(this.vertexbuffer.pipeline.colorAttribute != -1) {
				com_gdx_Gdx.gl.disableVertexAttribArray(this.vertexbuffer.pipeline.colorAttribute);
			}
		}
		if(this.boundChanged) {
			this.boundChanged = false;
		}
	}
	,__class__: com_gdx_scene3d_particles_GrassNode
});
var com_gdx_scene3d_particles__$GrassNode_GrassQuad = function(p,s,frame,type) {
	this.frame = frame;
	this.position = new com_gdx_math_Vector3(p.x,p.y,p.z);
	this.size = s;
	this.type = type;
};
$hxClasses["com.gdx.scene3d.particles._GrassNode.GrassQuad"] = com_gdx_scene3d_particles__$GrassNode_GrassQuad;
com_gdx_scene3d_particles__$GrassNode_GrassQuad.__name__ = true;
com_gdx_scene3d_particles__$GrassNode_GrassQuad.prototype = {
	__class__: com_gdx_scene3d_particles__$GrassNode_GrassQuad
};
var com_gdx_scene3d_particles_Particle = function() {
	this.startTime = 0;
	this.alpha = 0;
	this.scale = 0;
	this.velocity = new com_gdx_math_Vector3(0,0,0);
	this.position = new com_gdx_math_Vector3(0,0,0);
	this.acceleration = new com_gdx_math_Vector3(0,0,0);
	this.start_velocity = new com_gdx_math_Vector3(0,0,0);
	this.startTime = 0;
	this.life = 1;
	this.startlife = 1;
	this.scale = 1;
	this.alpha = 1;
	this.color = new com_gdx_color_Color3();
};
$hxClasses["com.gdx.scene3d.particles.Particle"] = com_gdx_scene3d_particles_Particle;
com_gdx_scene3d_particles_Particle.__name__ = true;
com_gdx_scene3d_particles_Particle.prototype = {
	__class__: com_gdx_scene3d_particles_Particle
};
var com_gdx_scene3d_particles_RingEmitter = function(MaxParticles,center,radius,ringThickness,MaxAngleDegrees,Parent,id) {
	if(id == null) {
		id = 0;
	}
	if(MaxParticles == null) {
		MaxParticles = 100;
	}
	com_gdx_scene3d_particles_ParticleSystem.call(this,MaxParticles,Parent,id,"RingEmitter");
	this.Center = center;
	this.Radius = radius;
	this.RingThickness = ringThickness;
	this.MaxAngleDegrees = MaxAngleDegrees;
};
$hxClasses["com.gdx.scene3d.particles.RingEmitter"] = com_gdx_scene3d_particles_RingEmitter;
com_gdx_scene3d_particles_RingEmitter.__name__ = true;
com_gdx_scene3d_particles_RingEmitter.__super__ = com_gdx_scene3d_particles_ParticleSystem;
com_gdx_scene3d_particles_RingEmitter.prototype = $extend(com_gdx_scene3d_particles_ParticleSystem.prototype,{
	getStartPosition: function() {
		this.EmitPosition = new com_gdx_math_Vector3(0,0,0);
		var distance = Math.random() * this.RingThickness * 0.5;
		var plusMinus = Std.random(2);
		if(plusMinus == 1) {
			distance -= this.Radius;
		} else {
			distance += this.Radius;
		}
		var _this = this.EmitPosition;
		_this.x = this.Center.x + distance;
		_this.y = this.Center.y;
		_this.z = this.Center.z + distance;
		var _this1 = this.EmitPosition;
		var degrees = Math.random() * 360.0;
		var center = this.Center;
		degrees *= com_gdx_util_Util.Deg2Rad;
		var cs = Math.cos(degrees);
		var sn = Math.sin(degrees);
		_this1.x -= center.x;
		_this1.z -= center.z;
		var z = _this1.x * sn + _this1.z * cs;
		_this1.x = _this1.x * cs - _this1.z * sn;
		_this1.y = _this1.y;
		_this1.z = z;
		_this1.x += center.x;
		_this1.z += center.z;
		if(this.MaxAngleDegrees != 0.0) {
			var dirMin = this.DirectionMin;
			var dirMax = this.DirectionMax;
			var degrees1 = Math.random() * this.MaxAngleDegrees;
			var center1 = this.Center;
			degrees1 *= com_gdx_util_Util.Deg2Rad;
			var cs1 = Math.cos(degrees1);
			var sn1 = Math.sin(degrees1);
			dirMin.x -= center1.x;
			dirMin.y -= center1.y;
			var y = dirMin.x * sn1 + dirMin.y * cs1;
			dirMin.x = dirMin.x * cs1 - dirMin.y * sn1;
			dirMin.y = y;
			dirMin.z = dirMin.z;
			dirMin.x += center1.x;
			dirMin.y += center1.y;
			var degrees2 = Math.random() * this.MaxAngleDegrees;
			var center2 = this.Center;
			degrees2 *= com_gdx_util_Util.Deg2Rad;
			var cs2 = Math.cos(degrees2);
			var sn2 = Math.sin(degrees2);
			dirMin.z -= center2.z;
			dirMin.y -= center2.y;
			var z1 = dirMin.y * sn2 + dirMin.z * cs2;
			dirMin.x = dirMin.x;
			dirMin.y = dirMin.y * cs2 - dirMin.z * sn2;
			dirMin.z = z1;
			dirMin.z += center2.z;
			dirMin.y += center2.y;
			var degrees3 = Math.random() * this.MaxAngleDegrees;
			var center3 = this.Center;
			degrees3 *= com_gdx_util_Util.Deg2Rad;
			var cs3 = Math.cos(degrees3);
			var sn3 = Math.sin(degrees3);
			dirMin.x -= center3.x;
			dirMin.z -= center3.z;
			var z2 = dirMin.x * sn3 + dirMin.z * cs3;
			dirMin.x = dirMin.x * cs3 - dirMin.z * sn3;
			dirMin.y = dirMin.y;
			dirMin.z = z2;
			dirMin.x += center3.x;
			dirMin.z += center3.z;
			var degrees4 = Math.random() * this.MaxAngleDegrees;
			var center4 = this.Center;
			degrees4 *= com_gdx_util_Util.Deg2Rad;
			var cs4 = Math.cos(degrees4);
			var sn4 = Math.sin(degrees4);
			dirMax.x -= center4.x;
			dirMax.y -= center4.y;
			var y1 = dirMax.x * sn4 + dirMax.y * cs4;
			dirMax.x = dirMax.x * cs4 - dirMax.y * sn4;
			dirMax.y = y1;
			dirMax.z = dirMax.z;
			dirMax.x += center4.x;
			dirMax.y += center4.y;
			var degrees5 = Math.random() * this.MaxAngleDegrees;
			var center5 = this.Center;
			degrees5 *= com_gdx_util_Util.Deg2Rad;
			var cs5 = Math.cos(degrees5);
			var sn5 = Math.sin(degrees5);
			dirMax.z -= center5.z;
			dirMax.y -= center5.y;
			var z3 = dirMax.y * sn5 + dirMax.z * cs5;
			dirMax.x = dirMax.x;
			dirMax.y = dirMax.y * cs5 - dirMax.z * sn5;
			dirMax.z = z3;
			dirMax.z += center5.z;
			dirMax.y += center5.y;
			var degrees6 = Math.random() * this.MaxAngleDegrees;
			var center6 = this.Center;
			degrees6 *= com_gdx_util_Util.Deg2Rad;
			var cs6 = Math.cos(degrees6);
			var sn6 = Math.sin(degrees6);
			dirMax.x -= center6.x;
			dirMax.z -= center6.z;
			var z4 = dirMax.x * sn6 + dirMax.z * cs6;
			dirMax.x = dirMax.x * cs6 - dirMax.z * sn6;
			dirMax.y = dirMax.y;
			dirMax.z = z4;
			dirMax.x += center6.x;
			dirMax.z += center6.z;
			this.DirectionMin = dirMin;
			this.DirectionMax = dirMax;
		}
		return this.EmitPosition;
	}
	,__class__: com_gdx_scene3d_particles_RingEmitter
});
var com_gdx_scene3d_particles_SphereEmitter = function(MaxParticles,center,radius,Parent,id) {
	if(id == null) {
		id = 0;
	}
	if(MaxParticles == null) {
		MaxParticles = 100;
	}
	com_gdx_scene3d_particles_ParticleSystem.call(this,MaxParticles,Parent,id,"SphereEmitter");
	this.Center = center;
	this.Radius = radius;
};
$hxClasses["com.gdx.scene3d.particles.SphereEmitter"] = com_gdx_scene3d_particles_SphereEmitter;
com_gdx_scene3d_particles_SphereEmitter.__name__ = true;
com_gdx_scene3d_particles_SphereEmitter.__super__ = com_gdx_scene3d_particles_ParticleSystem;
com_gdx_scene3d_particles_SphereEmitter.prototype = $extend(com_gdx_scene3d_particles_ParticleSystem.prototype,{
	getStartPosition: function() {
		this.EmitPosition = new com_gdx_math_Vector3(0,0,0);
		var distance = Math.random() * this.Radius;
		var _this = this.EmitPosition;
		_this.x = this.Center.x + distance;
		_this.y = this.Center.y + distance;
		_this.z = this.Center.z + distance;
		var _this1 = this.EmitPosition;
		var degrees = Math.random() * 360.0;
		var center = this.Center;
		degrees *= com_gdx_util_Util.Deg2Rad;
		var cs = Math.cos(degrees);
		var sn = Math.sin(degrees);
		_this1.x -= center.x;
		_this1.y -= center.y;
		var y = _this1.x * sn + _this1.y * cs;
		_this1.x = _this1.x * cs - _this1.y * sn;
		_this1.y = y;
		_this1.z = _this1.z;
		_this1.x += center.x;
		_this1.y += center.y;
		var _this2 = this.EmitPosition;
		var degrees1 = Math.random() * 360.0;
		var center1 = this.Center;
		degrees1 *= com_gdx_util_Util.Deg2Rad;
		var cs1 = Math.cos(degrees1);
		var sn1 = Math.sin(degrees1);
		_this2.z -= center1.z;
		_this2.y -= center1.y;
		var z = _this2.y * sn1 + _this2.z * cs1;
		_this2.x = _this2.x;
		_this2.y = _this2.y * cs1 - _this2.z * sn1;
		_this2.z = z;
		_this2.z += center1.z;
		_this2.y += center1.y;
		var _this3 = this.EmitPosition;
		var degrees2 = Math.random() * 360.0;
		var center2 = this.Center;
		degrees2 *= com_gdx_util_Util.Deg2Rad;
		var cs2 = Math.cos(degrees2);
		var sn2 = Math.sin(degrees2);
		_this3.x -= center2.x;
		_this3.z -= center2.z;
		var z1 = _this3.x * sn2 + _this3.z * cs2;
		_this3.x = _this3.x * cs2 - _this3.z * sn2;
		_this3.y = _this3.y;
		_this3.z = z1;
		_this3.x += center2.x;
		_this3.z += center2.z;
		return this.EmitPosition;
	}
	,__class__: com_gdx_scene3d_particles_SphereEmitter
});
var com_gdx_scene3d_particles_affectors_ParticleAffect = function() {
};
$hxClasses["com.gdx.scene3d.particles.affectors.ParticleAffect"] = com_gdx_scene3d_particles_affectors_ParticleAffect;
com_gdx_scene3d_particles_affectors_ParticleAffect.__name__ = true;
com_gdx_scene3d_particles_affectors_ParticleAffect.prototype = {
	affect: function(now,particlesp) {
	}
	,__class__: com_gdx_scene3d_particles_affectors_ParticleAffect
};
var com_gdx_scene3d_particles_affectors_BounceAffect = function(b,timeForceLost) {
	com_gdx_scene3d_particles_affectors_ParticleAffect.call(this);
	this.bounce = b;
	this.normal = new com_gdx_math_Vector3(0,1,0);
	this.timeForceLost = timeForceLost;
};
$hxClasses["com.gdx.scene3d.particles.affectors.BounceAffect"] = com_gdx_scene3d_particles_affectors_BounceAffect;
com_gdx_scene3d_particles_affectors_BounceAffect.__name__ = true;
com_gdx_scene3d_particles_affectors_BounceAffect.__super__ = com_gdx_scene3d_particles_affectors_ParticleAffect;
com_gdx_scene3d_particles_affectors_BounceAffect.prototype = $extend(com_gdx_scene3d_particles_affectors_ParticleAffect.prototype,{
	affect: function(now,p) {
		var d = (now - p.startTime) / this.timeForceLost;
		if(p.position.y <= 0) {
			p.position.y = 0;
			var _this = this.normal;
			var right = p.velocity;
			var speed = _this.x * right.x + _this.y * right.y + _this.z * right.z;
			p.velocity.x -= d * this.normal.x * speed;
			p.velocity.y -= d * this.normal.y * speed;
			p.velocity.z -= d * this.normal.z * speed;
			p.velocity.x *= this.bounce;
			p.velocity.y *= this.bounce;
			p.velocity.z *= this.bounce;
		}
	}
	,__class__: com_gdx_scene3d_particles_affectors_BounceAffect
});
var com_gdx_scene3d_particles_affectors_ColorMorphAffect = function(ColorList,TimeList,smooth) {
	if(smooth == null) {
		smooth = true;
	}
	com_gdx_scene3d_particles_affectors_ParticleAffect.call(this);
	this.Smooth = smooth;
	this.MaxIndex = 0;
	this.ColorList = ColorList;
	this.TimeList = TimeList;
};
$hxClasses["com.gdx.scene3d.particles.affectors.ColorMorphAffect"] = com_gdx_scene3d_particles_affectors_ColorMorphAffect;
com_gdx_scene3d_particles_affectors_ColorMorphAffect.__name__ = true;
com_gdx_scene3d_particles_affectors_ColorMorphAffect.__super__ = com_gdx_scene3d_particles_affectors_ParticleAffect;
com_gdx_scene3d_particles_affectors_ColorMorphAffect.prototype = $extend(com_gdx_scene3d_particles_affectors_ParticleAffect.prototype,{
	affect: function(now,p) {
		var dt = com_gdx_Gdx.Instance().deltaTime;
		if(this.ColorList.length <= 0) {
			return;
		}
		this.MaxIndex = this.ColorList.length - 1;
		var FinalColor;
		var Age = now - p.startTime;
		if(Age > this.TimeList[this.MaxIndex]) {
			p.color = this.ColorList[this.MaxIndex];
			return;
		}
		var index = this.GetCurrentTimeSlice(Age | 0);
		var LifeTime = this.TimeList[index + 1] - this.TimeList[index];
		if(LifeTime == 0) {
			LifeTime = 1;
		}
		var lerp = (p.startlife - p.life) / p.startlife * dt;
		var percent = 1.0 - Math.abs((Age - this.TimeList[index]) / LifeTime);
		if(index < this.MaxIndex) {
			if(this.Smooth) {
				var start = this.ColorList[index + 1];
				var end = this.ColorList[index];
				var _r = start.r + (end.r - start.r) * lerp;
				var _g = start.g + (end.g - start.g) * lerp;
				var _b = start.b + (end.b - start.b) * lerp;
				FinalColor = new com_gdx_color_Color3(_r,_g,_b);
			} else {
				FinalColor = this.ColorList[index];
			}
			p.color = FinalColor;
		} else {
			p.color = this.ColorList[this.MaxIndex];
		}
	}
	,GetCurrentTimeSlice: function(particleTime) {
		var x = 0;
		var _g1 = 0;
		var _g = this.MaxIndex;
		while(_g1 < _g) {
			var x1 = _g1++;
			if(particleTime < this.TimeList[x1]) {
				return x1;
			}
		}
		return x;
	}
	,__class__: com_gdx_scene3d_particles_affectors_ColorMorphAffect
});
var com_gdx_scene3d_particles_affectors_GravityAffect = function(gravity,timeForceLost) {
	com_gdx_scene3d_particles_affectors_ParticleAffect.call(this);
	this.gravity = gravity;
	this.timeForceLost = timeForceLost;
};
$hxClasses["com.gdx.scene3d.particles.affectors.GravityAffect"] = com_gdx_scene3d_particles_affectors_GravityAffect;
com_gdx_scene3d_particles_affectors_GravityAffect.__name__ = true;
com_gdx_scene3d_particles_affectors_GravityAffect.__super__ = com_gdx_scene3d_particles_affectors_ParticleAffect;
com_gdx_scene3d_particles_affectors_GravityAffect.prototype = $extend(com_gdx_scene3d_particles_affectors_ParticleAffect.prototype,{
	affect: function(now,p) {
		var d = (now - p.startTime) / this.timeForceLost;
		p.velocity.x += this.gravity.x * d;
		p.velocity.y += this.gravity.y * d;
		p.velocity.z += this.gravity.z * d;
	}
	,__class__: com_gdx_scene3d_particles_affectors_GravityAffect
});
var com_gdx_scene3d_particles_affectors_RotateAffect = function(speed,pivot) {
	com_gdx_scene3d_particles_affectors_ParticleAffect.call(this);
	this.speed = speed;
	this.pivot = pivot;
};
$hxClasses["com.gdx.scene3d.particles.affectors.RotateAffect"] = com_gdx_scene3d_particles_affectors_RotateAffect;
com_gdx_scene3d_particles_affectors_RotateAffect.__name__ = true;
com_gdx_scene3d_particles_affectors_RotateAffect.__super__ = com_gdx_scene3d_particles_affectors_ParticleAffect;
com_gdx_scene3d_particles_affectors_RotateAffect.prototype = $extend(com_gdx_scene3d_particles_affectors_ParticleAffect.prototype,{
	affect: function(now,p) {
		var dt = com_gdx_Gdx.Instance().deltaTime;
		if(this.speed.x != 0.0) {
			var _this = p.position;
			var degrees = dt * this.speed.x;
			var center = this.pivot;
			degrees *= com_gdx_util_Util.Deg2Rad;
			var cs = Math.cos(degrees);
			var sn = Math.sin(degrees);
			_this.z -= center.z;
			_this.y -= center.y;
			var z = _this.y * sn + _this.z * cs;
			_this.x = _this.x;
			_this.y = _this.y * cs - _this.z * sn;
			_this.z = z;
			_this.z += center.z;
			_this.y += center.y;
		}
		if(this.speed.y != 0.0) {
			var _this1 = p.position;
			var degrees1 = dt * this.speed.y;
			var center1 = this.pivot;
			degrees1 *= com_gdx_util_Util.Deg2Rad;
			var cs1 = Math.cos(degrees1);
			var sn1 = Math.sin(degrees1);
			_this1.x -= center1.x;
			_this1.z -= center1.z;
			var z1 = _this1.x * sn1 + _this1.z * cs1;
			_this1.x = _this1.x * cs1 - _this1.z * sn1;
			_this1.y = _this1.y;
			_this1.z = z1;
			_this1.x += center1.x;
			_this1.z += center1.z;
		}
		if(this.speed.z != 0.0) {
			var _this2 = p.position;
			var degrees2 = dt * this.speed.z;
			var center2 = this.pivot;
			degrees2 *= com_gdx_util_Util.Deg2Rad;
			var cs2 = Math.cos(degrees2);
			var sn2 = Math.sin(degrees2);
			_this2.x -= center2.x;
			_this2.y -= center2.y;
			var y = _this2.x * sn2 + _this2.y * cs2;
			_this2.x = _this2.x * cs2 - _this2.y * sn2;
			_this2.y = y;
			_this2.z = _this2.z;
			_this2.x += center2.x;
			_this2.y += center2.y;
		}
	}
	,__class__: com_gdx_scene3d_particles_affectors_RotateAffect
});
var com_gdx_scene3d_partition_NodeMeshOctree = function(mesh,minimalPolysPerNode,parent,id,Name) {
	if(Name == null) {
		Name = "OctreeNode";
	}
	if(id == null) {
		id = 0;
	}
	var beginTime = com_gdx_Gdx.Instance().getTimer();
	com_gdx_scene3d_SceneNode.call(this,mesh,parent,id,Name);
	this.MinimalPolysPerNode = minimalPolysPerNode;
	this.NodeCount = 0;
	var maxTriangles = mesh.surfaces.length;
	this.nodesVisible = 0;
	this.Root = new com_gdx_scene3d_partition_SurfaceOctreeNode();
	var _g1 = 0;
	var _g = mesh.surfaces.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.add(mesh.surfaces[i]);
	}
	this.constructOctree(this.Root);
	this.sort(this.Root);
	var endTime = com_gdx_Gdx.Instance().getTimer();
	var timepass = endTime - beginTime;
	haxe_Log.trace("Needed " + timepass + ":ms to create OctTree .(" + this.NodeCount + " nodes, " + mesh.surfaces.length + " polys)",{ fileName : "NodeMeshOctree.hx", lineNumber : 66, className : "com.gdx.scene3d.partition.NodeMeshOctree", methodName : "new"});
};
$hxClasses["com.gdx.scene3d.partition.NodeMeshOctree"] = com_gdx_scene3d_partition_NodeMeshOctree;
com_gdx_scene3d_partition_NodeMeshOctree.__name__ = true;
com_gdx_scene3d_partition_NodeMeshOctree.__super__ = com_gdx_scene3d_SceneNode;
com_gdx_scene3d_partition_NodeMeshOctree.prototype = $extend(com_gdx_scene3d_SceneNode.prototype,{
	add: function(buffer) {
		var node = new com_gdx_scene3d_partition_SurfaceOctreeNode();
		node.buffer = buffer;
		node.materialIndex = buffer.materialIndex;
		var _this = node.Box.minimum;
		var source = buffer.Bounding.boundingBox.minimum;
		_this.x = source.x;
		_this.y = source.y;
		_this.z = source.z;
		var _this1 = node.Box.maximum;
		var source1 = buffer.Bounding.boundingBox.maximum;
		_this1.x = source1.x;
		_this1.y = source1.y;
		_this1.z = source1.z;
		this.Root.nodes.push(node);
	}
	,render: function(camera) {
		this.nodesVisible = 0;
		if(!com_gdx_math_BoundingBox.IsInFrustum(this.Bounding.vectorsWorld,camera.frustumPlanes)) {
			return;
		}
		com_gdx_Gdx.Instance().numMesh++;
		this.mesh.pipline.Bind(camera.viewMatrix,camera.projMatrix,this.local_tform);
		this.renderNodes(this.Root,camera);
	}
	,renderNodes: function(node,cam) {
		if(node == null) {
			return;
		}
		if(!com_gdx_math_BoundingBox.IsInFrustum(node.Box.vectorsWorld,cam.frustumPlanes)) {
			return;
		}
		this.nodesVisible += 1;
		var _g1 = 0;
		var _g = node.nodes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var m = node.nodes[i].buffer;
			if(!m.Bounding.isInFrustum(cam.frustumPlanes)) {
				continue;
			}
			m.render();
		}
		var _g2 = 0;
		while(_g2 < 8) {
			var i1 = _g2++;
			if(node.Child[i1] != null) {
				this.renderNodes(node.Child[i1],cam);
			}
		}
	}
	,debug: function(lines) {
		if(this.Root == null) {
			return;
		}
		if((this.debugFlags & 101) == 101) {
			lines.drawABBox(this.Root.Box,1,1,1);
		}
		this._Debug(this.Root,lines);
	}
	,_Debug: function(node,l) {
		if((this.debugFlags & 110) == 110) {
			l.drawOBBox(node.Box,0,1,0);
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				if(node.Child[i] != null) {
					this._Debug(node.Child[i],l);
				}
			}
		}
	}
	,sort: function(node) {
		this.Root.sortMaterial();
		node.Box.calculate();
		node.Box.update(this.local_tform);
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			if(node.Child[i] != null) {
				this.sort(node.Child[i]);
			}
		}
	}
	,constructOctree: function(node) {
		++this.NodeCount;
		node.Box.reset(node.nodes[0].Box.getCenter());
		var cnt = node.nodes.length;
		var _g1 = 0;
		var _g = cnt;
		while(_g1 < _g) {
			var i = _g1++;
			node.Box.addInternalBox(node.nodes[i].Box);
			this.Bounding.addInternalBox(node.nodes[i].Box);
		}
		node.Box.calculate();
		var middle = node.Box.getCenter();
		var edges = [];
		node.Box.getEdges(edges);
		var box = new com_gdx_math_BoundingBox(com_gdx_math_Vector3.get_zero(),com_gdx_math_Vector3.get_zero());
		if(!node.Box.isEmpty() && (node.nodes.length | 0) > this.MinimalPolysPerNode) {
			var _g2 = 0;
			while(_g2 < 8) {
				var ch = _g2++;
				box.reset(middle);
				box.addInternalVector(edges[ch]);
				node.Child[ch] = new com_gdx_scene3d_partition_SurfaceOctreeNode();
				var i1 = 0;
				while(i1 < node.nodes.length) {
					if(node.nodes[i1].Box.isFullInside(box)) {
						node.Child[ch].addNode(node.nodes[i1]);
						node.nodes.splice(i1,1);
						--i1;
					}
					++i1;
				}
				if(node.Child[ch].nodes.length <= 0) {
					node.Child[ch].nodes = [];
					node.Child[ch].nodes = null;
					node.Child[ch] = null;
				} else {
					this.constructOctree(node.Child[ch]);
				}
			}
		}
	}
	,__class__: com_gdx_scene3d_partition_NodeMeshOctree
});
var com_gdx_scene3d_partition_SurfaceOctreeNode = function() {
	this.materialIndex = -1;
	this.buffer = null;
	this.Child = [];
	this.nodes = [];
	this.Box = new com_gdx_math_BoundingBox(new com_gdx_math_Vector3(999999,999999,999999),new com_gdx_math_Vector3(-999999,-999999,-999999));
};
$hxClasses["com.gdx.scene3d.partition.SurfaceOctreeNode"] = com_gdx_scene3d_partition_SurfaceOctreeNode;
com_gdx_scene3d_partition_SurfaceOctreeNode.__name__ = true;
com_gdx_scene3d_partition_SurfaceOctreeNode.prototype = {
	addNode: function(n) {
		this.nodes.push(n);
	}
	,sortMaterial: function() {
		this.nodes.sort($bind(this,this.SortmaterialIndex));
	}
	,SortmaterialIndex: function(a,b) {
		if(a.materialIndex < b.materialIndex) {
			return -1;
		}
		if(a.materialIndex > b.materialIndex) {
			return 1;
		}
		return 0;
	}
	,__class__: com_gdx_scene3d_partition_SurfaceOctreeNode
};
var com_gdx_scene3d_partition_NodeOctree = function(minimalPolysPerNode,parent,id,Name) {
	if(Name == null) {
		Name = "OctreeNode";
	}
	if(id == null) {
		id = 0;
	}
	com_gdx_scene3d_Node.call(this,parent,Name,id);
	this.MinimalPolysPerNode = minimalPolysPerNode;
	this.NodeCount = 0;
	this.Root = new com_gdx_scene3d_partition_OctreeNode();
};
$hxClasses["com.gdx.scene3d.partition.NodeOctree"] = com_gdx_scene3d_partition_NodeOctree;
com_gdx_scene3d_partition_NodeOctree.__name__ = true;
com_gdx_scene3d_partition_NodeOctree.__super__ = com_gdx_scene3d_Node;
com_gdx_scene3d_partition_NodeOctree.prototype = $extend(com_gdx_scene3d_Node.prototype,{
	addNode: function(n) {
		var node = new com_gdx_scene3d_partition_OctreeNode();
		n.getTransformBox();
		n._cullMeshBuffers = false;
		node.node = n;
		var _this = node.Box.minimum;
		var source = n.Bounding.minimumWorld;
		_this.x = source.x;
		_this.y = source.y;
		_this.z = source.z;
		var _this1 = node.Box.maximum;
		var source1 = n.Bounding.maximumWorld;
		_this1.x = source1.x;
		_this1.y = source1.y;
		_this1.z = source1.z;
		this.Root.nodes.push(node);
		return this.Root.nodes.length - 1;
	}
	,build: function() {
		this.NodeCount = 0;
		this.maxNodes = this.Root.nodes.length;
		var beginTime = com_gdx_Gdx.Instance().getTimer();
		this.constructOctree(this.Root);
		var endTime = com_gdx_Gdx.Instance().getTimer();
		var timepass = endTime - beginTime;
		var tmp = this.Bounding;
		var result = new com_gdx_math_Matrix();
		result.m11 = 1.0;
		result.m12 = 0;
		result.m13 = 0;
		result.m14 = 0;
		result.m21 = 0;
		result.m22 = 1.0;
		result.m23 = 0;
		result.m24 = 0;
		result.m31 = 0;
		result.m32 = 0;
		result.m33 = 1.0;
		result.m34 = 0;
		result.m41 = 0;
		result.m42 = 0;
		result.m43 = 0;
		result.m44 = 1.0;
		tmp.update(result);
		haxe_Log.trace("Needed " + timepass + ":ms to create OctTree .(" + this.NodeCount + " nodes, " + this.maxNodes + " nodes)",{ fileName : "NodeOctree.hx", lineNumber : 75, className : "com.gdx.scene3d.partition.NodeOctree", methodName : "build"});
	}
	,render: function(cam) {
		this.renderNodes(this.Root,cam);
	}
	,renderNodes: function(node,cam) {
		if(node == null) {
			return;
		}
		if(!com_gdx_math_BoundingBox.IsInFrustum(node.Box.vectorsWorld,cam.frustumPlanes)) {
			return;
		}
		var _g1 = 0;
		var _g = node.nodes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var m = node.nodes[i].node;
			m.render(cam);
		}
		var _g2 = 0;
		while(_g2 < 8) {
			var i1 = _g2++;
			if(node.Child[i1] != null) {
				this.renderNodes(node.Child[i1],cam);
			}
		}
	}
	,debug: function(lines) {
		if(this.Root == null) {
			return;
		}
		return;
	}
	,constructOctree: function(node) {
		++this.NodeCount;
		node.Box.reset(node.nodes[0].Box.getCenter());
		var cnt = node.nodes.length;
		var _g1 = 0;
		var _g = cnt;
		while(_g1 < _g) {
			var i = _g1++;
			node.Box.addInternalBox(node.nodes[i].Box);
			this.Bounding.addInternalBox(node.nodes[i].Box);
		}
		node.Box.calculate();
		var node1 = node.Box;
		var result = new com_gdx_math_Matrix();
		result.m11 = 1.0;
		result.m12 = 0;
		result.m13 = 0;
		result.m14 = 0;
		result.m21 = 0;
		result.m22 = 1.0;
		result.m23 = 0;
		result.m24 = 0;
		result.m31 = 0;
		result.m32 = 0;
		result.m33 = 1.0;
		result.m34 = 0;
		result.m41 = 0;
		result.m42 = 0;
		result.m43 = 0;
		result.m44 = 1.0;
		node1.update(result);
		var middle = node.Box.getCenter();
		var edges = [];
		node.Box.getEdges(edges);
		var box = new com_gdx_math_BoundingBox(com_gdx_math_Vector3.get_zero(),com_gdx_math_Vector3.get_zero());
		if(!node.Box.isEmpty() && (node.nodes.length | 0) > this.MinimalPolysPerNode) {
			var _g2 = 0;
			while(_g2 < 8) {
				var ch = _g2++;
				box.reset(middle);
				box.addInternalVector(edges[ch]);
				node.Child[ch] = new com_gdx_scene3d_partition_OctreeNode();
				var i1 = 0;
				while(i1 < node.nodes.length) {
					if(node.nodes[i1].Box.isFullInside(box)) {
						node.Child[ch].nodes.push(node.nodes[i1]);
						node.nodes.splice(i1,1);
						--i1;
					}
					++i1;
				}
				if(node.Child[ch].nodes.length <= 0) {
					node.Child[ch].nodes = [];
					node.Child[ch].nodes = null;
					node.Child[ch] = null;
				} else {
					this.constructOctree(node.Child[ch]);
				}
			}
		}
	}
	,__class__: com_gdx_scene3d_partition_NodeOctree
});
var com_gdx_scene3d_partition_OctreeNode = function() {
	this.node = null;
	this.Child = [];
	this.nodes = [];
	this.Box = new com_gdx_math_BoundingBox(new com_gdx_math_Vector3(999999,999999,999999),new com_gdx_math_Vector3(-999999,-999999,-999999));
};
$hxClasses["com.gdx.scene3d.partition.OctreeNode"] = com_gdx_scene3d_partition_OctreeNode;
com_gdx_scene3d_partition_OctreeNode.__name__ = true;
com_gdx_scene3d_partition_OctreeNode.prototype = {
	__class__: com_gdx_scene3d_partition_OctreeNode
};
var com_gdx_util__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["com.gdx.util._ByteArray.ByteArray_Impl_"] = com_gdx_util__$ByteArray_ByteArray_$Impl_$;
com_gdx_util__$ByteArray_ByteArray_$Impl_$.__name__ = true;
com_gdx_util__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(js_Boot.__instanceof(bytes,com_gdx_util_ByteArrayData)) {
		return bytes;
	} else {
		return com_gdx_util_ByteArrayData.fromBytes(bytes);
	}
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s,encoding) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var com_gdx_util_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	this.__endian = "littleEndian";
	this.position = 0;
};
$hxClasses["com.gdx.util.ByteArrayData"] = com_gdx_util_ByteArrayData;
com_gdx_util_ByteArrayData.__name__ = true;
com_gdx_util_ByteArrayData.fromBytes = function(bytes) {
	var result = new com_gdx_util_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
com_gdx_util_ByteArrayData.__super__ = haxe_io_Bytes;
com_gdx_util_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,readFloat: function() {
		if(this.position + 4 > this.__length) {
			throw new js__$Boot_HaxeError("error");
		}
		this.position += 4;
		return this.getFloat(this.position - 4);
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == "littleEndian") {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedByte: function() {
		if(this.position < this.__length) {
			return this.b[this.position++];
		} else {
			throw new js__$Boot_HaxeError("error");
		}
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == "littleEndian") {
			return (ch2 << 8) + ch1;
		} else {
			return ch1 << 8 | ch2;
		}
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.__length) {
			throw new js__$Boot_HaxeError("error");
		}
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.length = bytes.length;
		this.data = bytes.data;
		this.__length = bytes.length;
	}
	,__class__: com_gdx_util_ByteArrayData
});
var com_gdx_util_Clip = function(x,y,width,height,offsetX,offsetY,name,rotated) {
	if(rotated == null) {
		rotated = false;
	}
	if(name == null) {
		name = "clip";
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.name = name;
	this.rotated = rotated;
};
$hxClasses["com.gdx.util.Clip"] = com_gdx_util_Clip;
com_gdx_util_Clip.__name__ = true;
com_gdx_util_Clip.prototype = {
	set: function(x,y,width,height) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
	}
	,__class__: com_gdx_util_Clip
};
var com_gdx_util_Util = function() { };
$hxClasses["com.gdx.util.Util"] = com_gdx_util_Util;
com_gdx_util_Util.__name__ = true;
com_gdx_util_Util.clamp = function(value,min,max) {
	if(max > min) {
		if(value < min) {
			return min;
		} else if(value > max) {
			return max;
		} else {
			return value;
		}
	} else if(value < max) {
		return max;
	} else if(value > min) {
		return min;
	} else {
		return value;
	}
};
com_gdx_util_Util.getBytes = function(id) {
	var b = lime_utils_Assets.getBytes(id);
	return com_gdx_util__$ByteArray_ByteArray_$Impl_$.fromBytes(b);
};
var com_gdx_util_VertexWight = function(id,w) {
	this.boneId = id;
	this.Wight = w;
};
$hxClasses["com.gdx.util.VertexWight"] = com_gdx_util_VertexWight;
com_gdx_util_VertexWight.__name__ = true;
com_gdx_util_VertexWight.prototype = {
	__class__: com_gdx_util_VertexWight
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = true;
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = true;
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = true;
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = true;
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe_ds_ObjectMap.count;
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = true;
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = true;
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = true;
js_html_compat_DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian ? a : b,littleEndian ? b : a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime__$internal_backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._internal.backend.html5.GameDeviceData"] = lime__$internal_backend_html5_GameDeviceData;
lime__$internal_backend_html5_GameDeviceData.__name__ = true;
lime__$internal_backend_html5_GameDeviceData.prototype = {
	__class__: lime__$internal_backend_html5_GameDeviceData
};
var lime__$internal_backend_html5_HTML5HTTPRequest = function() {
	this.validStatus0 = new EReg("Tizen","gi").match(window.navigator.userAgent);
};
$hxClasses["lime._internal.backend.html5.HTML5HTTPRequest"] = lime__$internal_backend_html5_HTML5HTTPRequest;
lime__$internal_backend_html5_HTML5HTTPRequest.__name__ = true;
lime__$internal_backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
	var promise = new lime_app_Promise();
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise);
	} else {
		lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE"});
	}
	return promise.future;
};
lime__$internal_backend_html5_HTML5HTTPRequest.processQueue = function() {
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit && lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		var queueItem = lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.pop();
		var _g = queueItem.type;
		switch(_g) {
		case "BINARY":
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		case "IMAGE":
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri,queueItem.promise);
			break;
		case "TEXT":
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		default:
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
		}
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) {
		return "";
	} else {
		return hostname;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") {
		switch(protocol) {
		case "ftp:":
			return "21";
		case "gopher:":
			return "70";
		case "http:":
			return "80";
		case "https:":
			return "443";
		case "ws:":
			return "80";
		case "wss:":
			return "443";
		default:
			return "";
		}
	}
	return port;
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") {
		return "http:";
	} else {
		return protocol;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin = function(path) {
	if(lime__$internal_backend_html5_HTML5HTTPRequest.originElement == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.originElement = window.document.createElement("a");
		lime__$internal_backend_html5_HTML5HTTPRequest.originHostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(window.location.hostname);
		lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(window.location.protocol);
		lime__$internal_backend_html5_HTML5HTTPRequest.originPort = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(window.location.port,lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol);
	}
	var a = lime__$internal_backend_html5_HTML5HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") {
		a.href = a.href;
	}
	var hostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(a.hostname);
	var protocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(a.protocol);
	var port = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(a.port,protocol);
	var sameHost = hostname == "" || hostname == lime__$internal_backend_html5_HTML5HTTPRequest.originHostname;
	var samePort = port == "" || port == lime__$internal_backend_html5_HTML5HTTPRequest.originPort;
	if(protocol != "file:" && sameHost) {
		return samePort;
	} else {
		return false;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage = function(uri,promise) {
	var image = new Image();
	if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(uri)) {
		image.crossOrigin = "Anonymous";
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress = 'onprogress' in image;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress || StringTools.startsWith(uri,"data:")) {
		image.addEventListener("load",function(event) {
			var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			buffer.__srcImage = image;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.complete(new lime_graphics_Image(buffer));
		},false);
		image.addEventListener("progress",function(event1) {
			promise.progress(event1.loaded,event1.total);
		},false);
		image.addEventListener("error",function(event2) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.error(event2.detail);
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			var img = new lime_graphics_Image();
			img.__fromBytes(haxe_io_Bytes.ofData(request.response),function(img1) {
				promise.complete(img1);
			});
		};
		request.onerror = function(event3) {
			promise.error(event3.message);
		};
		request.onprogress = function(event4) {
			if(event4.lengthComputable) {
				promise.progress(event4.loaded,event4.total);
			}
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.prototype = {
	init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.parent.method == "POST") {
			this.request.upload.addEventListener("progress",progress,false);
		} else {
			this.request.addEventListener("progress",progress,false);
		}
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var key = this.parent.formData.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				if(query.length > 0) {
					query += "&";
				}
				var query1 = encodeURIComponent(key1) + "=";
				var _this = this.parent.formData;
				var s = Std.string(__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]);
				query += query1 + encodeURIComponent(s);
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var contentType = null;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") {
				contentType = header.value;
			} else {
				this.request.setRequestHeader(header.name,header.value);
			}
		}
		if(this.parent.contentType != null) {
			contentType = this.parent.contentType;
		}
		if(contentType == null) {
			if(this.parent.data != null) {
				contentType = "application/octet-stream";
			} else if(query != "") {
				contentType = "application/x-www-form-urlencoded";
			}
		}
		if(contentType != null) {
			this.request.setRequestHeader("Content-Type",contentType);
		}
		if(this.parent.withCredentials) {
			this.request.withCredentials = true;
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadData(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "BINARY"});
		}
		return promise.future;
	}
	,loadText: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadText(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "TEXT"});
		}
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__loadData: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				var bytes = null;
				if(_gthis.request.responseType == "") {
					if(_gthis.request.responseText != null) {
						bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
					}
				} else if(_gthis.request.response != null) {
					bytes = haxe_io_Bytes.ofData(_gthis.request.response);
				}
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
	}
	,__loadText: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status <= 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
	}
	,__class__: lime__$internal_backend_html5_HTML5HTTPRequest
};
var lime__$internal_backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	this.cursor = lime_ui_MouseCursor.DEFAULT;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
	var attributes = parent.__attributes;
	if(!Object.prototype.hasOwnProperty.call(attributes,"context")) {
		attributes.context = { };
	}
	this.renderType = attributes.context.type;
	if(Object.prototype.hasOwnProperty.call(attributes,"element")) {
		parent.element = attributes.element;
	}
	var element = parent.element;
	if(Object.prototype.hasOwnProperty.call(attributes,"allowHighDPI") && attributes.allowHighDPI && this.renderType != "dom") {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.setWidth = Object.prototype.hasOwnProperty.call(attributes,"width") ? attributes.width : 0;
	this.setHeight = Object.prototype.hasOwnProperty.call(attributes,"height") ? attributes.height : 0;
	parent.__width = this.setWidth;
	parent.__height = this.setHeight;
	parent.id = lime__$internal_backend_html5_HTML5Window.windowID++;
	if(js_Boot.__instanceof(element,HTMLCanvasElement)) {
		this.canvas = element;
	} else if(this.renderType == "dom") {
		this.div = window.document.createElement("div");
	} else {
		this.canvas = window.document.createElement("canvas");
	}
	if(this.canvas != null) {
		var style = this.canvas.style;
		style.setProperty("-webkit-transform","translateZ(0)",null);
		style.setProperty("transform","translateZ(0)",null);
	} else if(this.div != null) {
		var style1 = this.div.style;
		style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
		style1.setProperty("transform","translate3D(0,0,0)",null);
		style1.position = "relative";
		style1.overflow = "hidden";
		style1.setProperty("-webkit-user-select","none",null);
		style1.setProperty("-moz-user-select","none",null);
		style1.setProperty("-ms-user-select","none",null);
		style1.setProperty("-o-user-select","none",null);
	}
	if(parent.__width == 0 && parent.__height == 0) {
		if(element != null) {
			parent.__width = element.clientWidth;
			parent.__height = element.clientHeight;
		} else {
			parent.__width = window.innerWidth;
			parent.__height = window.innerHeight;
		}
		this.cacheElementWidth = parent.__width;
		this.cacheElementHeight = parent.__height;
		this.resizeElement = true;
	}
	if(this.canvas != null) {
		this.canvas.width = Math.round(parent.__width * this.scale);
		this.canvas.height = Math.round(parent.__height * this.scale);
		this.canvas.style.width = parent.__width + "px";
		this.canvas.style.height = parent.__height + "px";
	} else {
		this.div.style.width = parent.__width + "px";
		this.div.style.height = parent.__height + "px";
	}
	if(Object.prototype.hasOwnProperty.call(attributes,"resizable") && attributes.resizable || !Object.prototype.hasOwnProperty.call(attributes,"width") && this.setWidth == 0 && this.setHeight == 0) {
		parent.__resizable = true;
	}
	this.updateSize();
	if(element != null) {
		if(this.canvas != null) {
			if(element != this.canvas) {
				element.appendChild(this.canvas);
			}
		} else {
			element.appendChild(this.div);
		}
		var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
		}
		window.document.addEventListener("dragstart",function(e) {
			if(e.target.nodeName.toLowerCase() == "img" && e.cancelable) {
				e.preventDefault();
				return false;
			}
			return true;
		},false);
		element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
		element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
		element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
	}
	this.createContext();
	if(parent.context.type == "webgl") {
		this.canvas.addEventListener("webglcontextlost",$bind(this,this.handleContextEvent),false);
		this.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleContextEvent),false);
	}
};
$hxClasses["lime._internal.backend.html5.HTML5Window"] = lime__$internal_backend_html5_HTML5Window;
lime__$internal_backend_html5_HTML5Window.__name__ = true;
lime__$internal_backend_html5_HTML5Window.prototype = {
	close: function() {
		this.parent.application.__removeWindow(this.parent);
	}
	,createContext: function() {
		var context = new lime_graphics_RenderContext();
		var contextAttributes = this.parent.__attributes.context;
		context.window = this.parent;
		context.attributes = contextAttributes;
		if(this.div != null) {
			context.dom = this.div;
			context.type = "dom";
			context.version = "";
		} else if(this.canvas != null) {
			var webgl = null;
			var forceCanvas = this.renderType == "canvas";
			var forceWebGL = this.renderType == "opengl" || this.renderType == "opengles" || this.renderType == "webgl";
			var allowWebGL2 = !Object.prototype.hasOwnProperty.call(contextAttributes,"version") || contextAttributes.version != "1";
			var isWebGL2 = false;
			if(forceWebGL || !forceCanvas && (!Object.prototype.hasOwnProperty.call(contextAttributes,"hardware") || contextAttributes.hardware)) {
				var transparentBackground = Object.prototype.hasOwnProperty.call(contextAttributes,"background") && contextAttributes.background == null;
				var colorDepth = Object.prototype.hasOwnProperty.call(contextAttributes,"colorDepth") ? contextAttributes.colorDepth : 16;
				var options = Object.prototype.hasOwnProperty.call(contextAttributes,"antialiasing");
				var options1 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : Object.prototype.hasOwnProperty.call(contextAttributes,"depth") ? contextAttributes.depth : true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call(contextAttributes,"stencil") && contextAttributes.stencil, preserveDrawingBuffer : false};
				var glContextType = ["webgl","experimental-webgl"];
				if(allowWebGL2) {
					glContextType.unshift("webgl2");
				}
				var _g = 0;
				while(_g < glContextType.length) {
					var name = glContextType[_g];
					++_g;
					webgl = this.canvas.getContext(name,options1);
					if(webgl != null && name == "webgl2") {
						isWebGL2 = true;
					}
					if(webgl != null) {
						break;
					}
				}
			}
			if(webgl == null) {
				context.canvas2D = this.canvas.getContext("2d");
				context.type = "canvas";
				context.version = "";
			} else {
				context.webgl = lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.fromWebGL2RenderContext(webgl);
				if(isWebGL2) {
					context.webgl2 = webgl;
				}
				if(lime_graphics_opengl_GL.context == null) {
					lime_graphics_opengl_GL.context = webgl;
					lime_graphics_opengl_GL.type = "webgl";
					lime_graphics_opengl_GL.version = isWebGL2 ? 2 : 1;
				}
				context.type = "webgl";
				context.version = isWebGL2 ? "2" : "1";
			}
		}
		this.parent.context = context;
	}
	,handleContextEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			if(event.cancelable) {
				event.preventDefault();
			}
			var tmp = lime_graphics_opengl_GL.context != null;
			this.parent.context = null;
			this.parent.onRenderContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onRenderContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,handleContextMenuEvent: function(event) {
		if(this.parent.onMouseUp.canceled && event.cancelable) {
			event.preventDefault();
		}
	}
	,handleGamepadEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.parent.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.parent.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				if(event.currentTarget == this.parent.element) {
					window.addEventListener("mouseup",$bind(this,this.handleMouseEvent));
				}
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.parent.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.parent.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if((this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				window.removeEventListener("mouseup",$bind(this,this.handleMouseEvent));
				if(event.currentTarget == this.parent.element) {
					event.stopPropagation();
				}
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			var deltaMode;
			var _g1 = event.deltaMode;
			switch(_g1) {
			case 0:
				deltaMode = lime_ui_MouseWheelMode.PIXELS;
				break;
			case 1:
				deltaMode = lime_ui_MouseWheelMode.LINES;
				break;
			case 2:
				deltaMode = lime_ui_MouseWheelMode.PAGES;
				break;
			default:
				deltaMode = lime_ui_MouseWheelMode.UNKNOWN;
			}
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY,deltaMode);
			if(this.parent.onMouseWheel.canceled && event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handleResizeEvent: function(event) {
		this.primaryTouch = null;
		this.updateSize();
	}
	,handleTouchEvent: function(event) {
		if(event.cancelable) {
			event.preventDefault();
		}
		var rect = null;
		if(this.parent.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.parent.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var touch;
		var x;
		var y;
		var cacheX;
		var cacheY;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			x = 0.0;
			y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			if(event.type == "touchstart") {
				touch = this.unusedTouchesPool.pop();
				if(touch == null) {
					touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch;
				}
				if(touch == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
			} else {
				touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					cacheX = touch.x;
					cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					var _g2 = event.type;
					switch(_g2) {
					case "touchcancel":
						lime_ui_Touch.onCancel.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.primaryTouch = null;
						}
						break;
					case "touchend":
						lime_ui_Touch.onEnd.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseUp.dispatch(x,y,0);
							this.primaryTouch = null;
						}
						break;
					case "touchmove":
						lime_ui_Touch.onMove.dispatch(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseMove.dispatch(x,y);
						}
						break;
					default:
					}
				}
			}
		}
	}
	,updateSize: function() {
		if(!this.parent.__resizable) {
			return;
		}
		var elementWidth;
		var elementHeight;
		if(this.parent.element != null) {
			elementWidth = this.parent.element.clientWidth;
			elementHeight = this.parent.element.clientHeight;
		} else {
			elementWidth = window.innerWidth;
			elementHeight = window.innerHeight;
		}
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			var stretch = this.resizeElement || this.setWidth == 0 && this.setHeight == 0;
			if(this.parent.element != null && (this.div == null || this.div != null && stretch)) {
				if(stretch) {
					if(this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
						this.parent.__width = elementWidth;
						this.parent.__height = elementHeight;
						if(this.canvas != null) {
							if(this.parent.element != this.canvas) {
								this.canvas.width = Math.round(elementWidth * this.scale);
								this.canvas.height = Math.round(elementHeight * this.scale);
								this.canvas.style.width = elementWidth + "px";
								this.canvas.style.height = elementHeight + "px";
							}
						} else {
							this.div.style.width = elementWidth + "px";
							this.div.style.height = elementHeight + "px";
						}
						this.parent.onResize.dispatch(elementWidth,elementHeight);
					}
				} else {
					var scaleX = this.setWidth != 0 ? elementWidth / this.setWidth : 1;
					var scaleY = this.setHeight != 0 ? elementHeight / this.setHeight : 1;
					var targetWidth = elementWidth;
					var targetHeight = elementHeight;
					var marginLeft = 0;
					var marginTop = 0;
					if(scaleX < scaleY) {
						targetHeight = Math.floor(this.setHeight * scaleX);
						marginTop = Math.floor((elementHeight - targetHeight) / 2);
					} else {
						targetWidth = Math.floor(this.setWidth * scaleY);
						marginLeft = Math.floor((elementWidth - targetWidth) / 2);
					}
					if(this.canvas != null) {
						if(this.parent.element != this.canvas) {
							this.canvas.style.width = targetWidth + "px";
							this.canvas.style.height = targetHeight + "px";
							this.canvas.style.marginLeft = marginLeft + "px";
							this.canvas.style.marginTop = marginTop + "px";
						}
					} else {
						this.div.style.width = targetWidth + "px";
						this.div.style.height = targetHeight + "px";
						this.div.style.marginLeft = marginLeft + "px";
						this.div.style.marginTop = marginTop + "px";
					}
				}
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Window
};
var lime__$internal_graphics_ImageCanvasUtil = function() { };
$hxClasses["lime._internal.graphics.ImageCanvasUtil"] = lime__$internal_graphics_ImageCanvasUtil;
lime__$internal_graphics_ImageCanvasUtil.__name__ = true;
lime__$internal_graphics_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime__$internal_graphics_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else {
				this1 = null;
			}
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime__$internal_graphics_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime__$internal_graphics_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime__$internal_graphics_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) {
			a = color >> 24 & 255;
		} else {
			a = 255;
		}
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) {
			a = color & 255;
		} else {
			a = 255;
		}
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	if(a < 255) {
		image.buffer.__srcContext.clearRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	if(a > 0) {
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel32(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
	buffer.__srcImageData = null;
	buffer.data = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel32(image,x,y,color,format);
};
var lime__$internal_graphics_ImageDataUtil = function() { };
$hxClasses["lime._internal.graphics.ImageDataUtil"] = lime__$internal_graphics_ImageDataUtil;
lime__$internal_graphics_ImageDataUtil.__name__ = true;
lime__$internal_graphics_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba1;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			var offset = row + x * 4;
			switch(format1) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var premultiplied = image.buffer.premultiplied;
	switch(image.buffer.format) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this2 = 0;
		var bgra = this2;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) {
		return;
	}
	var elements = newWidth * newHeight * 4;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else {
		this1 = null;
	}
	var newBuffer = new lime_graphics_ImageBuffer(this1,newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g1 = 0;
	var _g = newHeight;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = newWidth;
		while(_g3 < _g2) {
			var x = _g3++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) {
				sourceIndexX = sourceIndex + 4;
			} else {
				sourceIndexX = sourceIndex;
			}
			if(sourceY < imageHeight - 1) {
				sourceIndexY = sourceIndex + imageWidth * 4;
			} else {
				sourceIndexY = sourceIndex;
			}
			if(sourceIndexX != sourceIndex) {
				sourceIndexXY = sourceIndexY + 4;
			} else {
				sourceIndexXY = sourceIndexY;
			}
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio | 0;
			newData[index + 1] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio | 0;
			newData[index + 2] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) {
				newData[index + 3] = 0;
			} else {
				newData[index + 3] = data[sourceIndex + 3];
			}
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
var lime__$internal_graphics__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.__update();
};
$hxClasses["lime._internal.graphics._ImageDataUtil.ImageDataView"] = lime__$internal_graphics__$ImageDataUtil_ImageDataView;
lime__$internal_graphics__$ImageDataUtil_ImageDataView.__name__ = true;
lime__$internal_graphics__$ImageDataUtil_ImageDataView.prototype = {
	__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,__class__: lime__$internal_graphics__$ImageDataUtil_ImageDataView
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( e ) {
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.error = e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = true;
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.isError = true;
			future.error = this.error;
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = true;
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = true;
lime_app_Promise.prototype = {
	complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,__class__: lime_app_Promise
};
var lime_app__$Event_$Float_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Float_$Void.__name__ = true;
lime_app__$Event_$Float_$Float_$Float_$Void.prototype = {
	remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = true;
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = true;
lime_app__$Event_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseButton_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.__name__ = true;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.__name__ = true;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = true;
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = true;
lime_app__$Event_$Int_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = true;
lime_app__$Event_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = true;
lime_app__$Event_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = true;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = true;
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = true;
lime_app__$Event_$String_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = true;
lime_app__$Event_$Void_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$haxe_$Function_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_haxe_Function_Void"] = lime_app__$Event_$haxe_$Function_$Void;
lime_app__$Event_$haxe_$Function_$Void.__name__ = true;
lime_app__$Event_$haxe_$Function_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$haxe_$Function_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = true;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = true;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = true;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = true;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = true;
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = true;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = true;
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$lime_$ui_$Window_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Window_Void"] = lime_app__$Event_$lime_$ui_$Window_$Void;
lime_app__$Event_$lime_$ui_$Window_$Void.__name__ = true;
lime_app__$Event_$lime_$ui_$Window_$Void.prototype = {
	remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Window_$Void
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		type = lime_graphics_ImageType.CANVAS;
	}
	this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime__$internal_graphics_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = true;
lime_graphics_Image.fromBase64 = function(base64,type) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromBytes(bytes)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromFile(path)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	if(base64 == null || type == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + base64);
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) {
		return lime_app_Future.withValue(null);
	}
	var type = "";
	if(lime_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(lime_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(lime_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else if(lime_graphics_Image.__isWebP(bytes)) {
		type = "image/webp";
	} else {
		return lime_app_Future.withValue(null);
	}
	return lime_graphics_Image.loadFromBase64(lime_graphics_Image.__base64Encode(bytes),type);
};
lime_graphics_Image.loadFromFile = function(path) {
	if(path == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage(path);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) {
		lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	}
	return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes == null || bytes.length < 6) {
		return false;
	}
	var header = bytes.getString(0,6);
	if(header != "GIF87a") {
		return header == "GIF89a";
	} else {
		return true;
	}
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes == null || bytes.length < 4) {
		return false;
	}
	if(bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255) {
		return bytes.b[bytes.length - 1] == 217;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes == null || bytes.length < 8) {
		return false;
	}
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isWebP = function(bytes) {
	if(bytes == null || bytes.length < 16) {
		return false;
	}
	if(bytes.getString(0,4) == "RIFF") {
		return bytes.getString(8,4) == "WEBP";
	} else {
		return false;
	}
};
lime_graphics_Image.prototype = {
	fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime__$internal_graphics_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this2 = 0;
					var bgra = this2;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this3 = 0;
					var rgba2 = this3;
					rgba2 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba3 = rgba2;
					return rgba3;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime__$internal_graphics_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			return false;
		}
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
		return true;
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(path)) {
			image.crossOrigin = "Anonymous";
		}
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_1) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
		var image1 = image.complete;
		return true;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = true;
lime_graphics_ImageBuffer.prototype = {
	get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) {
			this.__srcImage = value;
		} else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
};
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : true, __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = function() {
};
$hxClasses["lime.graphics.RenderContext"] = lime_graphics_RenderContext;
lime_graphics_RenderContext.__name__ = true;
lime_graphics_RenderContext.prototype = {
	__class__: lime_graphics_RenderContext
};
var lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._WebGLRenderContext.WebGLRenderContext_Impl_"] = lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$;
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.__name__ = true;
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData = function(this1,target,srcData,usage) {
	this1.bufferData(target,srcData,usage);
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData) {
	if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv = function(this1,location,transpose,v) {
	this1.uniformMatrix4fv(location,transpose,v);
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.fromWebGL2RenderContext = function(gl) {
	return gl;
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = true;
var lime_math_Matrix3 = function() { };
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = true;
var lime_math__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math._RGBA.RGBA_Impl_"] = lime_math__$RGBA_RGBA_$Impl_$;
lime_math__$RGBA_RGBA_$Impl_$.__name__ = true;
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = true;
lime_math_Rectangle.prototype = {
	offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,__class__: lime_math_Rectangle
};
var lime_math_Vector2 = function() { };
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = true;
lime_math_Vector2.prototype = {
	__class__: lime_math_Vector2
};
var lime_math_Vector4 = function() { };
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = true;
lime_math_Vector4.prototype = {
	__class__: lime_math_Vector4
};
var lime_media_AudioBuffer = function() {
};
$hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
lime_media_AudioBuffer.__name__ = true;
lime_media_AudioBuffer.fromBase64 = function(base64String) {
	if(base64String == null) {
		return null;
	}
	if(base64String.indexOf(",") == -1) {
		base64String = "data:" + lime_media_AudioBuffer.__getCodec(haxe_crypto_Base64.decode(base64String)) + ";base64," + base64String;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : [base64String], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : ["data:" + lime_media_AudioBuffer.__getCodec(bytes) + ";base64," + haxe_crypto_Base64.encode(bytes)], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path], preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths, preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromVorbisFile = function(vorbisFile) {
	return null;
};
lime_media_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function(id,msg) {
				promise.error(msg);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.__getCodec = function(bytes) {
	var signature = bytes.getString(0,4);
	switch(signature) {
	case "OggS":
		return "audio/ogg";
	case "RIFF":
		if(bytes.getString(8,4) == "WAVE") {
			return "audio/wav";
		} else {
			var _g = bytes.b[2];
			var _g1 = bytes.b[1];
			var _g2 = bytes.b[0];
			switch(_g2) {
			case 73:
				if(_g1 == 68) {
					if(_g == 51) {
						return "audio/mp3";
					}
				}
				break;
			case 255:
				switch(_g1) {
				case 243:case 250:case 251:
					return "audio/mp3";
				default:
				}
				break;
			default:
			}
		}
		break;
	case "fLaC":
		return "audio/flac";
	default:
		var _g3 = bytes.b[2];
		var _g11 = bytes.b[1];
		var _g21 = bytes.b[0];
		switch(_g21) {
		case 73:
			if(_g11 == 68) {
				if(_g3 == 51) {
					return "audio/mp3";
				}
			}
			break;
		case 255:
			switch(_g11) {
			case 243:case 250:case 251:
				return "audio/mp3";
			default:
			}
			break;
		default:
		}
	}
	lime_utils_Log.error("Unsupported sound format",{ fileName : "AudioBuffer.hx", lineNumber : 443, className : "lime.media.AudioBuffer", methodName : "__getCodec"});
	return null;
};
lime_media_AudioBuffer.prototype = {
	set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_media_AudioBuffer
};
var lime_media_AudioContext = function(type) {
	if(type != "custom") {
		if(type == null || type == "web") {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				this.web = new window.AudioContext ();
				this.type = "web";
			} catch( e ) {
			}
		}
		if(this.web == null && type != "web") {
			this.html5 = new lime_media_HTML5AudioContext();
			this.type = "html5";
		}
	} else {
		this.type = "custom";
	}
};
$hxClasses["lime.media.AudioContext"] = lime_media_AudioContext;
lime_media_AudioContext.__name__ = true;
lime_media_AudioContext.prototype = {
	__class__: lime_media_AudioContext
};
var lime_media_AudioManager = function() { };
$hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
lime_media_AudioManager.__name__ = true;
lime_media_AudioManager.init = function(context) {
	if(lime_media_AudioManager.context == null) {
		if(context == null) {
			lime_media_AudioManager.context = new lime_media_AudioContext();
			context = lime_media_AudioManager.context;
			if(context.type == "openal") {
				var alc = context.openal;
				var device = alc.openDevice();
				var ctx = alc.createContext(device);
				alc.makeContextCurrent(ctx);
				alc.processContext(ctx);
			}
		}
		lime_media_AudioManager.context = context;
	}
};
var lime_media_HTML5AudioContext = function() {
};
$hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
lime_media_HTML5AudioContext.__name__ = true;
lime_media_HTML5AudioContext.prototype = {
	__class__: lime_media_HTML5AudioContext
};
var lime_media_OpenALAudioContext = function() {
};
$hxClasses["lime.media.OpenALAudioContext"] = lime_media_OpenALAudioContext;
lime_media_OpenALAudioContext.__name__ = true;
lime_media_OpenALAudioContext.prototype = {
	createContext: function(device,attrlist) {
		return lime_media_openal_ALC.createContext(device,attrlist);
	}
	,makeContextCurrent: function(context) {
		return lime_media_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_media_openal_ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime_media_openal_ALC.processContext(context);
	}
	,__class__: lime_media_OpenALAudioContext
};
var lime_media_openal_ALC = function() { };
$hxClasses["lime.media.openal.ALC"] = lime_media_openal_ALC;
lime_media_openal_ALC.__name__ = true;
lime_media_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_media_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_media_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_media_openal_ALC.processContext = function(context) {
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = true;
lime_net__$IHTTPRequest.prototype = {
	__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
	this.__backend = new lime__$internal_backend_html5_HTML5HTTPRequest();
	this.__backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = true;
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = true;
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = true;
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = true;
lime_net_HTTPRequestHeader.prototype = {
	__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = true;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_system_DisplayMode = function() { };
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = true;
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : true, __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_Sensor = function(type,id) {
	this.onUpdate = new lime_app__$Event_$Float_$Float_$Float_$Void();
	this.type = type;
	this.id = id;
};
$hxClasses["lime.system.Sensor"] = lime_system_Sensor;
lime_system_Sensor.__name__ = true;
lime_system_Sensor.registerSensor = function(type,id) {
	var sensor = new lime_system_Sensor(type,id);
	lime_system_Sensor.sensors.push(sensor);
	lime_system_Sensor.sensorByID.h[id] = sensor;
	return sensor;
};
lime_system_Sensor.prototype = {
	__class__: lime_system_Sensor
};
var lime_system_SensorType = $hxClasses["lime.system.SensorType"] = { __ename__ : true, __constructs__ : ["ACCELEROMETER"] };
lime_system_SensorType.ACCELEROMETER = ["ACCELEROMETER",0];
lime_system_SensorType.ACCELEROMETER.toString = $estr;
lime_system_SensorType.ACCELEROMETER.__enum__ = lime_system_SensorType;
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = true;
lime_system_System.embed = $hx_exports["lime"]["embed"] = function(projectName,element,width,height,config) {
	if(lime_system_System.__applicationEntryPoint == null) {
		return;
	}
	var _this = lime_system_System.__applicationEntryPoint;
	if(__map_reserved[projectName] != null ? _this.existsReserved(projectName) : _this.h.hasOwnProperty(projectName)) {
		var htmlElement = null;
		if(typeof(element) == "string") {
			htmlElement = window.document.getElementById(element);
		} else if(element == null) {
			htmlElement = window.document.createElement("div");
		} else {
			htmlElement = element;
		}
		if(htmlElement == null) {
			window.console.log("[lime.embed] ERROR: Cannot find target element: " + Std.string(element));
			return;
		}
		if(width == null) {
			width = 0;
		}
		if(height == null) {
			height = 0;
		}
		if(config == null) {
			config = { };
		}
		if(Object.prototype.hasOwnProperty.call(config,"background") && typeof(config.background) == "string") {
			var background = StringTools.replace(Std.string(config.background),"#","");
			if(background.indexOf("0x") > -1) {
				config.background = Std.parseInt(background);
			} else {
				config.background = Std.parseInt("0x" + background);
			}
		}
		config.element = htmlElement;
		config.width = width;
		config.height = height;
		var _this1 = lime_system_System.__applicationEntryPoint;
		(__map_reserved[projectName] != null ? _this1.getReserved(projectName) : _this1.h[projectName])(config);
	}
};
lime_system_System.exit = function(code) {
};
lime_system_System.__registerEntryPoint = function(projectName,entryPoint) {
	if(lime_system_System.__applicationEntryPoint == null) {
		lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap();
	}
	var _this = lime_system_System.__applicationEntryPoint;
	if(__map_reserved[projectName] != null) {
		_this.setReserved(projectName,entryPoint);
	} else {
		_this.h[projectName] = entryPoint;
	}
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onRun = new lime_app__$Event_$haxe_$Function_$Void();
	this.onError = new lime_app__$Event_$haxe_$Function_$Void();
	this.onComplete = new lime_app__$Event_$haxe_$Function_$Void();
	this.doWork = new lime_app__$Event_$haxe_$Function_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = true;
lime_system_ThreadPool.prototype = {
	queue: function(state) {
		this.runWork(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,runWork: function(state) {
		this.onRun.dispatch(state);
		this.doWork.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	this.ascender = 0;
	this.descender = 0;
	this.height = 0;
	this.numGlyphs = 0;
	this.underlinePosition = 0;
	this.underlineThickness = 0;
	this.unitsPerEM = 0;
	if(this.__fontID != null) {
		if(lime_utils_Assets.isLocal(this.__fontID)) {
			this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
		}
	} else if(this.__fontPath != null) {
		this.__fromFile(this.__fontPath);
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = true;
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var userAgent = window.navigator.userAgent.toLowerCase();
		var isSafari = userAgent.indexOf(" safari/") >= 0 && userAgent.indexOf(" chrome/") < 0;
		var isUIWebView = new EReg("(iPhone|iPod|iPad).*AppleWebKit(?!.*Version)","i").match(userAgent);
		if(!isSafari && !isUIWebView && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) {
			window.document.fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_1) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "Font.hx", lineNumber : 540, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				if(node1.offsetWidth == width1) {
					loaded = node2.offsetWidth != width2;
				} else {
					loaded = true;
				}
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "Font.hx", lineNumber : 576, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__class__: lime_text_Font
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = true;
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	__class__: lime_ui_Gamepad
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = true;
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	__class__: lime_ui_Joystick
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : true, __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_MouseWheelMode = $hxClasses["lime.ui.MouseWheelMode"] = { __ename__ : true, __constructs__ : ["PIXELS","LINES","PAGES","UNKNOWN"] };
lime_ui_MouseWheelMode.PIXELS = ["PIXELS",0];
lime_ui_MouseWheelMode.PIXELS.toString = $estr;
lime_ui_MouseWheelMode.PIXELS.__enum__ = lime_ui_MouseWheelMode;
lime_ui_MouseWheelMode.LINES = ["LINES",1];
lime_ui_MouseWheelMode.LINES.toString = $estr;
lime_ui_MouseWheelMode.LINES.__enum__ = lime_ui_MouseWheelMode;
lime_ui_MouseWheelMode.PAGES = ["PAGES",2];
lime_ui_MouseWheelMode.PAGES.toString = $estr;
lime_ui_MouseWheelMode.PAGES.__enum__ = lime_ui_MouseWheelMode;
lime_ui_MouseWheelMode.UNKNOWN = ["UNKNOWN",3];
lime_ui_MouseWheelMode.UNKNOWN.toString = $estr;
lime_ui_MouseWheelMode.UNKNOWN.__enum__ = lime_ui_MouseWheelMode;
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = true;
lime_ui_Touch.prototype = {
	__class__: lime_ui_Touch
};
var lime_ui_Window = function(application,attributes) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onRenderContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onRenderContextLost = new lime_app__$Event_$Void_$Void();
	this.onRender = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onExpose = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.application = application;
	this.__attributes = attributes != null ? attributes : { };
	if(Object.prototype.hasOwnProperty.call(this.__attributes,"parameters")) {
		this.parameters = this.__attributes.parameters;
	}
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	this.__backend = new lime__$internal_backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = true;
lime_ui_Window.prototype = {
	close: function() {
		this.__backend.close();
	}
	,__class__: lime_ui_Window
};
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 589513;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = true;
lime_utils_AssetCache.prototype = {
	exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			var _this = this.image;
			if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			var _this1 = this.font;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			var _this2 = this.audio;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				return true;
			}
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			this.font.set(id,asset);
			break;
		case "IMAGE":
			if(!js_Boot.__instanceof(asset,lime_graphics_Image)) {
				throw new js__$Boot_HaxeError("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			}
			this.image.set(id,asset);
			break;
		case "MUSIC":case "SOUND":
			if(!js_Boot.__instanceof(asset,lime_media_AudioBuffer)) {
				throw new js__$Boot_HaxeError("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			}
			this.audio.set(id,asset);
			break;
		default:
			throw new js__$Boot_HaxeError(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.audio.remove(key1);
				}
			}
			var keys1 = this.font.keys();
			var key2 = keys1;
			while(key2.hasNext()) {
				var key3 = key2.next();
				if(StringTools.startsWith(key3,prefix)) {
					this.font.remove(key3);
				}
			}
			var keys2 = this.image.keys();
			var key4 = keys2;
			while(key4.hasNext()) {
				var key5 = key4.next();
				if(StringTools.startsWith(key5,prefix)) {
					this.image.remove(key5);
				}
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.sizes = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.pathGroups = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = true;
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	if(manifest == null) {
		return null;
	}
	var library = null;
	if(manifest.libraryType == null) {
		library = new lime_utils_AssetLibrary();
	} else {
		var libraryClass = Type.resolveClass(manifest.libraryType);
		if(libraryClass != null) {
			library = Type.createInstance(libraryClass,manifest.libraryArgs);
		} else {
			lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "AssetLibrary.hx", lineNumber : 140, className : "lime.utils.AssetLibrary", methodName : "fromManifest"});
			return null;
		}
	}
	library.__fromManifest(manifest);
	return library;
};
lime_utils_AssetLibrary.prototype = {
	exists: function(id,type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var _this = this.types;
		var assetType = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		case "TEXT":
			return this.getText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , haxe_io_Bytes));
			} else {
				var _this4 = this.paths;
				return lime_media_AudioBuffer.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.cachedText;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.cachedText;
				var bytes = lime_utils__$Bytes_Bytes_$Impl_$.ofString(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id]);
				var _this4 = this.cachedBytes;
				if(__map_reserved[id] != null) {
					_this4.setReserved(id,bytes);
				} else {
					_this4.h[id] = bytes;
				}
				return bytes;
			} else {
				var _this5 = this.classTypes;
				if(__map_reserved[id] != null ? _this5.existsReserved(id) : _this5.h.hasOwnProperty(id)) {
					var _this6 = this.classTypes;
					return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this6.getReserved(id) : _this6.h[id],[]) , haxe_io_Bytes);
				} else {
					var _this7 = this.paths;
					return lime_utils__$Bytes_Bytes_$Impl_$.fromFile(__map_reserved[id] != null ? _this7.getReserved(id) : _this7.h[id]);
				}
			}
		}
	}
	,getFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , lime_text_Font);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getImage: function(id) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , lime_graphics_Image);
			} else {
				var _this4 = this.paths;
				return lime_graphics_Image.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return null;
			} else {
				return bytes.getString(0,bytes.length);
			}
		}
	}
	,isLocal: function(id,type) {
		var _this = this.classTypes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			return true;
		}
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		switch(requestedType) {
		case "FONT":
			return this.cachedFonts.exists(id);
		case "IMAGE":
			return this.cachedImages.exists(id);
		case "MUSIC":case "SOUND":
			return this.cachedAudioBuffers.exists(id);
		default:
			if(!this.cachedBytes.exists(id)) {
				return this.cachedText.exists(id);
			} else {
				return true;
			}
		}
	}
	,load: function() {
		if(this.loaded) {
			return lime_app_Future.withValue(this);
		}
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.bytesLoadedCache = new haxe_ds_StringMap();
			this.assetsLoaded = 0;
			this.assetsTotal = 1;
			var id = this.preload.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				var _this = this.preload;
				if(!(__map_reserved[id1] != null ? _this.getReserved(id1) : _this.h[id1])) {
					continue;
				}
				var _this1 = this.types;
				lime_utils_Log.verbose("Preloading asset: " + id1 + " [" + (__map_reserved[id1] != null ? _this1.getReserved(id1) : _this1.h[id1]) + "]",{ fileName : "AssetLibrary.hx", lineNumber : 452, className : "lime.utils.AssetLibrary", methodName : "load"});
				var _g = this.types.get(id1);
				if(_g != null) {
					switch(_g) {
					case "BINARY":
						this.assetsTotal++;
						var future = this.loadBytes(id1);
						future.onProgress((function(id2,f) {
							return function(a1,a2) {
								f[0](id2[0],a1,a2);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future.onError((function(id3,f1) {
							return function(a11) {
								f1[0](id3[0],a11);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future.onComplete((function(id4,f2) {
							return function(a12) {
								f2[0](id4[0],a12);
							};
						})([id1],[$bind(this,this.loadBytes_onComplete)]));
						break;
					case "FONT":
						this.assetsTotal++;
						var future1 = this.loadFont(id1);
						future1.onProgress((function(id5,f3) {
							return function(a13,a21) {
								f3[0](id5[0],a13,a21);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future1.onError((function(id6,f4) {
							return function(a14) {
								f4[0](id6[0],a14);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future1.onComplete((function(id7,f5) {
							return function(a15) {
								f5[0](id7[0],a15);
							};
						})([id1],[$bind(this,this.loadFont_onComplete)]));
						break;
					case "IMAGE":
						this.assetsTotal++;
						var future2 = this.loadImage(id1);
						future2.onProgress((function(id8,f6) {
							return function(a16,a22) {
								f6[0](id8[0],a16,a22);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future2.onError((function(id9,f7) {
							return function(a17) {
								f7[0](id9[0],a17);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future2.onComplete((function(id10,f8) {
							return function(a18) {
								f8[0](id10[0],a18);
							};
						})([id1],[$bind(this,this.loadImage_onComplete)]));
						break;
					case "MUSIC":case "SOUND":
						this.assetsTotal++;
						var future3 = this.loadAudioBuffer(id1);
						future3.onProgress((function(id11,f9) {
							return function(a19,a23) {
								f9[0](id11[0],a19,a23);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future3.onError((function(id12,f10) {
							return function(a110) {
								f10[0](id12[0],a110);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onError)]));
						future3.onComplete((function(id13,f11) {
							return function(a111) {
								f11[0](id13[0],a111);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onComplete)]));
						break;
					case "TEXT":
						this.assetsTotal++;
						var future4 = this.loadText(id1);
						future4.onProgress((function(id14,f12) {
							return function(a112,a24) {
								f12[0](id14[0],a112,a24);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future4.onError((function(id15,f13) {
							return function(a113) {
								f13[0](id15[0],a113);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future4.onComplete((function(id16,f14) {
							return function(a114) {
								f14[0](id16[0],a114);
							};
						})([id1],[$bind(this,this.loadText_onComplete)]));
						break;
					default:
					}
				}
			}
			this.__assetLoaded(null);
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.pathGroups;
				if(__map_reserved[id] != null ? _this4.existsReserved(id) : _this4.h.hasOwnProperty(id)) {
					var _this5 = this.pathGroups;
					return lime_media_AudioBuffer.loadFromFiles(__map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]);
				} else {
					var _this6 = this.paths;
					return lime_media_AudioBuffer.loadFromFile(__map_reserved[id] != null ? _this6.getReserved(id) : _this6.h[id]);
				}
			}
		}
	}
	,loadBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				var font = Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]);
				return font.__loadFromName(font.name);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.loadFromName(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadImage: function(id) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_graphics_Image.loadFromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var tmp;
			var _this2 = this.cachedBytes;
			if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
				var _this3 = this.classTypes;
				if(__map_reserved[id] != null) {
					tmp = _this3.existsReserved(id);
				} else {
					tmp = _this3.h.hasOwnProperty(id);
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				var bytes = this.getBytes(id);
				if(bytes == null) {
					return lime_app_Future.withValue(null);
				} else {
					var text = bytes.getString(0,bytes.length);
					var _this4 = this.cachedText;
					if(__map_reserved[id] != null) {
						_this4.setReserved(id,text);
					} else {
						_this4.h[id] = text;
					}
					return lime_app_Future.withValue(text);
				}
			} else {
				var request = new lime_net__$HTTPRequest_$String();
				var _this5 = this.paths;
				return request.load(__map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]);
			}
		}
	}
	,unload: function() {
	}
	,__assetLoaded: function(id) {
		this.assetsLoaded++;
		if(id != null) {
			var _this = this.types;
			lime_utils_Log.verbose("Loaded asset: " + id + " [" + (__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]) + "] (" + (this.assetsLoaded - 1) + "/" + (this.assetsTotal - 1) + ")",{ fileName : "AssetLibrary.hx", lineNumber : 698, className : "lime.utils.AssetLibrary", methodName : "__assetLoaded"});
		}
		if(id != null) {
			var _this1 = this.sizes;
			var size = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
			var _this2 = this.bytesLoadedCache;
			if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
				this.bytesLoaded += size;
			} else {
				var _this3 = this.bytesLoadedCache;
				var cache = __map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id];
				if(cache < size) {
					this.bytesLoaded += size - cache;
				}
			}
			var _this4 = this.bytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this4.setReserved(id,size);
			} else {
				_this4.h[id] = size;
			}
		}
		if(this.assetsLoaded < this.assetsTotal) {
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		} else {
			this.loaded = true;
			this.promise.progress(this.bytesTotal,this.bytesTotal);
			this.promise.complete(this);
		}
	}
	,__cacheBreak: function(path) {
		if(path.indexOf("?") > -1) {
			path += "&" + lime_utils_Assets.cache.version;
		} else {
			path += "?" + lime_utils_Assets.cache.version;
		}
		return path;
	}
	,__fromManifest: function(manifest) {
		var hasSize = manifest.version >= 2;
		var size;
		var id;
		var pathGroup;
		var classRef;
		var basePath = manifest.rootPath;
		if(basePath == null) {
			basePath = "";
		}
		if(basePath != "") {
			basePath += "/";
		}
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			if(hasSize && Object.prototype.hasOwnProperty.call(asset,"size")) {
				size = asset.size;
			} else {
				size = 100;
			}
			id = asset.id;
			if(Object.prototype.hasOwnProperty.call(asset,"path")) {
				var this1 = this.paths;
				var value = this.__cacheBreak(basePath + Std.string(Reflect.field(asset,"path")));
				var _this = this1;
				if(__map_reserved[id] != null) {
					_this.setReserved(id,value);
				} else {
					_this.h[id] = value;
				}
			}
			if(Object.prototype.hasOwnProperty.call(asset,"pathGroup")) {
				pathGroup = Reflect.field(asset,"pathGroup");
				var _g3 = 0;
				var _g2 = pathGroup.length;
				while(_g3 < _g2) {
					var i = _g3++;
					pathGroup[i] = this.__cacheBreak(basePath + pathGroup[i]);
				}
				var _this1 = this.pathGroups;
				if(__map_reserved[id] != null) {
					_this1.setReserved(id,pathGroup);
				} else {
					_this1.h[id] = pathGroup;
				}
			}
			var _this2 = this.sizes;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,size);
			} else {
				_this2.h[id] = size;
			}
			var value1 = asset.type;
			var _this3 = this.types;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,value1);
			} else {
				_this3.h[id] = value1;
			}
			if(Object.prototype.hasOwnProperty.call(asset,"preload")) {
				var this2 = this.preload;
				var value2 = Reflect.field(asset,"preload");
				var _this4 = this2;
				if(__map_reserved[id] != null) {
					_this4.setReserved(id,value2);
				} else {
					_this4.h[id] = value2;
				}
			}
			if(Object.prototype.hasOwnProperty.call(asset,"className")) {
				classRef = Type.resolveClass(Reflect.field(asset,"className"));
				var _this5 = this.classTypes;
				if(__map_reserved[id] != null) {
					_this5.setReserved(id,classRef);
				} else {
					_this5.h[id] = classRef;
				}
			}
		}
		this.bytesTotal = 0;
		var _g4 = 0;
		var _g11 = manifest.assets;
		while(_g4 < _g11.length) {
			var asset1 = _g11[_g4];
			++_g4;
			id = asset1.id;
			var tmp;
			var _this6 = this.preload;
			if(__map_reserved[id] != null ? _this6.existsReserved(id) : _this6.h.hasOwnProperty(id)) {
				var _this7 = this.preload;
				if(__map_reserved[id] != null) {
					tmp = _this7.getReserved(id);
				} else {
					tmp = _this7.h[id];
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this8 = this.sizes;
				this.bytesTotal += __map_reserved[id] != null ? _this8.getReserved(id) : _this8.h[id];
			}
		}
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,audioBuffer);
		} else {
			_this.h[id] = audioBuffer;
		}
		var _this1 = this.pathGroups;
		if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
			var _this2 = this.pathGroups;
			var pathGroup = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
			var otherID = this.pathGroups.keys();
			while(otherID.hasNext()) {
				var otherID1 = otherID.next();
				if(otherID1 == id) {
					continue;
				}
				var _g = 0;
				while(_g < pathGroup.length) {
					var path = pathGroup[_g];
					++_g;
					var _this3 = this.pathGroups;
					if((__map_reserved[otherID1] != null ? _this3.getReserved(otherID1) : _this3.h[otherID1]).indexOf(path) > -1) {
						var _this4 = this.cachedAudioBuffers;
						if(__map_reserved[otherID1] != null) {
							_this4.setReserved(otherID1,audioBuffer);
						} else {
							_this4.h[otherID1] = audioBuffer;
						}
						break;
					}
				}
			}
		}
		this.__assetLoaded(id);
	}
	,loadAudioBuffer_onError: function(id,message) {
		if(message != null && message != "") {
			lime_utils_Log.warn("Could not load \"" + id + "\": " + Std.string(message),{ fileName : "AssetLibrary.hx", lineNumber : 883, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		} else {
			lime_utils_Log.warn("Could not load \"" + id + "\"",{ fileName : "AssetLibrary.hx", lineNumber : 887, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		}
		this.loadAudioBuffer_onComplete(id,new lime_media_AudioBuffer());
	}
	,loadBytes_onComplete: function(id,bytes) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bytes);
		} else {
			_this.h[id] = bytes;
		}
		this.__assetLoaded(id);
	}
	,loadFont_onComplete: function(id,font) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,font);
		} else {
			_this.h[id] = font;
		}
		this.__assetLoaded(id);
	}
	,loadImage_onComplete: function(id,image) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,image);
		} else {
			_this.h[id] = image;
		}
		this.__assetLoaded(id);
	}
	,loadText_onComplete: function(id,text) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,text);
		} else {
			_this.h[id] = text;
		}
		this.__assetLoaded(id);
	}
	,load_onError: function(id,message) {
		if(message != null && message != "") {
			this.promise.error("Error loading asset \"" + id + "\": " + Std.string(message));
		} else {
			this.promise.error("Error loading asset \"" + id + "\"");
		}
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		if(bytesLoaded > 0) {
			var _this = this.sizes;
			var size = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			var percent;
			if(bytesTotal > 0) {
				percent = bytesLoaded / bytesTotal;
				if(percent > 1) {
					percent = 1;
				}
				bytesLoaded = Math.floor(percent * size);
			} else if(bytesLoaded > size) {
				bytesLoaded = size;
			}
			var _this1 = this.bytesLoadedCache;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				var _this2 = this.bytesLoadedCache;
				var cache = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
				if(bytesLoaded != cache) {
					this.bytesLoaded += bytesLoaded - cache;
				}
			} else {
				this.bytesLoaded += bytesLoaded;
			}
			var _this3 = this.bytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,bytesLoaded);
			} else {
				_this3.h[id] = bytesLoaded;
			}
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 2;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = true;
lime_utils_AssetManifest.fromBytes = function(bytes,rootPath) {
	if(bytes != null) {
		return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length),rootPath);
	} else {
		return null;
	}
};
lime_utils_AssetManifest.loadFromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
	});
};
lime_utils_AssetManifest.parse = function(data,rootPath) {
	if(data == null || data == "") {
		return null;
	}
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	manifest.name = manifestData.name;
	manifest.libraryType = manifestData.libraryType;
	manifest.libraryArgs = manifestData.libraryArgs;
	manifest.assets = haxe_Unserializer.run(manifestData.assets);
	if(Object.prototype.hasOwnProperty.call(manifestData,"rootPath")) {
		manifest.rootPath = manifestData.rootPath;
	}
	if(rootPath != null && rootPath != "") {
		if(manifest.rootPath == null || manifest.rootPath == "") {
			manifest.rootPath = rootPath;
		} else {
			manifest.rootPath = rootPath + "/" + manifest.rootPath;
		}
	}
	return manifest;
};
lime_utils_AssetManifest.__resolvePath = function(path) {
	if(path == null) {
		return null;
	}
	var queryIndex = path.indexOf("?");
	var basePath;
	if(queryIndex > -1) {
		basePath = HxOverrides.substr(path,0,queryIndex);
	} else {
		basePath = path;
	}
	StringTools.replace(basePath,"\\","/");
	while(StringTools.endsWith(basePath,"/")) basePath = HxOverrides.substr(basePath,0,basePath.length - 1);
	if(StringTools.endsWith(basePath,".bundle")) {
		if(queryIndex > -1) {
			return basePath + "/library.json" + HxOverrides.substr(path,queryIndex,null);
		} else {
			return basePath + "/library.json";
		}
	} else {
		return path;
	}
};
lime_utils_AssetManifest.__resolveRootPath = function(rootPath,path) {
	if(rootPath != null) {
		return rootPath;
	}
	var queryIndex = path.indexOf("?");
	if(queryIndex > -1) {
		rootPath = HxOverrides.substr(path,0,queryIndex);
	} else {
		rootPath = path;
	}
	StringTools.replace(rootPath,"\\","/");
	while(StringTools.endsWith(rootPath,"/")) {
		if(rootPath == "/") {
			return rootPath;
		}
		rootPath = HxOverrides.substr(rootPath,0,rootPath.length - 1);
	}
	if(StringTools.endsWith(rootPath,".bundle")) {
		return rootPath;
	} else {
		return haxe_io_Path.directory(rootPath);
	}
};
lime_utils_AssetManifest.prototype = {
	__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = true;
lime_utils_Assets.exists = function(id,type) {
	if(type == null) {
		type = "BINARY";
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.exists(symbol_symbolName,type);
	}
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.get(id);
			if(font != null) {
				return font;
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.get(id);
			if(lime_utils_Assets.isValidImage(image)) {
				return image;
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.get(id);
			if(lime_utils_Assets.isValidAudio(audio)) {
				return audio;
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		default:
			return null;
		}
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			if(symbol_library.isLocal(symbol_symbolName,type)) {
				var asset = symbol_library.getAsset(symbol_symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) {
					lime_utils_Assets.cache.set(id,type,asset);
				}
				return asset;
			} else {
				lime_utils_Log.error(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 160, className : "lime.utils.Assets", methodName : "getAsset"});
			}
		} else {
			lime_utils_Log.error("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 166, className : "lime.utils.Assets", methodName : "getAsset"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "Assets.hx", lineNumber : 172, className : "lime.utils.Assets", methodName : "getAsset"});
	}
	return null;
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) {
			return true;
		}
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.isLocal(symbol_symbolName,type);
	} else {
		return false;
	}
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(image) {
	if(image != null) {
		return image.buffer != null;
	} else {
		return false;
	}
};
lime_utils_Assets.loadLibrary = function(id) {
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return library.load();
	}
	var path = id;
	var rootPath = null;
	var _this = lime_utils_Assets.libraryPaths;
	if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
		var _this1 = lime_utils_Assets.libraryPaths;
		if(__map_reserved[id] != null) {
			path = _this1.getReserved(id);
		} else {
			path = _this1.h[id];
		}
		rootPath = lime_utils_Assets.defaultRootPath;
	} else if(StringTools.endsWith(path,".bundle")) {
		path += "/library.json";
	}
	lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
		if(manifest == null) {
			promise.error("Cannot parse asset manifest for library \"" + id + "\"");
			return;
		}
		var library1 = lime_utils_AssetLibrary.fromManifest(manifest);
		if(library1 == null) {
			promise.error("Cannot open library \"" + id + "\"");
		} else {
			var _this2 = lime_utils_Assets.libraries;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,library1);
			} else {
				_this2.h[id] = library1;
			}
			library1.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
			var tmp = library1.load();
			promise.completeWith(tmp);
		}
	}).onError(function(_) {
		promise.error("There is no asset library with an ID of \"" + id + "\"");
	});
	return promise.future;
};
lime_utils_Assets.registerLibrary = function(name,library) {
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		var _this1 = lime_utils_Assets.libraries;
		if((__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]) == library) {
			return;
		} else {
			lime_utils_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_utils_Assets.library_onChange);
	}
	var _this2 = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		_this2.setReserved(name,library);
	} else {
		_this2.h[name] = library;
	}
};
lime_utils_Assets.unloadLibrary = function(name) {
	var _this = lime_utils_Assets.libraries;
	var library = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	lime_utils_Assets.libraries.remove(name);
};
lime_utils_Assets.__libraryNotFound = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	if(lime_app_Application.current != null && lime_app_Application.current.__preloader != null && !lime_app_Application.current.__preloader.complete) {
		return "There is no asset library named \"" + name + "\", or it is not yet preloaded";
	} else {
		return "There is no asset library named \"" + name + "\"";
	}
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils__$Bytes_Bytes_$Impl_$ = {};
$hxClasses["lime.utils._Bytes.Bytes_Impl_"] = lime_utils__$Bytes_Bytes_$Impl_$;
lime_utils__$Bytes_Bytes_$Impl_$.__name__ = true;
lime_utils__$Bytes_Bytes_$Impl_$._new = function(length,bytesData) {
	var this1 = new haxe_io_Bytes(bytesData);
	return this1;
};
lime_utils__$Bytes_Bytes_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.fromFile = function(path) {
	return null;
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
	return request.load(path);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = true;
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		var message1 = "[" + info.className + "] ERROR: " + Std.string(message);
		if(lime_utils_Log.throwErrors) {
			throw new js__$Boot_HaxeError(message1);
		} else {
			console.error(message1);
		}
	}
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		console.log("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.warn("[" + info.className + "] WARNING: " + Std.string(message));
	}
};
var lime_utils_Preloader = function() {
	this.bytesTotalCache = new haxe_ds_StringMap();
	this.bytesLoadedCache2 = new haxe_ds_StringMap();
	this.bytesLoadedCache = new haxe_ds_ObjectMap();
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.libraries = [];
	this.libraryNames = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.utils.Preloader"] = lime_utils_Preloader;
lime_utils_Preloader.__name__ = true;
lime_utils_Preloader.prototype = {
	addLibrary: function(library) {
		this.libraries.push(library);
	}
	,addLibraryName: function(name) {
		if(this.libraryNames.indexOf(name) == -1) {
			this.libraryNames.push(name);
		}
	}
	,load: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			this.bytesTotal += library.bytesTotal;
		}
		this.loadedLibraries = -1;
		this.preloadStarted = false;
		var _g2 = 0;
		var _g11 = this.libraries;
		while(_g2 < _g11.length) {
			var library1 = [_g11[_g2]];
			++_g2;
			lime_utils_Log.verbose("Preloading asset library",{ fileName : "Preloader.hx", lineNumber : 150, className : "lime.utils.Preloader", methodName : "load"});
			library1[0].load().onProgress((function(library2) {
				return function(loaded,total) {
					if(_gthis.bytesLoadedCache.h.__keys__[library2[0].__id__] == null) {
						_gthis.bytesLoaded += loaded;
					} else {
						_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache.h[library2[0].__id__];
					}
					_gthis.bytesLoadedCache.set(library2[0],loaded);
					if(!_gthis.simulateProgress) {
						_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
					}
				};
			})(library1)).onComplete((function(library3) {
				return function(_) {
					if(_gthis.bytesLoadedCache.h.__keys__[library3[0].__id__] == null) {
						_gthis.bytesLoaded += library3[0].bytesTotal;
					} else {
						_gthis.bytesLoaded += library3[0].bytesTotal - _gthis.bytesLoadedCache.h[library3[0].__id__];
					}
					_gthis.loadedAssetLibrary();
				};
			})(library1)).onError((function() {
				return function(e) {
					lime_utils_Log.error(e,{ fileName : "Preloader.hx", lineNumber : 188, className : "lime.utils.Preloader", methodName : "load"});
				};
			})());
		}
		var _g3 = 0;
		var _g12 = this.libraryNames;
		while(_g3 < _g12.length) {
			var name = _g12[_g3];
			++_g3;
			this.bytesTotal += 200;
		}
		this.loadedLibraries++;
		this.preloadStarted = true;
		this.updateProgress();
	}
	,loadedAssetLibrary: function(name) {
		this.loadedLibraries++;
		var current = this.loadedLibraries;
		if(!this.preloadStarted) {
			++current;
		}
		var totalLibraries = this.libraries.length + this.libraryNames.length;
		if(name != null) {
			lime_utils_Log.verbose("Loaded asset library: " + name + " [" + current + "/" + totalLibraries + "]",{ fileName : "Preloader.hx", lineNumber : 220, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		} else {
			lime_utils_Log.verbose("Loaded asset library [" + current + "/" + totalLibraries + "]",{ fileName : "Preloader.hx", lineNumber : 224, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		}
		this.updateProgress();
	}
	,start: function() {
		if(this.complete || this.simulateProgress || !this.preloadComplete) {
			return;
		}
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		var _gthis = this;
		if(!this.simulateProgress) {
			this.onProgress.dispatch(this.bytesLoaded,this.bytesTotal);
		}
		if(this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
			this.initLibraryNames = true;
			var _g = 0;
			var _g1 = this.libraryNames;
			while(_g < _g1.length) {
				var name = [_g1[_g]];
				++_g;
				lime_utils_Log.verbose("Preloading asset library: " + name[0],{ fileName : "Preloader.hx", lineNumber : 273, className : "lime.utils.Preloader", methodName : "updateProgress"});
				lime_utils_Assets.loadLibrary(name[0]).onProgress((function(name1) {
					return function(loaded,total) {
						if(total > 0) {
							var _this = _gthis.bytesTotalCache;
							if(!(__map_reserved[name1[0]] != null ? _this.existsReserved(name1[0]) : _this.h.hasOwnProperty(name1[0]))) {
								var _this1 = _gthis.bytesTotalCache;
								if(__map_reserved[name1[0]] != null) {
									_this1.setReserved(name1[0],total);
								} else {
									_this1.h[name1[0]] = total;
								}
								_gthis.bytesTotal += total - 200;
							}
							if(loaded > total) {
								loaded = total;
							}
							var _this2 = _gthis.bytesLoadedCache2;
							if(!(__map_reserved[name1[0]] != null ? _this2.existsReserved(name1[0]) : _this2.h.hasOwnProperty(name1[0]))) {
								_gthis.bytesLoaded += loaded;
							} else {
								var _this3 = _gthis.bytesLoadedCache2;
								_gthis.bytesLoaded += loaded - (__map_reserved[name1[0]] != null ? _this3.getReserved(name1[0]) : _this3.h[name1[0]]);
							}
							var _this4 = _gthis.bytesLoadedCache2;
							if(__map_reserved[name1[0]] != null) {
								_this4.setReserved(name1[0],loaded);
							} else {
								_this4.h[name1[0]] = loaded;
							}
							if(!_gthis.simulateProgress) {
								_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
							}
						}
					};
				})(name)).onComplete((function(name2) {
					return function(library) {
						var total1 = 200;
						var _this5 = _gthis.bytesTotalCache;
						if(__map_reserved[name2[0]] != null ? _this5.existsReserved(name2[0]) : _this5.h.hasOwnProperty(name2[0])) {
							var _this6 = _gthis.bytesTotalCache;
							if(__map_reserved[name2[0]] != null) {
								total1 = _this6.getReserved(name2[0]);
							} else {
								total1 = _this6.h[name2[0]];
							}
						}
						var _this7 = _gthis.bytesLoadedCache2;
						if(!(__map_reserved[name2[0]] != null ? _this7.existsReserved(name2[0]) : _this7.h.hasOwnProperty(name2[0]))) {
							_gthis.bytesLoaded += total1;
						} else {
							var _this8 = _gthis.bytesLoadedCache2;
							_gthis.bytesLoaded += total1 - (__map_reserved[name2[0]] != null ? _this8.getReserved(name2[0]) : _this8.h[name2[0]]);
						}
						_gthis.loadedAssetLibrary(name2[0]);
					};
				})(name)).onError((function() {
					return function(e) {
						lime_utils_Log.error(e,{ fileName : "Preloader.hx", lineNumber : 332, className : "lime.utils.Preloader", methodName : "updateProgress"});
					};
				})());
			}
		}
		if(!this.simulateProgress && this.loadedLibraries == this.libraries.length + this.libraryNames.length) {
			if(!this.preloadComplete) {
				this.preloadComplete = true;
				lime_utils_Log.verbose("Preload complete",{ fileName : "Preloader.hx", lineNumber : 346, className : "lime.utils.Preloader", methodName : "updateProgress"});
			}
			this.start();
		}
	}
	,__class__: lime_utils_Preloader
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
var init = lime__$internal_backend_html5_HTML5Application;
var init = lime_app_Application;
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = true;
$hxClasses["Array"] = Array;
Array.__name__ = true;
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1 = new Uint32Array(256);
lime_math__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math__$RGBA_RGBA_$Impl_$.__alpha16[i] = Math.ceil(i * 257.003921568627447);
}
var this2 = new Uint8Array(511);
lime_math__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_utils_Log.level = 4;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) {
	console.log = function() {
	};
}
com_gdx_Gdx.__startTime = new Date().getTime() / 1000;
com_gdx_color_Color3.WHITE = new com_gdx_color_Color3(1.0,1.0,1.0);
com_gdx_color_Color3.BLUE = new com_gdx_color_Color3(0.0,0.0,1.0);
com_gdx_color_Color3.DARKVIOLET = new com_gdx_color_Color3(0.58,0.0,0.83);
com_gdx_color_Color3.DARKORANGE = new com_gdx_color_Color3(1.0,0.50,0.83);
com_gdx_color_Color3.YELLOW = new com_gdx_color_Color3(1.0,1.0,0.0);
com_gdx_math_Matrix._xAxis = new com_gdx_math_Vector3(0,0,0);
com_gdx_math_Matrix._yAxis = new com_gdx_math_Vector3(0,0,0);
com_gdx_math_Matrix._zAxis = new com_gdx_math_Vector3(0,0,0);
com_gdx_scene2d_render_SpriteBatch.FIX_ARTIFACTS_BY_STRECHING_TEXEL = true;
com_gdx_scene3d_MeshBSP.kEntities = 0;
com_gdx_scene3d_MeshBSP.kTextures = 1;
com_gdx_scene3d_MeshBSP.kVertices = 10;
com_gdx_scene3d_MeshBSP.kIndices = 11;
com_gdx_scene3d_MeshBSP.kFaces = 13;
com_gdx_scene3d_MeshBSP.kLightmaps = 14;
com_gdx_scene3d_MeshBSP.kMaxLumps = 17;
com_gdx_scene3d_SceneManager.matIden = (function($this) {
	var $r;
	var result = new com_gdx_math_Matrix();
	result.m11 = 1.0;
	result.m12 = 0;
	result.m13 = 0;
	result.m14 = 0;
	result.m21 = 0;
	result.m22 = 1.0;
	result.m23 = 0;
	result.m24 = 0;
	result.m31 = 0;
	result.m32 = 0;
	result.m33 = 1.0;
	result.m34 = 0;
	result.m41 = 0;
	result.m42 = 0;
	result.m43 = 0;
	result.m44 = 1.0;
	$r = result;
	return $r;
}(this));
com_gdx_util_Util.Rad2Deg = 57.2957795130823229;
com_gdx_util_Util.Deg2Rad = 0.0174532925199432955;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests = 0;
lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit = 4;
lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue = new List();
lime__$internal_backend_html5_HTML5Window.windowID = 0;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_system_Sensor.sensorByID = new haxe_ds_IntMap();
lime_system_Sensor.sensors = [];
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui_Touch.onCancel = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.libraryPaths = new haxe_ds_StringMap();
lime_utils_Log.throwErrors = true;
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=opn3d.js.map